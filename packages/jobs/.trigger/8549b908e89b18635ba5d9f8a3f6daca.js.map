{
  "version": 3,
  "sources": ["<define:__PROJECT_CONFIG__>", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/index.ts", "../../../node_modules/@trigger.dev/core/package.json", "../../../node_modules/@trigger.dev/core/src/v3/schemas/tokens.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/api.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/resources.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/schemas.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/common.ts", "../../../node_modules/@trigger.dev/core/src/v3/errors.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/messages.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/style.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/fetch.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/eventFilter.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/openTelemetry.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/platform.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/globals.ts", "../../../node_modules/@trigger.dev/core/src/v3/semanticInternalAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/taskContext/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-context-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/core.ts", "../../../node_modules/@trigger.dev/core/src/retry.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/retries.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/errors.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/flattenAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/styleAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/pagination.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/simpleClock.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/limits.ts", "../../../node_modules/@trigger.dev/core/src/v3/logger/taskLogger.ts", "../../../node_modules/@trigger.dev/core/src/v3/logger/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/logger-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/runtime/noopRuntimeManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/noopUsageManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/api.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/runtime/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/runtime-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/getEnv.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClientManager/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClientManager-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-catalog/noopTaskCatalog.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-catalog/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-catalog-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/durations.ts", "../../../node_modules/@trigger.dev/core/src/v3/tracer.ts", "../../../node_modules/@trigger.dev/core/src/eventFilterMatches.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/omit.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/detectDependencyVersion.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/ioSerialization.ts", "../../../node_modules/@trigger.dev/core/src/v3/workers/taskExecutor.ts", "../../../node_modules/@trigger.dev/core/src/v3/errors.ts", "../../../node_modules/@trigger.dev/core/src/v3/otel/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/otel/tracingSDK.ts", "../../../node_modules/@trigger.dev/core/src/v3/limits.ts", "../../../node_modules/@trigger.dev/core/src/v3/semanticInternalAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/flattenAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/platform.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/globals.ts", "../../../node_modules/@trigger.dev/core/src/v3/taskContext/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-context-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/taskContext/otelProcessors.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/getEnv.ts", "../../../node_modules/@trigger.dev/core/package.json", "../../../node_modules/@trigger.dev/core/src/v3/schemas/api.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/resources.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/schemas.ts", "../../../node_modules/@trigger.dev/core/src/v3/schemas/common.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/core.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/retries.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/errors.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/styleAttributes.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClient/pagination.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClientManager/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/apiClientManager-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/ioSerialization.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/preciseWallClock.ts", "../../../node_modules/@trigger.dev/core/src/v3/logger/taskLogger.ts", "../../../node_modules/@trigger.dev/core/src/v3/icons.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/simpleClock.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/index.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/consoleInterceptor.ts", "../../../node_modules/@trigger.dev/core/src/v3/task-catalog/standardTaskCatalog.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/noopUsageManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/api.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage-api.ts", "../../../node_modules/@trigger.dev/core/src/v3/clock/clock.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/devUsageManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/prodUsageManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/usage/usageClient.ts", "../../../node_modules/@trigger.dev/core/src/v3/utils/timers.ts", "../../../node_modules/@trigger.dev/core/src/v3/runtime/devRuntimeManager.ts", "../../../node_modules/@trigger.dev/core/src/v3/zodMessageHandler.ts", "../__entryPoint.ts", "../../../../../../../../private/tmp/bunx-501-trigger.dev@beta/node_modules/trigger.dev/dist/workers/dev/worker-setup.js", "../trigger.config.ts"],
  "sourcesContent": ["", "import { context, propagation } from \"@opentelemetry/api\";\nimport { z } from \"zod\";\nimport { version } from \"../../../package.json\";\nimport {\n  AddTagsRequestBody,\n  BatchTaskRunExecutionResult,\n  BatchTriggerTaskRequestBody,\n  BatchTriggerTaskResponse,\n  CanceledRunResponse,\n  CreateEnvironmentVariableRequestBody,\n  CreateScheduleOptions,\n  CreateUploadPayloadUrlResponseBody,\n  DeletedScheduleObject,\n  EnvironmentVariableResponseBody,\n  EnvironmentVariableValue,\n  EnvironmentVariables,\n  ListRunResponseItem,\n  ListScheduleOptions,\n  ReplayRunResponse,\n  RescheduleRunRequestBody,\n  RetrieveRunResponse,\n  ScheduleObject,\n  TaskRunExecutionResult,\n  TriggerTaskRequestBody,\n  TriggerTaskResponse,\n  UpdateEnvironmentVariableRequestBody,\n  UpdateScheduleOptions,\n} from \"../schemas\";\nimport { taskContext } from \"../task-context-api\";\nimport {\n  ApiRequestOptions,\n  CursorPagePromise,\n  ZodFetchOptions,\n  isRequestOptions,\n  zodfetch,\n  zodfetchCursorPage,\n  zodfetchOffsetLimitPage,\n} from \"./core\";\nimport { ApiError } from \"./errors\";\nimport {\n  CreateEnvironmentVariableParams,\n  ImportEnvironmentVariablesParams,\n  ListProjectRunsQueryParams,\n  ListRunsQueryParams,\n  UpdateEnvironmentVariableParams,\n} from \"./types\";\n\nexport type {\n  CreateEnvironmentVariableParams,\n  ImportEnvironmentVariablesParams,\n  UpdateEnvironmentVariableParams,\n};\n\nexport type TriggerOptions = {\n  spanParentAsLink?: boolean;\n};\n\nconst DEFAULT_ZOD_FETCH_OPTIONS: ZodFetchOptions = {\n  retry: {\n    maxAttempts: 3,\n    minTimeoutInMs: 1000,\n    maxTimeoutInMs: 30_000,\n    factor: 2,\n    randomize: false,\n  },\n};\n\nexport { isRequestOptions };\nexport type { ApiRequestOptions };\n\n/**\n * Trigger.dev v3 API client\n */\nexport class ApiClient {\n  private readonly baseUrl: string;\n  private readonly defaultRequestOptions: ZodFetchOptions;\n\n  constructor(\n    baseUrl: string,\n    private readonly accessToken: string,\n    requestOptions: ApiRequestOptions = {}\n  ) {\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\");\n    this.defaultRequestOptions = mergeRequestOptions(DEFAULT_ZOD_FETCH_OPTIONS, requestOptions);\n  }\n\n  async getRunResult(\n    runId: string,\n    requestOptions?: ZodFetchOptions\n  ): Promise<TaskRunExecutionResult | undefined> {\n    try {\n      return await zodfetch(\n        TaskRunExecutionResult,\n        `${this.baseUrl}/api/v1/runs/${runId}/result`,\n        {\n          method: \"GET\",\n          headers: this.#getHeaders(false),\n        },\n        mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n      );\n    } catch (error) {\n      if (error instanceof ApiError) {\n        if (error.status === 404) {\n          return undefined;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  async getBatchResults(\n    batchId: string,\n    requestOptions?: ZodFetchOptions\n  ): Promise<BatchTaskRunExecutionResult | undefined> {\n    return await zodfetch(\n      BatchTaskRunExecutionResult,\n      `${this.baseUrl}/api/v1/batches/${batchId}/results`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  triggerTask(\n    taskId: string,\n    body: TriggerTaskRequestBody,\n    options?: TriggerOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    const encodedTaskId = encodeURIComponent(taskId);\n\n    return zodfetch(\n      TriggerTaskResponse,\n      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/trigger`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(options?.spanParentAsLink ?? false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  batchTriggerTask(\n    taskId: string,\n    body: BatchTriggerTaskRequestBody,\n    options?: TriggerOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    const encodedTaskId = encodeURIComponent(taskId);\n\n    return zodfetch(\n      BatchTriggerTaskResponse,\n      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/batch`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(options?.spanParentAsLink ?? false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createUploadPayloadUrl(filename: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CreateUploadPayloadUrlResponseBody,\n      `${this.baseUrl}/api/v1/packets/${filename}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  getPayloadUrl(filename: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CreateUploadPayloadUrlResponseBody,\n      `${this.baseUrl}/api/v1/packets/${filename}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      RetrieveRunResponse,\n      `${this.baseUrl}/api/v3/runs/${runId}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listRuns(\n    query?: ListRunsQueryParams,\n    requestOptions?: ZodFetchOptions\n  ): CursorPagePromise<typeof ListRunResponseItem> {\n    const searchParams = createSearchQueryForListRuns(query);\n\n    return zodfetchCursorPage(\n      ListRunResponseItem,\n      `${this.baseUrl}/api/v1/runs`,\n      {\n        query: searchParams,\n        limit: query?.limit,\n        after: query?.after,\n        before: query?.before,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listProjectRuns(\n    projectRef: string,\n    query?: ListProjectRunsQueryParams,\n    requestOptions?: ZodFetchOptions\n  ): CursorPagePromise<typeof ListRunResponseItem> {\n    const searchParams = createSearchQueryForListRuns(query);\n\n    if (query?.env) {\n      searchParams.append(\n        \"filter[env]\",\n        Array.isArray(query.env) ? query.env.join(\",\") : query.env\n      );\n    }\n\n    return zodfetchCursorPage(\n      ListRunResponseItem,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/runs`,\n      {\n        query: searchParams,\n        limit: query?.limit,\n        after: query?.after,\n        before: query?.before,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  replayRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ReplayRunResponse,\n      `${this.baseUrl}/api/v1/runs/${runId}/replay`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  cancelRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CanceledRunResponse,\n      `${this.baseUrl}/api/v2/runs/${runId}/cancel`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  rescheduleRun(runId: string, body: RescheduleRunRequestBody, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      RetrieveRunResponse,\n      `${this.baseUrl}/api/v1/runs/${runId}/reschedule`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  addTags(runId: string, body: AddTagsRequestBody, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      z.object({ message: z.string() }),\n      `${this.baseUrl}/api/v1/runs/${runId}/tags`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createSchedule(options: CreateScheduleOptions, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(options),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listSchedules(options?: ListScheduleOptions, requestOptions?: ZodFetchOptions) {\n    const searchParams = new URLSearchParams();\n\n    if (options?.page) {\n      searchParams.append(\"page\", options.page.toString());\n    }\n\n    if (options?.perPage) {\n      searchParams.append(\"perPage\", options.perPage.toString());\n    }\n\n    return zodfetchOffsetLimitPage(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules`,\n      {\n        page: options?.page,\n        limit: options?.perPage,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  updateSchedule(\n    scheduleId: string,\n    options: UpdateScheduleOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(options),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deactivateSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}/deactivate`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  activateSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}/activate`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deleteSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      DeletedScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"DELETE\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listEnvVars(projectRef: string, slug: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariables,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  importEnvVars(\n    projectRef: string,\n    slug: string,\n    body: ImportEnvironmentVariablesParams,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/import`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveEnvVar(projectRef: string, slug: string, key: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariableValue,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createEnvVar(\n    projectRef: string,\n    slug: string,\n    body: CreateEnvironmentVariableRequestBody,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  updateEnvVar(\n    projectRef: string,\n    slug: string,\n    key: string,\n    body: UpdateEnvironmentVariableRequestBody,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deleteEnvVar(projectRef: string, slug: string, key: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"DELETE\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  #getHeaders(spanParentAsLink: boolean) {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.accessToken}`,\n      \"trigger-version\": version,\n    };\n\n    // Only inject the context if we are inside a task\n    if (taskContext.isInsideTask) {\n      headers[\"x-trigger-worker\"] = \"true\";\n      propagation.inject(context.active(), headers);\n\n      if (spanParentAsLink) {\n        headers[\"x-trigger-span-parent-as-link\"] = \"1\";\n      }\n    }\n\n    return headers;\n  }\n}\n\nfunction createSearchQueryForListRuns(query?: ListRunsQueryParams): URLSearchParams {\n  const searchParams = new URLSearchParams();\n\n  if (query) {\n    if (query.status) {\n      searchParams.append(\n        \"filter[status]\",\n        Array.isArray(query.status) ? query.status.join(\",\") : query.status\n      );\n    }\n\n    if (query.taskIdentifier) {\n      searchParams.append(\n        \"filter[taskIdentifier]\",\n        Array.isArray(query.taskIdentifier) ? query.taskIdentifier.join(\",\") : query.taskIdentifier\n      );\n    }\n\n    if (query.version) {\n      searchParams.append(\n        \"filter[version]\",\n        Array.isArray(query.version) ? query.version.join(\",\") : query.version\n      );\n    }\n\n    if (query.bulkAction) {\n      searchParams.append(\"filter[bulkAction]\", query.bulkAction);\n    }\n\n    if (query.tag) {\n      searchParams.append(\n        \"filter[tag]\",\n        Array.isArray(query.tag) ? query.tag.join(\",\") : query.tag\n      );\n    }\n\n    if (query.schedule) {\n      searchParams.append(\"filter[schedule]\", query.schedule);\n    }\n\n    if (typeof query.isTest === \"boolean\") {\n      searchParams.append(\"filter[isTest]\", String(query.isTest));\n    }\n\n    if (query.from) {\n      searchParams.append(\n        \"filter[createdAt][from]\",\n        query.from instanceof Date ? query.from.getTime().toString() : query.from.toString()\n      );\n    }\n\n    if (query.to) {\n      searchParams.append(\n        \"filter[createdAt][to]\",\n        query.to instanceof Date ? query.to.getTime().toString() : query.to.toString()\n      );\n    }\n\n    if (query.period) {\n      searchParams.append(\"filter[createdAt][period]\", query.period);\n    }\n  }\n\n  return searchParams;\n}\n\nexport function mergeRequestOptions(\n  defaultOptions: ZodFetchOptions,\n  options?: ApiRequestOptions\n): ZodFetchOptions {\n  if (!options) {\n    return defaultOptions;\n  }\n\n  return {\n    ...defaultOptions,\n    ...options,\n    retry: {\n      ...defaultOptions.retry,\n      ...options.retry,\n    },\n  };\n}\n", "{\n  \"name\": \"@trigger.dev/core\",\n  \"version\": \"3.0.0-beta.56\",\n  \"description\": \"Core code used across the Trigger.dev SDK and platform\",\n  \"license\": \"MIT\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"module\": \"./dist/index.mjs\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./dist/index.d.mts\",\n        \"default\": \"./dist/index.mjs\"\n      },\n      \"require\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\"\n    },\n    \"./eventFilterMatches\": {\n      \"import\": {\n        \"types\": \"./dist/eventFilterMatches.d.mts\",\n        \"default\": \"./dist/eventFilterMatches.mjs\"\n      },\n      \"require\": \"./dist/eventFilterMatches.js\",\n      \"types\": \"./dist/eventFilterMatches.d.ts\"\n    },\n    \"./replacements\": {\n      \"import\": {\n        \"types\": \"./dist/replacements.d.mts\",\n        \"default\": \"./dist/replacements.mjs\"\n      },\n      \"require\": \"./dist/replacements.js\",\n      \"types\": \"./dist/replacements.d.ts\"\n    },\n    \"./requestFilterMatches\": {\n      \"import\": {\n        \"types\": \"./dist/requestFilterMatches.d.mts\",\n        \"default\": \"./dist/requestFilterMatches.mjs\"\n      },\n      \"require\": \"./dist/requestFilterMatches.js\",\n      \"types\": \"./dist/requestFilterMatches.d.ts\"\n    },\n    \"./retry\": {\n      \"import\": {\n        \"types\": \"./dist/retry.d.mts\",\n        \"default\": \"./dist/retry.mjs\"\n      },\n      \"require\": \"./dist/retry.js\",\n      \"types\": \"./dist/retry.d.ts\"\n    },\n    \"./utils\": {\n      \"import\": {\n        \"types\": \"./dist/utils.d.mts\",\n        \"default\": \"./dist/utils.mjs\"\n      },\n      \"require\": \"./dist/utils.js\",\n      \"types\": \"./dist/utils.d.ts\"\n    },\n    \"./schemas\": {\n      \"import\": {\n        \"types\": \"./dist/schemas/index.d.mts\",\n        \"default\": \"./dist/schemas/index.mjs\"\n      },\n      \"require\": \"./dist/schemas/index.js\",\n      \"types\": \"./dist/schemas/index.d.ts\"\n    },\n    \"./types\": {\n      \"import\": {\n        \"types\": \"./dist/types.d.mts\",\n        \"default\": \"./dist/types.mjs\"\n      },\n      \"require\": \"./dist/types.js\",\n      \"types\": \"./dist/types.d.ts\"\n    },\n    \"./versions\": {\n      \"import\": {\n        \"types\": \"./dist/versions.d.mts\",\n        \"default\": \"./dist/versions.mjs\"\n      },\n      \"require\": \"./dist/versions.js\",\n      \"types\": \"./dist/versions.d.ts\"\n    },\n    \"./v3\": {\n      \"import\": {\n        \"types\": \"./dist/v3/index.d.mts\",\n        \"default\": \"./dist/v3/index.mjs\"\n      },\n      \"require\": \"./dist/v3/index.js\",\n      \"types\": \"./dist/v3/index.d.ts\"\n    },\n    \"./v3/errors\": {\n      \"import\": {\n        \"types\": \"./dist/v3/errors.d.mts\",\n        \"default\": \"./dist/v3/errors.mjs\"\n      },\n      \"require\": \"./dist/v3/errors.js\",\n      \"types\": \"./dist/v3/errors.d.ts\"\n    },\n    \"./v3/logger-api\": {\n      \"import\": {\n        \"types\": \"./dist/v3/logger-api.d.mts\",\n        \"default\": \"./dist/v3/logger-api.mjs\"\n      },\n      \"require\": \"./dist/v3/logger-api.js\",\n      \"types\": \"./dist/v3/logger-api.d.ts\"\n    },\n    \"./v3/otel\": {\n      \"import\": {\n        \"types\": \"./dist/v3/otel/index.d.mts\",\n        \"default\": \"./dist/v3/otel/index.mjs\"\n      },\n      \"require\": \"./dist/v3/otel/index.js\",\n      \"types\": \"./dist/v3/otel/index.d.ts\"\n    },\n    \"./v3/semanticInternalAttributes\": {\n      \"import\": {\n        \"types\": \"./dist/v3/semanticInternalAttributes.d.mts\",\n        \"default\": \"./dist/v3/semanticInternalAttributes.mjs\"\n      },\n      \"require\": \"./dist/v3/semanticInternalAttributes.js\",\n      \"types\": \"./dist/v3/semanticInternalAttributes.d.ts\"\n    },\n    \"./v3/utils/durations\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/durations.d.mts\",\n        \"default\": \"./dist/v3/utils/durations.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/durations.js\",\n      \"types\": \"./dist/v3/utils/durations.d.ts\"\n    },\n    \"./v3/utils/flattenAttributes\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/flattenAttributes.d.mts\",\n        \"default\": \"./dist/v3/utils/flattenAttributes.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/flattenAttributes.js\",\n      \"types\": \"./dist/v3/utils/flattenAttributes.d.ts\"\n    },\n    \"./v3/utils/ioSerialization\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/ioSerialization.d.mts\",\n        \"default\": \"./dist/v3/utils/ioSerialization.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/ioSerialization.js\",\n      \"types\": \"./dist/v3/utils/ioSerialization.d.ts\"\n    },\n    \"./v3/utils/omit\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/omit.d.mts\",\n        \"default\": \"./dist/v3/utils/omit.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/omit.js\",\n      \"types\": \"./dist/v3/utils/omit.d.ts\"\n    },\n    \"./v3/utils/retries\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/retries.d.mts\",\n        \"default\": \"./dist/v3/utils/retries.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/retries.js\",\n      \"types\": \"./dist/v3/utils/retries.d.ts\"\n    },\n    \"./v3/utils/structuredLogger\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/structuredLogger.d.mts\",\n        \"default\": \"./dist/v3/utils/structuredLogger.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/structuredLogger.js\",\n      \"types\": \"./dist/v3/utils/structuredLogger.d.ts\"\n    },\n    \"./v3/zodfetch\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodfetch.d.mts\",\n        \"default\": \"./dist/v3/zodfetch.mjs\"\n      },\n      \"require\": \"./dist/v3/zodfetch.js\",\n      \"types\": \"./dist/v3/zodfetch.d.ts\"\n    },\n    \"./v3/zodMessageHandler\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodMessageHandler.d.mts\",\n        \"default\": \"./dist/v3/zodMessageHandler.mjs\"\n      },\n      \"require\": \"./dist/v3/zodMessageHandler.js\",\n      \"types\": \"./dist/v3/zodMessageHandler.d.ts\"\n    },\n    \"./v3/zodNamespace\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodNamespace.d.mts\",\n        \"default\": \"./dist/v3/zodNamespace.mjs\"\n      },\n      \"require\": \"./dist/v3/zodNamespace.js\",\n      \"types\": \"./dist/v3/zodNamespace.d.ts\"\n    },\n    \"./v3/zodSocket\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodSocket.d.mts\",\n        \"default\": \"./dist/v3/zodSocket.mjs\"\n      },\n      \"require\": \"./dist/v3/zodSocket.js\",\n      \"types\": \"./dist/v3/zodSocket.d.ts\"\n    },\n    \"./v3/zodIpc\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodIpc.d.mts\",\n        \"default\": \"./dist/v3/zodIpc.mjs\"\n      },\n      \"require\": \"./dist/v3/zodIpc.js\",\n      \"types\": \"./dist/v3/zodIpc.d.ts\"\n    },\n    \"./v3/utils/timers\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/timers.d.mts\",\n        \"default\": \"./dist/v3/utils/timers.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/timers.js\",\n      \"types\": \"./dist/v3/utils/timers.d.ts\"\n    },\n    \"./v3/dev\": {\n      \"import\": {\n        \"types\": \"./dist/v3/dev/index.d.mts\",\n        \"default\": \"./dist/v3/dev/index.mjs\"\n      },\n      \"require\": \"./dist/v3/dev/index.js\",\n      \"types\": \"./dist/v3/dev/index.d.ts\"\n    },\n    \"./v3/prod\": {\n      \"import\": {\n        \"types\": \"./dist/v3/prod/index.d.mts\",\n        \"default\": \"./dist/v3/prod/index.mjs\"\n      },\n      \"require\": \"./dist/v3/prod/index.js\",\n      \"types\": \"./dist/v3/prod/index.d.ts\"\n    },\n    \"./v3/workers\": {\n      \"import\": {\n        \"types\": \"./dist/v3/workers/index.d.mts\",\n        \"default\": \"./dist/v3/workers/index.mjs\"\n      },\n      \"require\": \"./dist/v3/workers/index.js\",\n      \"types\": \"./dist/v3/workers/index.d.ts\"\n    },\n    \"./v3/schemas\": {\n      \"import\": {\n        \"types\": \"./dist/v3/schemas/index.d.mts\",\n        \"default\": \"./dist/v3/schemas/index.mjs\"\n      },\n      \"require\": \"./dist/v3/schemas/index.js\",\n      \"types\": \"./dist/v3/schemas/index.d.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"v3\": [\n        \"./dist/v3/index.d.ts\"\n      ],\n      \"v3/otel\": [\n        \"./dist/v3/otel/index.d.ts\"\n      ]\n    }\n  },\n  \"sideEffects\": false,\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"build\": \"npm run clean && npm run build:tsup\",\n    \"build:tsup\": \"tsup --dts-resolve\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"@google-cloud/precise-date\": \"^4.0.0\",\n    \"@opentelemetry/api\": \"^1.8.0\",\n    \"@opentelemetry/api-logs\": \"^0.48.0\",\n    \"@opentelemetry/exporter-logs-otlp-http\": \"^0.49.1\",\n    \"@opentelemetry/exporter-trace-otlp-http\": \"^0.49.1\",\n    \"@opentelemetry/instrumentation\": \"^0.49.1\",\n    \"@opentelemetry/resources\": \"^1.22.0\",\n    \"@opentelemetry/sdk-logs\": \"^0.49.1\",\n    \"@opentelemetry/sdk-node\": \"^0.49.1\",\n    \"@opentelemetry/sdk-trace-base\": \"^1.22.0\",\n    \"@opentelemetry/sdk-trace-node\": \"^1.22.0\",\n    \"@opentelemetry/semantic-conventions\": \"^1.22.0\",\n    \"humanize-duration\": \"^3.27.3\",\n    \"socket.io-client\": \"4.7.5\",\n    \"superjson\": \"^2.2.1\",\n    \"ulidx\": \"^2.2.1\",\n    \"zod\": \"3.22.3\",\n    \"zod-error\": \"1.5.0\",\n    \"zod-validation-error\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"@trigger.dev/tsconfig\": \"workspace:*\",\n    \"@trigger.dev/tsup\": \"workspace:*\",\n    \"@types/humanize-duration\": \"^3.27.1\",\n    \"@types/jest\": \"^29.5.3\",\n    \"@types/node\": \"20.12.7\",\n    \"@types/readable-stream\": \"^4.0.14\",\n    \"jest\": \"^29.6.2\",\n    \"rimraf\": \"^3.0.2\",\n    \"socket.io\": \"4.7.4\",\n    \"ts-jest\": \"^29.1.1\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.0\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  }\n}", "import { z } from \"zod\";\n\nexport const CreateAuthorizationCodeResponseSchema = z.object({\n  url: z.string().url(),\n  authorizationCode: z.string(),\n});\n\nexport type CreateAuthorizationCodeResponse = z.infer<typeof CreateAuthorizationCodeResponseSchema>;\n\nexport const GetPersonalAccessTokenRequestSchema = z.object({\n  authorizationCode: z.string(),\n});\nexport type GetPersonalAccessTokenRequest = z.infer<typeof GetPersonalAccessTokenRequestSchema>;\n\nexport const GetPersonalAccessTokenResponseSchema = z.object({\n  token: z\n    .object({\n      token: z.string(),\n      obfuscatedToken: z.string(),\n    })\n    .nullable(),\n});\nexport type GetPersonalAccessTokenResponse = z.infer<typeof GetPersonalAccessTokenResponseSchema>;\n", "import { z } from \"zod\";\nimport { BackgroundWorkerMetadata, ImageDetailsMetadata } from \"./resources\";\nimport { QueueOptions } from \"./schemas\";\nimport { SerializedError } from \"../errors\";\n\nexport const WhoAmIResponseSchema = z.object({\n  userId: z.string(),\n  email: z.string().email(),\n  dashboardUrl: z.string(),\n});\n\nexport type WhoAmIResponse = z.infer<typeof WhoAmIResponseSchema>;\n\nexport const GetProjectResponseBody = z.object({\n  id: z.string(),\n  externalRef: z.string(),\n  name: z.string(),\n  slug: z.string(),\n  createdAt: z.coerce.date(),\n  organization: z.object({\n    id: z.string(),\n    title: z.string(),\n    slug: z.string(),\n    createdAt: z.coerce.date(),\n  }),\n});\n\nexport type GetProjectResponseBody = z.infer<typeof GetProjectResponseBody>;\n\nexport const GetProjectsResponseBody = z.array(GetProjectResponseBody);\n\nexport type GetProjectsResponseBody = z.infer<typeof GetProjectsResponseBody>;\n\nexport const GetProjectEnvResponse = z.object({\n  apiKey: z.string(),\n  name: z.string(),\n  apiUrl: z.string(),\n});\n\nexport type GetProjectEnvResponse = z.infer<typeof GetProjectEnvResponse>;\n\nexport const CreateBackgroundWorkerRequestBody = z.object({\n  localOnly: z.boolean(),\n  metadata: BackgroundWorkerMetadata,\n  supportsLazyAttempts: z.boolean().optional(),\n});\n\nexport type CreateBackgroundWorkerRequestBody = z.infer<typeof CreateBackgroundWorkerRequestBody>;\n\nexport const CreateBackgroundWorkerResponse = z.object({\n  id: z.string(),\n  version: z.string(),\n  contentHash: z.string(),\n});\n\nexport type CreateBackgroundWorkerResponse = z.infer<typeof CreateBackgroundWorkerResponse>;\n\n//an array of 1, 2, or 3 strings\nconst RunTag = z.string().max(64, \"Tags must be less than 64 characters\");\nexport const RunTags = z.union([RunTag, RunTag.array()]);\n\nexport type RunTags = z.infer<typeof RunTags>;\n\nexport const TriggerTaskRequestBody = z.object({\n  payload: z.any(),\n  context: z.any(),\n  options: z\n    .object({\n      dependentAttempt: z.string().optional(),\n      dependentBatch: z.string().optional(),\n      lockToVersion: z.string().optional(),\n      queue: QueueOptions.optional(),\n      concurrencyKey: z.string().optional(),\n      idempotencyKey: z.string().optional(),\n      test: z.boolean().optional(),\n      payloadType: z.string().optional(),\n      delay: z.string().or(z.coerce.date()).optional(),\n      ttl: z.string().or(z.number().nonnegative().int()).optional(),\n      tags: RunTags.optional(),\n      maxAttempts: z.number().int().optional(),\n    })\n    .optional(),\n});\n\nexport type TriggerTaskRequestBody = z.infer<typeof TriggerTaskRequestBody>;\n\nexport const TriggerTaskResponse = z.object({\n  id: z.string(),\n});\n\nexport type TriggerTaskResponse = z.infer<typeof TriggerTaskResponse>;\n\nexport const BatchTriggerTaskRequestBody = z.object({\n  items: TriggerTaskRequestBody.array(),\n  dependentAttempt: z.string().optional(),\n});\n\nexport type BatchTriggerTaskRequestBody = z.infer<typeof BatchTriggerTaskRequestBody>;\n\nexport const BatchTriggerTaskResponse = z.object({\n  batchId: z.string(),\n  runs: z.string().array(),\n});\n\nexport type BatchTriggerTaskResponse = z.infer<typeof BatchTriggerTaskResponse>;\n\nexport const GetBatchResponseBody = z.object({\n  id: z.string(),\n  items: z.array(\n    z.object({\n      id: z.string(),\n      taskRunId: z.string(),\n      status: z.enum([\"PENDING\", \"CANCELED\", \"COMPLETED\", \"FAILED\"]),\n    })\n  ),\n});\n\nexport type GetBatchResponseBody = z.infer<typeof GetBatchResponseBody>;\n\nexport const AddTagsRequestBody = z.object({\n  tags: RunTags,\n});\n\nexport type AddTagsRequestBody = z.infer<typeof AddTagsRequestBody>;\n\nexport const RescheduleRunRequestBody = z.object({\n  delay: z.string().or(z.coerce.date()),\n});\n\nexport type RescheduleRunRequestBody = z.infer<typeof RescheduleRunRequestBody>;\n\nexport const GetEnvironmentVariablesResponseBody = z.object({\n  variables: z.record(z.string()),\n});\n\nexport type GetEnvironmentVariablesResponseBody = z.infer<\n  typeof GetEnvironmentVariablesResponseBody\n>;\n\nexport const StartDeploymentIndexingRequestBody = z.object({\n  imageReference: z.string(),\n  selfHosted: z.boolean().optional(),\n});\n\nexport type StartDeploymentIndexingRequestBody = z.infer<typeof StartDeploymentIndexingRequestBody>;\n\nexport const StartDeploymentIndexingResponseBody = z.object({\n  id: z.string(),\n  contentHash: z.string(),\n});\n\nexport type StartDeploymentIndexingResponseBody = z.infer<\n  typeof StartDeploymentIndexingResponseBody\n>;\n\nexport const ExternalBuildData = z.object({\n  buildId: z.string(),\n  buildToken: z.string(),\n  projectId: z.string(),\n});\n\nexport type ExternalBuildData = z.infer<typeof ExternalBuildData>;\n\nexport const InitializeDeploymentResponseBody = z.object({\n  id: z.string(),\n  contentHash: z.string(),\n  shortCode: z.string(),\n  version: z.string(),\n  imageTag: z.string(),\n  externalBuildData: ExternalBuildData.optional().nullable(),\n  registryHost: z.string().optional(),\n});\n\nexport type InitializeDeploymentResponseBody = z.infer<typeof InitializeDeploymentResponseBody>;\n\nexport const InitializeDeploymentRequestBody = z.object({\n  contentHash: z.string(),\n  userId: z.string().optional(),\n});\n\nexport type InitializeDeploymentRequestBody = z.infer<typeof InitializeDeploymentRequestBody>;\n\nexport const DeploymentErrorData = z.object({\n  name: z.string(),\n  message: z.string(),\n  stack: z.string().optional(),\n  stderr: z.string().optional(),\n});\n\nexport const GetDeploymentResponseBody = z.object({\n  id: z.string(),\n  status: z.enum([\n    \"PENDING\",\n    \"BUILDING\",\n    \"DEPLOYING\",\n    \"DEPLOYED\",\n    \"FAILED\",\n    \"CANCELED\",\n    \"TIMED_OUT\",\n  ]),\n  contentHash: z.string(),\n  shortCode: z.string(),\n  version: z.string(),\n  imageReference: z.string().optional(),\n  errorData: DeploymentErrorData.optional().nullable(),\n  worker: z\n    .object({\n      id: z.string(),\n      version: z.string(),\n      tasks: z.array(\n        z.object({\n          id: z.string(),\n          slug: z.string(),\n          filePath: z.string(),\n          exportName: z.string(),\n        })\n      ),\n    })\n    .optional(),\n});\n\nexport type GetDeploymentResponseBody = z.infer<typeof GetDeploymentResponseBody>;\n\nexport const CreateUploadPayloadUrlResponseBody = z.object({\n  presignedUrl: z.string(),\n});\n\nexport type CreateUploadPayloadUrlResponseBody = z.infer<typeof CreateUploadPayloadUrlResponseBody>;\n\nexport const ReplayRunResponse = z.object({\n  id: z.string(),\n});\n\nexport type ReplayRunResponse = z.infer<typeof ReplayRunResponse>;\n\nexport const CanceledRunResponse = z.object({\n  id: z.string(),\n});\n\nexport type CanceledRunResponse = z.infer<typeof CanceledRunResponse>;\n\nexport const ScheduleType = z.union([z.literal(\"DECLARATIVE\"), z.literal(\"IMPERATIVE\")]);\n\nexport const ScheduledTaskPayload = z.object({\n  /** The schedule id associated with this run (you can have many schedules for the same task).\n    You can use this to remove the schedule, update it, etc */\n  scheduleId: z.string(),\n  /** The type of schedule – `\"DECLARATIVE\"` or `\"IMPERATIVE\"`.\n   *\n   * **DECLARATIVE** – defined inline on your `schedules.task` using the `cron` property. They can only be created, updated or deleted by modifying the `cron` property on your task.\n   *\n   * **IMPERATIVE** – created using the `schedules.create` functions or in the dashboard.\n   */\n  type: ScheduleType,\n  /** When the task was scheduled to run.\n   * Note this will be slightly different from `new Date()` because it takes a few ms to run the task.\n   * \n   * This date is UTC. To output it as a string with a timezone you would do this: \n   * ```ts\n   * const formatted = payload.timestamp.toLocaleString(\"en-US\", {\n        timeZone: payload.timezone,\n    });\n    ```  */\n  timestamp: z.date(),\n  /** When the task was last run (it has been).\n    This can be undefined if it's never been run. This date is UTC. */\n  lastTimestamp: z.date().optional(),\n  /** You can optionally provide an external id when creating the schedule.\n    Usually you would use a userId or some other unique identifier.\n    This defaults to undefined if you didn't provide one. */\n  externalId: z.string().optional(),\n  /** The IANA timezone the schedule is set to. The default is UTC.\n   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones\n   */\n  timezone: z.string(),\n  /** The next 5 dates this task is scheduled to run */\n  upcoming: z.array(z.date()),\n});\n\nexport type ScheduledTaskPayload = z.infer<typeof ScheduledTaskPayload>;\n\nexport const CreateScheduleOptions = z.object({\n  /** The id of the task you want to attach to. */\n  task: z.string(),\n  /**  The schedule in CRON format.\n   * \n   * ```txt\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬\n│    │    │    │    |\n│    │    │    │    └ day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)\n│    │    │    └───── month (1 - 12)\n│    │    └────────── day of month (1 - 31, L)\n│    └─────────────── hour (0 - 23)\n└──────────────────── minute (0 - 59)\n   * ```\n\n\"L\" means the last. In the \"day of week\" field, 1L means the last Monday of the month. In the day of month field, L means the last day of the month.\n\n   */\n  cron: z.string(),\n  /** You can only create one schedule with this key. If you use it twice, the second call will update the schedule.\n   *\n   * This is required to prevent you from creating duplicate schedules. */\n  deduplicationKey: z.string(),\n  /** Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task.\n   *\n   * This allows you to have per-user CRON tasks.\n   */\n  externalId: z.string().optional(),\n  /** Optionally, you can specify a timezone in the IANA format. If unset it will use UTC.\n   * If specified then the CRON will be evaluated in that timezone and will respect daylight savings.\n   *\n   * If you set the CRON to `0 0 * * *` and the timezone to `America/New_York` then the task will run at midnight in New York time, no matter whether it's daylight savings or not.\n   *\n   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones\n   *\n   * @example \"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Africa/Cairo\"\n   *\n   */\n  timezone: z.string().optional(),\n});\n\nexport type CreateScheduleOptions = z.infer<typeof CreateScheduleOptions>;\n\nexport const UpdateScheduleOptions = CreateScheduleOptions.omit({ deduplicationKey: true });\n\nexport type UpdateScheduleOptions = z.infer<typeof UpdateScheduleOptions>;\n\nexport const ScheduleGenerator = z.object({\n  type: z.literal(\"CRON\"),\n  expression: z.string(),\n  description: z.string(),\n});\n\nexport type ScheduleGenerator = z.infer<typeof ScheduleGenerator>;\n\nexport const ScheduleObject = z.object({\n  id: z.string(),\n  type: ScheduleType,\n  task: z.string(),\n  active: z.boolean(),\n  deduplicationKey: z.string().nullish(),\n  externalId: z.string().nullish(),\n  generator: ScheduleGenerator,\n  timezone: z.string(),\n  nextRun: z.coerce.date().nullish(),\n  environments: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string(),\n      userName: z.string().nullish(),\n    })\n  ),\n});\n\nexport type ScheduleObject = z.infer<typeof ScheduleObject>;\n\nexport const DeletedScheduleObject = z.object({\n  id: z.string(),\n});\n\nexport type DeletedScheduleObject = z.infer<typeof DeletedScheduleObject>;\n\nexport const ListSchedulesResult = z.object({\n  data: z.array(ScheduleObject),\n  pagination: z.object({\n    currentPage: z.number(),\n    totalPages: z.number(),\n    count: z.number(),\n  }),\n});\n\nexport type ListSchedulesResult = z.infer<typeof ListSchedulesResult>;\n\nexport const ListScheduleOptions = z.object({\n  page: z.number().optional(),\n  perPage: z.number().optional(),\n});\n\nexport type ListScheduleOptions = z.infer<typeof ListScheduleOptions>;\n\nexport const TimezonesResult = z.object({\n  timezones: z.array(z.string()),\n});\n\nexport type TimezonesResult = z.infer<typeof TimezonesResult>;\n\nexport const RunStatus = z.enum([\n  /// Task hasn't been deployed yet but is waiting to be executed\n  \"WAITING_FOR_DEPLOY\",\n  /// Task is waiting to be executed by a worker\n  \"QUEUED\",\n  /// Task is currently being executed by a worker\n  \"EXECUTING\",\n  /// Task has failed and is waiting to be retried\n  \"REATTEMPTING\",\n  /// Task has been paused by the system, and will be resumed by the system\n  \"FROZEN\",\n  /// Task has been completed successfully\n  \"COMPLETED\",\n  /// Task has been canceled by the user\n  \"CANCELED\",\n  /// Task has been completed with errors\n  \"FAILED\",\n  /// Task has crashed and won't be retried, most likely the worker ran out of resources, e.g. memory or storage\n  \"CRASHED\",\n  /// Task was interrupted during execution, mostly this happens in development environments\n  \"INTERRUPTED\",\n  /// Task has failed to complete, due to an error in the system\n  \"SYSTEM_FAILURE\",\n  /// Task has been scheduled to run at a specific time\n  \"DELAYED\",\n  /// Task has expired and won't be executed\n  \"EXPIRED\",\n]);\n\nexport type RunStatus = z.infer<typeof RunStatus>;\n\nexport const AttemptStatus = z.enum([\n  \"PENDING\",\n  \"EXECUTING\",\n  \"PAUSED\",\n  \"COMPLETED\",\n  \"FAILED\",\n  \"CANCELED\",\n]);\n\nexport type AttemptStatus = z.infer<typeof AttemptStatus>;\n\nexport const RunEnvironmentDetails = z.object({\n  id: z.string(),\n  name: z.string(),\n  user: z.string().optional(),\n});\n\nexport type RunEnvironmentDetails = z.infer<typeof RunEnvironmentDetails>;\n\nexport const RunScheduleDetails = z.object({\n  id: z.string(),\n  externalId: z.string().optional(),\n  deduplicationKey: z.string().optional(),\n  generator: ScheduleGenerator,\n});\n\nexport type RunScheduleDetails = z.infer<typeof RunScheduleDetails>;\n\nconst CommonRunFields = {\n  id: z.string(),\n  status: RunStatus,\n  taskIdentifier: z.string(),\n  idempotencyKey: z.string().optional(),\n  version: z.string().optional(),\n  isQueued: z.boolean(),\n  isExecuting: z.boolean(),\n  isCompleted: z.boolean(),\n  isSuccess: z.boolean(),\n  isFailed: z.boolean(),\n  isCancelled: z.boolean(),\n  isTest: z.boolean(),\n  createdAt: z.coerce.date(),\n  updatedAt: z.coerce.date(),\n  startedAt: z.coerce.date().optional(),\n  finishedAt: z.coerce.date().optional(),\n  delayedUntil: z.coerce.date().optional(),\n  ttl: z.string().optional(),\n  expiredAt: z.coerce.date().optional(),\n  tags: z.string().array(),\n  costInCents: z.number(),\n  baseCostInCents: z.number(),\n  durationMs: z.number(),\n};\n\nexport const RetrieveRunResponse = z.object({\n  ...CommonRunFields,\n  payload: z.any().optional(),\n  payloadPresignedUrl: z.string().optional(),\n  output: z.any().optional(),\n  outputPresignedUrl: z.string().optional(),\n  schedule: RunScheduleDetails.optional(),\n  attempts: z.array(\n    z\n      .object({\n        id: z.string(),\n        status: AttemptStatus,\n        createdAt: z.coerce.date(),\n        updatedAt: z.coerce.date(),\n        startedAt: z.coerce.date().optional(),\n        completedAt: z.coerce.date().optional(),\n        error: SerializedError.optional(),\n      })\n      .optional()\n  ),\n});\n\nexport type RetrieveRunResponse = z.infer<typeof RetrieveRunResponse>;\n\nexport const ListRunResponseItem = z.object({\n  ...CommonRunFields,\n  env: RunEnvironmentDetails,\n});\n\nexport type ListRunResponseItem = z.infer<typeof ListRunResponseItem>;\n\nexport const ListRunResponse = z.object({\n  data: z.array(ListRunResponseItem),\n  pagination: z.object({\n    next: z.string().optional(),\n    previous: z.string().optional(),\n  }),\n});\n\nexport type ListRunResponse = z.infer<typeof ListRunResponse>;\n\nexport const CreateEnvironmentVariableRequestBody = z.object({\n  name: z.string(),\n  value: z.string(),\n});\n\nexport type CreateEnvironmentVariableRequestBody = z.infer<\n  typeof CreateEnvironmentVariableRequestBody\n>;\n\nexport const UpdateEnvironmentVariableRequestBody = z.object({\n  value: z.string(),\n});\n\nexport type UpdateEnvironmentVariableRequestBody = z.infer<\n  typeof UpdateEnvironmentVariableRequestBody\n>;\n\nexport const ImportEnvironmentVariablesRequestBody = z.object({\n  variables: z.record(z.string()),\n  override: z.boolean().optional(),\n});\n\nexport type ImportEnvironmentVariablesRequestBody = z.infer<\n  typeof ImportEnvironmentVariablesRequestBody\n>;\n\nexport const EnvironmentVariableResponseBody = z.object({\n  success: z.boolean(),\n});\n\nexport type EnvironmentVariableResponseBody = z.infer<typeof EnvironmentVariableResponseBody>;\n\nexport const EnvironmentVariableValue = z.object({\n  value: z.string(),\n});\n\nexport type EnvironmentVariableValue = z.infer<typeof EnvironmentVariableValue>;\n\nexport const EnvironmentVariable = z.object({\n  name: z.string(),\n  value: z.string(),\n});\n\nexport const EnvironmentVariables = z.array(EnvironmentVariable);\n\nexport type EnvironmentVariables = z.infer<typeof EnvironmentVariables>;\n", "import { z } from \"zod\";\nimport { QueueOptions, RetryOptions, ScheduleMetadata } from \"./schemas\";\nimport { MachineConfig } from \"./common\";\n\nexport const TaskResource = z.object({\n  id: z.string(),\n  filePath: z.string(),\n  exportName: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n});\n\nexport type TaskResource = z.infer<typeof TaskResource>;\n\nexport const BackgroundWorkerMetadata = z.object({\n  packageVersion: z.string(),\n  contentHash: z.string(),\n  cliPackageVersion: z.string().optional(),\n  tasks: z.array(TaskResource),\n});\n\nexport type BackgroundWorkerMetadata = z.infer<typeof BackgroundWorkerMetadata>;\n\nexport const ImageDetailsMetadata = z.object({\n  contentHash: z.string(),\n  imageTag: z.string(),\n});\n\nexport type ImageDetailsMetadata = z.infer<typeof ImageDetailsMetadata>;\n", "import { z } from \"zod\";\nimport { RequireKeys } from \"../types\";\nimport { MachineConfig, MachinePreset, TaskRunExecution } from \"./common\";\n\n/*\n    WARNING: Never import anything from ./messages here. If it's needed in both, put it here instead.\n*/\nexport const EnvironmentType = z.enum([\"PRODUCTION\", \"STAGING\", \"DEVELOPMENT\", \"PREVIEW\"]);\nexport type EnvironmentType = z.infer<typeof EnvironmentType>;\n\nexport const TaskRunExecutionPayload = z.object({\n  execution: TaskRunExecution,\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type TaskRunExecutionPayload = z.infer<typeof TaskRunExecutionPayload>;\n\n// **IMPORTANT NOTE**: If you change this schema, make sure it is backwards compatible with the previous version as this also used when a worker signals to the coordinator that a TaskRun is complete.\n// Strategies for not breaking backwards compatibility:\n// 1. Add new fields as optional\n// 2. If a field is required, add a default value\nexport const ProdTaskRunExecution = TaskRunExecution.extend({\n  worker: z.object({\n    id: z.string(),\n    contentHash: z.string(),\n    version: z.string(),\n  }),\n  machine: MachinePreset.default({ name: \"small-1x\", cpu: 1, memory: 1, centsPerMs: 0 }),\n});\n\nexport type ProdTaskRunExecution = z.infer<typeof ProdTaskRunExecution>;\n\nexport const ProdTaskRunExecutionPayload = z.object({\n  execution: ProdTaskRunExecution,\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type ProdTaskRunExecutionPayload = z.infer<typeof ProdTaskRunExecutionPayload>;\n\nexport const FixedWindowRateLimit = z.object({\n  type: z.literal(\"fixed-window\"),\n  limit: z.number(),\n  window: z.union([\n    z.object({\n      seconds: z.number(),\n    }),\n    z.object({\n      minutes: z.number(),\n    }),\n    z.object({\n      hours: z.number(),\n    }),\n  ]),\n});\n\nexport const SlidingWindowRateLimit = z.object({\n  type: z.literal(\"sliding-window\"),\n  limit: z.number(),\n  window: z.union([\n    z.object({\n      seconds: z.number(),\n    }),\n    z.object({\n      minutes: z.number(),\n    }),\n    z.object({\n      hours: z.number(),\n    }),\n  ]),\n});\n\nexport const RateLimitOptions = z.discriminatedUnion(\"type\", [\n  FixedWindowRateLimit,\n  SlidingWindowRateLimit,\n]);\n\nexport type RateLimitOptions = z.infer<typeof RateLimitOptions>;\n\nexport const RetryOptions = z.object({\n  /** The number of attempts before giving up */\n  maxAttempts: z.number().int().optional(),\n  /** The exponential factor to use when calculating the next retry time.\n   *\n   * Each subsequent retry will be calculated as `previousTimeout * factor`\n   */\n  factor: z.number().optional(),\n  /** The minimum time to wait before retrying */\n  minTimeoutInMs: z.number().int().optional(),\n  /** The maximum time to wait before retrying */\n  maxTimeoutInMs: z.number().int().optional(),\n  /** Randomize the timeout between retries.\n   *\n   * This can be useful to prevent the thundering herd problem where all retries happen at the same time.\n   */\n  randomize: z.boolean().optional(),\n});\n\nexport type RetryOptions = z.infer<typeof RetryOptions>;\n\nexport const QueueOptions = z.object({\n  /** You can define a shared queue and then pass the name in to your task.\n   * \n   * @example\n   * \n   * ```ts\n   * const myQueue = queue({\n      name: \"my-queue\",\n      concurrencyLimit: 1,\n    });\n\n    export const task1 = task({\n      id: \"task-1\",\n      queue: {\n        name: \"my-queue\",\n      },\n      run: async (payload: { message: string }) => {\n        // ...\n      },\n    });\n\n    export const task2 = task({\n      id: \"task-2\",\n      queue: {\n        name: \"my-queue\",\n      },\n      run: async (payload: { message: string }) => {\n        // ...\n      },\n    });\n   * ```\n   */\n  name: z.string().optional(),\n  /** An optional property that specifies the maximum number of concurrent run executions.\n   *\n   * If this property is omitted, the task can potentially use up the full concurrency of an environment. */\n  concurrencyLimit: z.number().int().min(0).max(1000).optional(),\n  /** @deprecated This feature is coming soon */\n  rateLimit: RateLimitOptions.optional(),\n});\n\nexport type QueueOptions = z.infer<typeof QueueOptions>;\n\nexport const ScheduleMetadata = z.object({\n  cron: z.string(),\n  timezone: z.string(),\n});\n\nexport const TaskMetadata = z.object({\n  id: z.string(),\n  packageVersion: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n});\n\nexport type TaskMetadata = z.infer<typeof TaskMetadata>;\n\nexport const TaskFileMetadata = z.object({\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskFileMetadata = z.infer<typeof TaskFileMetadata>;\n\nexport const TaskMetadataWithFilePath = z.object({\n  id: z.string(),\n  packageVersion: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskMetadataWithFilePath = z.infer<typeof TaskMetadataWithFilePath>;\n\nexport const PostStartCauses = z.enum([\"index\", \"create\", \"restore\"]);\nexport type PostStartCauses = z.infer<typeof PostStartCauses>;\n\nexport const PreStopCauses = z.enum([\"terminate\"]);\nexport type PreStopCauses = z.infer<typeof PreStopCauses>;\n\nconst RegexSchema = z.custom<RegExp>((val) => {\n  try {\n    // Check to see if val is a regex\n    return typeof (val as RegExp).test === \"function\";\n  } catch {\n    return false;\n  }\n});\n\nexport const Config = z.object({\n  project: z.string(),\n  triggerDirectories: z.string().array().optional(),\n  triggerUrl: z.string().optional(),\n  projectDir: z.string().optional(),\n  tsconfigPath: z.string().optional(),\n  retries: z\n    .object({\n      enabledInDev: z.boolean().default(true),\n      default: RetryOptions.optional(),\n    })\n    .optional(),\n  additionalPackages: z.string().array().optional(),\n  additionalFiles: z.string().array().optional(),\n  dependenciesToBundle: z.array(z.union([z.string(), RegexSchema])).optional(),\n  logLevel: z.string().optional(),\n  enableConsoleLogging: z.boolean().optional(),\n  postInstall: z.string().optional(),\n  extraCACerts: z.string().optional(),\n});\n\nexport type Config = z.infer<typeof Config>;\nexport type ResolvedConfig = RequireKeys<\n  Config,\n  \"triggerDirectories\" | \"triggerUrl\" | \"projectDir\" | \"tsconfigPath\"\n>;\n\nexport const WaitReason = z.enum([\"WAIT_FOR_DURATION\", \"WAIT_FOR_TASK\", \"WAIT_FOR_BATCH\"]);\n\nexport type WaitReason = z.infer<typeof WaitReason>;\n\nexport const TaskRunExecutionLazyAttemptPayload = z.object({\n  runId: z.string(),\n  attemptCount: z.number().optional(),\n  messageId: z.string(),\n  isTest: z.boolean(),\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type TaskRunExecutionLazyAttemptPayload = z.infer<typeof TaskRunExecutionLazyAttemptPayload>;\n", "import { z } from \"zod\";\n\n// Defaults to 0.5\nexport const MachineCpu = z.union([\n  z.literal(0.25),\n  z.literal(0.5),\n  z.literal(1),\n  z.literal(2),\n  z.literal(4),\n]);\n\nexport type MachineCpu = z.infer<typeof MachineCpu>;\n\n// Defaults to 1\nexport const MachineMemory = z.union([\n  z.literal(0.25),\n  z.literal(0.5),\n  z.literal(1),\n  z.literal(2),\n  z.literal(4),\n  z.literal(8),\n]);\n\nexport type MachineMemory = z.infer<typeof MachineMemory>;\n\n// Default is small-1x\nexport const MachinePresetName = z.enum([\n  \"micro\",\n  \"small-1x\",\n  \"small-2x\",\n  \"medium-1x\",\n  \"medium-2x\",\n  \"large-1x\",\n  \"large-2x\",\n]);\n\nexport type MachinePresetName = z.infer<typeof MachinePresetName>;\n\nexport const MachineConfig = z.object({\n  cpu: MachineCpu.optional(),\n  memory: MachineMemory.optional(),\n  preset: MachinePresetName.optional(),\n});\n\nexport type MachineConfig = z.infer<typeof MachineConfig>;\n\nexport const MachinePreset = z.object({\n  name: MachinePresetName,\n  cpu: z.number(),\n  memory: z.number(),\n  centsPerMs: z.number(),\n});\n\nexport type MachinePreset = z.infer<typeof MachinePreset>;\n\nexport const TaskRunBuiltInError = z.object({\n  type: z.literal(\"BUILT_IN_ERROR\"),\n  name: z.string(),\n  message: z.string(),\n  stackTrace: z.string(),\n});\n\nexport type TaskRunBuiltInError = z.infer<typeof TaskRunBuiltInError>;\n\nexport const TaskRunCustomErrorObject = z.object({\n  type: z.literal(\"CUSTOM_ERROR\"),\n  raw: z.string(),\n});\n\nexport type TaskRunCustomErrorObject = z.infer<typeof TaskRunCustomErrorObject>;\n\nexport const TaskRunStringError = z.object({\n  type: z.literal(\"STRING_ERROR\"),\n  raw: z.string(),\n});\n\nexport type TaskRunStringError = z.infer<typeof TaskRunStringError>;\n\nexport const TaskRunErrorCodes = {\n  COULD_NOT_FIND_EXECUTOR: \"COULD_NOT_FIND_EXECUTOR\",\n  COULD_NOT_FIND_TASK: \"COULD_NOT_FIND_TASK\",\n  CONFIGURED_INCORRECTLY: \"CONFIGURED_INCORRECTLY\",\n  TASK_ALREADY_RUNNING: \"TASK_ALREADY_RUNNING\",\n  TASK_EXECUTION_FAILED: \"TASK_EXECUTION_FAILED\",\n  TASK_EXECUTION_ABORTED: \"TASK_EXECUTION_ABORTED\",\n  TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE: \"TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE\",\n  TASK_PROCESS_SIGKILL_TIMEOUT: \"TASK_PROCESS_SIGKILL_TIMEOUT\",\n  TASK_RUN_CANCELLED: \"TASK_RUN_CANCELLED\",\n  TASK_OUTPUT_ERROR: \"TASK_OUTPUT_ERROR\",\n  HANDLE_ERROR_ERROR: \"HANDLE_ERROR_ERROR\",\n  GRACEFUL_EXIT_TIMEOUT: \"GRACEFUL_EXIT_TIMEOUT\",\n  TASK_RUN_CRASHED: \"TASK_RUN_CRASHED\",\n} as const;\n\nexport const TaskRunInternalError = z.object({\n  type: z.literal(\"INTERNAL_ERROR\"),\n  code: z.enum([\n    \"COULD_NOT_FIND_EXECUTOR\",\n    \"COULD_NOT_FIND_TASK\",\n    \"CONFIGURED_INCORRECTLY\",\n    \"TASK_ALREADY_RUNNING\",\n    \"TASK_EXECUTION_FAILED\",\n    \"TASK_EXECUTION_ABORTED\",\n    \"TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE\",\n    \"TASK_PROCESS_SIGKILL_TIMEOUT\",\n    \"TASK_RUN_CANCELLED\",\n    \"TASK_OUTPUT_ERROR\",\n    \"HANDLE_ERROR_ERROR\",\n    \"GRACEFUL_EXIT_TIMEOUT\",\n    \"TASK_RUN_HEARTBEAT_TIMEOUT\",\n    \"TASK_RUN_CRASHED\",\n  ]),\n  message: z.string().optional(),\n  stackTrace: z.string().optional(),\n});\n\nexport type TaskRunInternalError = z.infer<typeof TaskRunInternalError>;\n\nexport const TaskRunError = z.discriminatedUnion(\"type\", [\n  TaskRunBuiltInError,\n  TaskRunCustomErrorObject,\n  TaskRunStringError,\n  TaskRunInternalError,\n]);\n\nexport type TaskRunError = z.infer<typeof TaskRunError>;\n\nexport const TaskRun = z.object({\n  id: z.string(),\n  payload: z.string(),\n  payloadType: z.string(),\n  context: z.any(),\n  tags: z.array(z.string()),\n  isTest: z.boolean().default(false),\n  createdAt: z.coerce.date(),\n  startedAt: z.coerce.date().default(() => new Date()),\n  idempotencyKey: z.string().optional(),\n  maxAttempts: z.number().optional(),\n  durationMs: z.number().default(0),\n  costInCents: z.number().default(0),\n  baseCostInCents: z.number().default(0),\n  version: z.string().optional(),\n});\n\nexport type TaskRun = z.infer<typeof TaskRun>;\n\nexport const TaskRunExecutionTask = z.object({\n  id: z.string(),\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskRunExecutionTask = z.infer<typeof TaskRunExecutionTask>;\n\nexport const TaskRunExecutionAttempt = z.object({\n  id: z.string(),\n  number: z.number(),\n  startedAt: z.coerce.date(),\n  backgroundWorkerId: z.string(),\n  backgroundWorkerTaskId: z.string(),\n  status: z.string(),\n});\n\nexport type TaskRunExecutionAttempt = z.infer<typeof TaskRunExecutionAttempt>;\n\nexport const TaskRunExecutionEnvironment = z.object({\n  id: z.string(),\n  slug: z.string(),\n  type: z.enum([\"PRODUCTION\", \"STAGING\", \"DEVELOPMENT\", \"PREVIEW\"]),\n});\n\nexport type TaskRunExecutionEnvironment = z.infer<typeof TaskRunExecutionEnvironment>;\n\nexport const TaskRunExecutionOrganization = z.object({\n  id: z.string(),\n  slug: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionOrganization = z.infer<typeof TaskRunExecutionOrganization>;\n\nexport const TaskRunExecutionProject = z.object({\n  id: z.string(),\n  ref: z.string(),\n  slug: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionProject = z.infer<typeof TaskRunExecutionProject>;\n\nexport const TaskRunExecutionQueue = z.object({\n  id: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionQueue = z.infer<typeof TaskRunExecutionQueue>;\n\nexport const TaskRunExecutionBatch = z.object({\n  id: z.string(),\n});\n\nexport const TaskRunExecution = z.object({\n  task: TaskRunExecutionTask,\n  attempt: TaskRunExecutionAttempt,\n  run: TaskRun,\n  queue: TaskRunExecutionQueue,\n  environment: TaskRunExecutionEnvironment,\n  organization: TaskRunExecutionOrganization,\n  project: TaskRunExecutionProject,\n  batch: TaskRunExecutionBatch.optional(),\n  machine: MachinePreset.optional(),\n});\n\nexport type TaskRunExecution = z.infer<typeof TaskRunExecution>;\n\nexport const TaskRunContext = z.object({\n  task: TaskRunExecutionTask,\n  attempt: TaskRunExecutionAttempt.omit({\n    backgroundWorkerId: true,\n    backgroundWorkerTaskId: true,\n  }),\n  run: TaskRun.omit({ payload: true, payloadType: true }),\n  queue: TaskRunExecutionQueue,\n  environment: TaskRunExecutionEnvironment,\n  organization: TaskRunExecutionOrganization,\n  project: TaskRunExecutionProject,\n  batch: TaskRunExecutionBatch.optional(),\n  machine: MachinePreset.optional(),\n});\n\nexport type TaskRunContext = z.infer<typeof TaskRunContext>;\n\nexport const TaskRunExecutionRetry = z.object({\n  timestamp: z.number(),\n  delay: z.number(),\n  error: z.unknown().optional(),\n});\n\nexport type TaskRunExecutionRetry = z.infer<typeof TaskRunExecutionRetry>;\n\nexport const TaskRunExecutionUsage = z.object({\n  durationMs: z.number(),\n});\n\nexport type TaskRunExecutionUsage = z.infer<typeof TaskRunExecutionUsage>;\n\nexport const TaskRunFailedExecutionResult = z.object({\n  ok: z.literal(false),\n  id: z.string(),\n  error: TaskRunError,\n  retry: TaskRunExecutionRetry.optional(),\n  skippedRetrying: z.boolean().optional(),\n  usage: TaskRunExecutionUsage.optional(),\n});\n\nexport type TaskRunFailedExecutionResult = z.infer<typeof TaskRunFailedExecutionResult>;\n\nexport const TaskRunSuccessfulExecutionResult = z.object({\n  ok: z.literal(true),\n  id: z.string(),\n  output: z.string().optional(),\n  outputType: z.string(),\n  usage: TaskRunExecutionUsage.optional(),\n});\n\nexport type TaskRunSuccessfulExecutionResult = z.infer<typeof TaskRunSuccessfulExecutionResult>;\n\nexport const TaskRunExecutionResult = z.discriminatedUnion(\"ok\", [\n  TaskRunSuccessfulExecutionResult,\n  TaskRunFailedExecutionResult,\n]);\n\nexport type TaskRunExecutionResult = z.infer<typeof TaskRunExecutionResult>;\n\nexport const BatchTaskRunExecutionResult = z.object({\n  id: z.string(),\n  items: TaskRunExecutionResult.array(),\n});\n\nexport type BatchTaskRunExecutionResult = z.infer<typeof BatchTaskRunExecutionResult>;\n", "import { z } from \"zod\";\nimport { TaskRunError } from \"./schemas/common\";\n\nexport class AbortTaskRunError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AbortTaskRunError\";\n  }\n}\n\nexport function parseError(error: unknown): TaskRunError {\n  if (error instanceof Error) {\n    return {\n      type: \"BUILT_IN_ERROR\",\n      name: error.name,\n      message: error.message,\n      stackTrace: error.stack ?? \"\",\n    };\n  }\n\n  if (typeof error === \"string\") {\n    return {\n      type: \"STRING_ERROR\",\n      raw: error,\n    };\n  }\n\n  try {\n    return {\n      type: \"CUSTOM_ERROR\",\n      raw: JSON.stringify(error),\n    };\n  } catch (e) {\n    return {\n      type: \"CUSTOM_ERROR\",\n      raw: String(error),\n    };\n  }\n}\n\nexport function createErrorTaskError(error: TaskRunError): any {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      const e = new Error(error.message);\n\n      e.name = error.name;\n      e.stack = error.stackTrace;\n\n      return e;\n    }\n    case \"STRING_ERROR\": {\n      return error.raw;\n    }\n    case \"CUSTOM_ERROR\": {\n      return JSON.parse(error.raw);\n    }\n    case \"INTERNAL_ERROR\": {\n      return new Error(`trigger.dev internal error (${error.code})`);\n    }\n  }\n}\n\nexport const SerializedError = z.object({\n  message: z.string(),\n  name: z.string().optional(),\n  stackTrace: z.string().optional(),\n});\n\nexport type SerializedError = z.infer<typeof SerializedError>;\n\nexport function createJsonErrorObject(error: TaskRunError): SerializedError {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      return {\n        name: error.name,\n        message: error.message,\n        stackTrace: error.stackTrace,\n      };\n    }\n    case \"STRING_ERROR\": {\n      return {\n        message: error.raw,\n      };\n    }\n    case \"CUSTOM_ERROR\": {\n      return {\n        message: error.raw,\n      };\n    }\n    case \"INTERNAL_ERROR\": {\n      return {\n        message: `trigger.dev internal error (${error.code})`,\n      };\n    }\n  }\n}\n\n// Removes any null characters from the error message\nexport function sanitizeError(error: TaskRunError): TaskRunError {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      return {\n        type: \"BUILT_IN_ERROR\",\n        message: error.message?.replace(/\\0/g, \"\"),\n        name: error.name?.replace(/\\0/g, \"\"),\n        stackTrace: error.stackTrace?.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"STRING_ERROR\": {\n      return {\n        type: \"STRING_ERROR\",\n        raw: error.raw.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"CUSTOM_ERROR\": {\n      return {\n        type: \"CUSTOM_ERROR\",\n        raw: error.raw.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"INTERNAL_ERROR\": {\n      return {\n        type: \"INTERNAL_ERROR\",\n        code: error.code,\n        message: error.message?.replace(/\\0/g, \"\"),\n        stackTrace: error.stackTrace?.replace(/\\0/g, \"\"),\n      };\n    }\n  }\n}\n\nexport function correctErrorStackTrace(\n  stackTrace: string,\n  projectDir?: string,\n  options?: { removeFirstLine?: boolean; isDev?: boolean }\n) {\n  const [errorLine, ...traceLines] = stackTrace.split(\"\\n\");\n\n  return [\n    options?.removeFirstLine ? undefined : errorLine,\n    ...traceLines.map((line) => correctStackTraceLine(line, projectDir, options?.isDev)),\n  ]\n    .filter(Boolean)\n    .join(\"\\n\");\n}\n\nconst LINES_TO_IGNORE = [\n  /ConsoleInterceptor/,\n  /TriggerTracer/,\n  /TaskExecutor/,\n  /EXECUTE_TASK_RUN/,\n  /@trigger.dev\\/core/,\n  /packages\\/core\\/src\\/v3/,\n  /safeJsonProcess/,\n  /__entryPoint.ts/,\n  /ZodIpc/,\n  /startActiveSpan/,\n  /processTicksAndRejections/,\n];\n\nfunction correctStackTraceLine(line: string, projectDir?: string, isDev?: boolean) {\n  if (LINES_TO_IGNORE.some((regex) => regex.test(line))) {\n    return;\n  }\n\n  // Check to see if the path is inside the project directory\n  if (isDev && projectDir && !line.includes(projectDir)) {\n    return;\n  }\n\n  return line.trim();\n}\n\nexport function groupTaskMetadataIssuesByTask(tasks: any, issues: z.ZodIssue[]) {\n  return issues.reduce(\n    (acc, issue) => {\n      if (issue.path.length === 0) {\n        return acc;\n      }\n\n      const taskIndex = issue.path[1];\n\n      if (typeof taskIndex !== \"number\") {\n        return acc;\n      }\n\n      const task = tasks[taskIndex];\n\n      if (!task) {\n        return acc;\n      }\n\n      const restOfPath = issue.path.slice(2);\n\n      const taskId = task.id;\n      const taskName = task.exportName;\n      const filePath = task.filePath;\n\n      const key = taskIndex;\n\n      const existing = acc[key] ?? {\n        id: taskId,\n        exportName: taskName,\n        filePath,\n        issues: [] as Array<{ message: string; path?: string }>,\n      };\n\n      existing.issues.push({\n        message: issue.message,\n        path: restOfPath.length === 0 ? undefined : restOfPath.join(\".\"),\n      });\n\n      return {\n        ...acc,\n        [key]: existing,\n      };\n    },\n    {} as Record<\n      number,\n      {\n        id: any;\n        exportName: string;\n        filePath: string;\n        issues: Array<{ message: string; path?: string }>;\n      }\n    >\n  );\n}\n", "import { z } from \"zod\";\nimport {\n  MachinePreset,\n  TaskRunExecution,\n  TaskRunExecutionResult,\n  TaskRunFailedExecutionResult,\n} from \"./common\";\nimport {\n  EnvironmentType,\n  ProdTaskRunExecution,\n  ProdTaskRunExecutionPayload,\n  TaskMetadataWithFilePath,\n  TaskRunExecutionLazyAttemptPayload,\n  TaskRunExecutionPayload,\n  WaitReason,\n} from \"./schemas\";\nimport { TaskResource } from \"./resources\";\n\nexport const BackgroundWorkerServerMessages = z.discriminatedUnion(\"type\", [\n  z.object({\n    type: z.literal(\"EXECUTE_RUNS\"),\n    payloads: z.array(TaskRunExecutionPayload),\n  }),\n  z.object({\n    type: z.literal(\"CANCEL_ATTEMPT\"),\n    taskAttemptId: z.string(),\n    taskRunId: z.string(),\n  }),\n  z.object({\n    type: z.literal(\"SCHEDULE_ATTEMPT\"),\n    image: z.string(),\n    version: z.string(),\n    machine: MachinePreset,\n    nextAttemptNumber: z.number().optional(),\n    // identifiers\n    id: z.string().optional(), // TODO: Remove this completely in a future release\n    envId: z.string(),\n    envType: EnvironmentType,\n    orgId: z.string(),\n    projectId: z.string(),\n    runId: z.string(),\n  }),\n  z.object({\n    type: z.literal(\"EXECUTE_RUN_LAZY_ATTEMPT\"),\n    payload: TaskRunExecutionLazyAttemptPayload,\n  }),\n]);\n\nexport type BackgroundWorkerServerMessages = z.infer<typeof BackgroundWorkerServerMessages>;\n\nexport const serverWebsocketMessages = {\n  SERVER_READY: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    id: z.string(),\n  }),\n  BACKGROUND_WORKER_MESSAGE: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    backgroundWorkerId: z.string(),\n    data: BackgroundWorkerServerMessages,\n  }),\n};\n\nexport const BackgroundWorkerClientMessages = z.discriminatedUnion(\"type\", [\n  z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    type: z.literal(\"TASK_RUN_COMPLETED\"),\n    completion: TaskRunExecutionResult,\n    execution: TaskRunExecution,\n  }),\n  z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    type: z.literal(\"TASK_RUN_FAILED_TO_RUN\"),\n    completion: TaskRunFailedExecutionResult,\n  }),\n  z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    type: z.literal(\"TASK_HEARTBEAT\"),\n    id: z.string(),\n  }),\n  z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    type: z.literal(\"TASK_RUN_HEARTBEAT\"),\n    id: z.string(),\n  }),\n]);\n\nexport type BackgroundWorkerClientMessages = z.infer<typeof BackgroundWorkerClientMessages>;\n\nexport const BackgroundWorkerProperties = z.object({\n  id: z.string(),\n  version: z.string(),\n  contentHash: z.string(),\n});\n\nexport type BackgroundWorkerProperties = z.infer<typeof BackgroundWorkerProperties>;\n\nexport const clientWebsocketMessages = {\n  READY_FOR_TASKS: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    backgroundWorkerId: z.string(),\n    inProgressRuns: z.string().array().optional(),\n  }),\n  BACKGROUND_WORKER_DEPRECATED: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    backgroundWorkerId: z.string(),\n  }),\n  BACKGROUND_WORKER_MESSAGE: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    backgroundWorkerId: z.string(),\n    data: BackgroundWorkerClientMessages,\n  }),\n};\n\nexport const workerToChildMessages = {\n  EXECUTE_TASK_RUN: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    execution: TaskRunExecution,\n    traceContext: z.record(z.unknown()),\n    metadata: BackgroundWorkerProperties,\n  }),\n  TASK_RUN_COMPLETED_NOTIFICATION: z.discriminatedUnion(\"version\", [\n    z.object({\n      version: z.literal(\"v1\"),\n      completion: TaskRunExecutionResult,\n      execution: TaskRunExecution,\n    }),\n    z.object({\n      version: z.literal(\"v2\"),\n      completion: TaskRunExecutionResult,\n    }),\n  ]),\n  CLEANUP: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    flush: z.boolean().default(false),\n    kill: z.boolean().default(true),\n  }),\n};\n\nexport const UncaughtExceptionMessage = z.object({\n  version: z.literal(\"v1\").default(\"v1\"),\n  error: z.object({\n    name: z.string(),\n    message: z.string(),\n    stack: z.string().optional(),\n  }),\n  origin: z.enum([\"uncaughtException\", \"unhandledRejection\"]),\n});\n\nexport const TaskMetadataFailedToParseData = z.object({\n  version: z.literal(\"v1\").default(\"v1\"),\n  tasks: z.unknown(),\n  zodIssues: z.custom<z.ZodIssue[]>((v) => {\n    return Array.isArray(v) && v.every((issue) => typeof issue === \"object\" && \"message\" in issue);\n  }),\n});\n\nexport const childToWorkerMessages = {\n  TASK_RUN_COMPLETED: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    execution: TaskRunExecution,\n    result: TaskRunExecutionResult,\n  }),\n  TASKS_READY: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    tasks: TaskMetadataWithFilePath.array(),\n  }),\n  TASKS_FAILED_TO_PARSE: TaskMetadataFailedToParseData,\n  TASK_HEARTBEAT: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    id: z.string(),\n  }),\n  TASK_RUN_HEARTBEAT: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    id: z.string(),\n  }),\n  READY_TO_DISPOSE: z.undefined(),\n  WAIT_FOR_DURATION: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    ms: z.number(),\n  }),\n  WAIT_FOR_TASK: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    id: z.string(),\n  }),\n  WAIT_FOR_BATCH: z.object({\n    version: z.literal(\"v1\").default(\"v1\"),\n    id: z.string(),\n    runs: z.string().array(),\n  }),\n  UNCAUGHT_EXCEPTION: UncaughtExceptionMessage,\n};\n\nexport const ProdChildToWorkerMessages = {\n  TASK_RUN_COMPLETED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      execution: TaskRunExecution,\n      result: TaskRunExecutionResult,\n    }),\n  },\n  TASKS_READY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      tasks: TaskMetadataWithFilePath.array(),\n    }),\n  },\n  TASKS_FAILED_TO_PARSE: {\n    message: TaskMetadataFailedToParseData,\n  },\n  TASK_HEARTBEAT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      id: z.string(),\n    }),\n  },\n  READY_TO_DISPOSE: {\n    message: z.undefined(),\n  },\n  WAIT_FOR_DURATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      ms: z.number(),\n      now: z.number(),\n      waitThresholdInMs: z.number(),\n    }),\n  },\n  WAIT_FOR_TASK: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      friendlyId: z.string(),\n    }),\n  },\n  WAIT_FOR_BATCH: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      batchFriendlyId: z.string(),\n      runFriendlyIds: z.string().array(),\n    }),\n  },\n  UNCAUGHT_EXCEPTION: {\n    message: UncaughtExceptionMessage,\n  },\n};\n\nexport const ProdWorkerToChildMessages = {\n  EXECUTE_TASK_RUN: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      execution: TaskRunExecution,\n      traceContext: z.record(z.unknown()),\n      metadata: BackgroundWorkerProperties,\n    }),\n  },\n  TASK_RUN_COMPLETED_NOTIFICATION: {\n    message: z.discriminatedUnion(\"version\", [\n      z.object({\n        version: z.literal(\"v1\"),\n        completion: TaskRunExecutionResult,\n        execution: TaskRunExecution,\n      }),\n      z.object({\n        version: z.literal(\"v2\"),\n        completion: TaskRunExecutionResult,\n      }),\n    ]),\n  },\n  CLEANUP: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      flush: z.boolean().default(false),\n      kill: z.boolean().default(true),\n    }),\n    callback: z.void(),\n  },\n  WAIT_COMPLETED_NOTIFICATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n    }),\n  },\n};\n\nexport const ProviderToPlatformMessages = {\n  LOG: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      data: z.string(),\n    }),\n  },\n  LOG_WITH_ACK: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      data: z.string(),\n    }),\n    callback: z.object({\n      status: z.literal(\"ok\"),\n    }),\n  },\n  WORKER_CRASHED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      reason: z.string().optional(),\n      exitCode: z.number().optional(),\n      message: z.string().optional(),\n      logs: z.string().optional(),\n      overrideCompletion: z.boolean().optional(),\n    }),\n  },\n  INDEXING_FAILED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      deploymentId: z.string(),\n      error: z.object({\n        name: z.string(),\n        message: z.string(),\n        stack: z.string().optional(),\n        stderr: z.string().optional(),\n      }),\n      overrideCompletion: z.boolean().optional(),\n    }),\n  },\n};\n\nexport const PlatformToProviderMessages = {\n  INDEX: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      imageTag: z.string(),\n      shortCode: z.string(),\n      apiKey: z.string(),\n      apiUrl: z.string(),\n      // identifiers\n      envId: z.string(),\n      envType: EnvironmentType,\n      orgId: z.string(),\n      projectId: z.string(),\n      deploymentId: z.string(),\n    }),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n        error: z.object({\n          name: z.string(),\n          message: z.string(),\n          stack: z.string().optional(),\n          stderr: z.string().optional(),\n        }),\n      }),\n      z.object({\n        success: z.literal(true),\n      }),\n    ]),\n  },\n  RESTORE: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      type: z.enum([\"DOCKER\", \"KUBERNETES\"]),\n      location: z.string(),\n      reason: z.string().optional(),\n      imageRef: z.string(),\n      attemptNumber: z.number().optional(),\n      machine: MachinePreset,\n      // identifiers\n      checkpointId: z.string(),\n      envId: z.string(),\n      envType: EnvironmentType,\n      orgId: z.string(),\n      projectId: z.string(),\n      runId: z.string(),\n    }),\n  },\n  PRE_PULL_DEPLOYMENT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      imageRef: z.string(),\n      shortCode: z.string(),\n      // identifiers\n      envId: z.string(),\n      envType: EnvironmentType,\n      orgId: z.string(),\n      projectId: z.string(),\n      deploymentId: z.string(),\n    }),\n  },\n};\n\nconst CreateWorkerMessage = z.object({\n  projectRef: z.string(),\n  envId: z.string(),\n  deploymentId: z.string(),\n  metadata: z.object({\n    cliPackageVersion: z.string().optional(),\n    contentHash: z.string(),\n    packageVersion: z.string(),\n    tasks: TaskResource.array(),\n  }),\n});\n\nexport const CoordinatorToPlatformMessages = {\n  LOG: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      metadata: z.any(),\n      text: z.string(),\n    }),\n  },\n  CREATE_WORKER: {\n    message: z.discriminatedUnion(\"version\", [\n      CreateWorkerMessage.extend({\n        version: z.literal(\"v1\"),\n      }),\n      CreateWorkerMessage.extend({\n        version: z.literal(\"v2\"),\n        supportsLazyAttempts: z.boolean(),\n      }),\n    ]),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n      }),\n      z.object({\n        success: z.literal(true),\n      }),\n    ]),\n  },\n  CREATE_TASK_RUN_ATTEMPT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      envId: z.string(),\n    }),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n        reason: z.string().optional(),\n      }),\n      z.object({\n        success: z.literal(true),\n        executionPayload: ProdTaskRunExecutionPayload,\n      }),\n    ]),\n  },\n  // Deprecated: Only workers without lazy attempt support will use this\n  READY_FOR_EXECUTION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      totalCompletions: z.number(),\n    }),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n      }),\n      z.object({\n        success: z.literal(true),\n        payload: ProdTaskRunExecutionPayload,\n      }),\n    ]),\n  },\n  READY_FOR_LAZY_ATTEMPT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      envId: z.string(),\n      totalCompletions: z.number(),\n    }),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n        reason: z.string().optional(),\n      }),\n      z.object({\n        success: z.literal(true),\n        lazyPayload: TaskRunExecutionLazyAttemptPayload,\n      }),\n    ]),\n  },\n  READY_FOR_RESUME: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptFriendlyId: z.string(),\n      type: WaitReason,\n    }),\n  },\n  TASK_RUN_COMPLETED: {\n    message: z.object({\n      version: z.enum([\"v1\", \"v2\"]).default(\"v1\"),\n      execution: ProdTaskRunExecution,\n      completion: TaskRunExecutionResult,\n      checkpoint: z\n        .object({\n          docker: z.boolean(),\n          location: z.string(),\n        })\n        .optional(),\n    }),\n  },\n  TASK_RUN_FAILED_TO_RUN: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      completion: TaskRunFailedExecutionResult,\n    }),\n  },\n  TASK_HEARTBEAT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptFriendlyId: z.string(),\n    }),\n  },\n  TASK_RUN_HEARTBEAT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n    }),\n  },\n  CHECKPOINT_CREATED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptFriendlyId: z.string(),\n      docker: z.boolean(),\n      location: z.string(),\n      reason: z.discriminatedUnion(\"type\", [\n        z.object({\n          type: z.literal(\"WAIT_FOR_DURATION\"),\n          ms: z.number(),\n          now: z.number(),\n        }),\n        z.object({\n          type: z.literal(\"WAIT_FOR_BATCH\"),\n          batchFriendlyId: z.string(),\n          runFriendlyIds: z.string().array(),\n        }),\n        z.object({\n          type: z.literal(\"WAIT_FOR_TASK\"),\n          friendlyId: z.string(),\n        }),\n        z.object({\n          type: z.literal(\"RETRYING_AFTER_FAILURE\"),\n          attemptNumber: z.number(),\n        }),\n      ]),\n    }),\n    callback: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      keepRunAlive: z.boolean(),\n    }),\n  },\n  INDEXING_FAILED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      deploymentId: z.string(),\n      error: z.object({\n        name: z.string(),\n        message: z.string(),\n        stack: z.string().optional(),\n        stderr: z.string().optional(),\n      }),\n    }),\n  },\n  RUN_CRASHED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      error: z.object({\n        name: z.string(),\n        message: z.string(),\n        stack: z.string().optional(),\n      }),\n    }),\n  },\n};\n\nexport const PlatformToCoordinatorMessages = {\n  RESUME_AFTER_DEPENDENCY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      attemptId: z.string(),\n      attemptFriendlyId: z.string(),\n      completions: TaskRunExecutionResult.array(),\n      executions: TaskRunExecution.array(),\n    }),\n  },\n  RESUME_AFTER_DURATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptId: z.string(),\n      attemptFriendlyId: z.string(),\n    }),\n  },\n  REQUEST_ATTEMPT_CANCELLATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptId: z.string(),\n      attemptFriendlyId: z.string(),\n    }),\n  },\n  REQUEST_RUN_CANCELLATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      delayInMs: z.number().optional(),\n    }),\n  },\n  READY_FOR_RETRY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n    }),\n  },\n  DYNAMIC_CONFIG: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      checkpointThresholdInMs: z.number(),\n    }),\n  },\n};\n\nexport const ClientToSharedQueueMessages = {\n  READY_FOR_TASKS: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      backgroundWorkerId: z.string(),\n    }),\n  },\n  BACKGROUND_WORKER_DEPRECATED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      backgroundWorkerId: z.string(),\n    }),\n  },\n  BACKGROUND_WORKER_MESSAGE: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      backgroundWorkerId: z.string(),\n      data: BackgroundWorkerClientMessages,\n    }),\n  },\n};\n\nexport const SharedQueueToClientMessages = {\n  SERVER_READY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      id: z.string(),\n    }),\n  },\n  BACKGROUND_WORKER_MESSAGE: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      backgroundWorkerId: z.string(),\n      data: BackgroundWorkerServerMessages,\n    }),\n  },\n};\n\nconst IndexTasksMessage = z.object({\n  version: z.literal(\"v1\"),\n  deploymentId: z.string(),\n  tasks: TaskResource.array(),\n  packageVersion: z.string(),\n});\n\nexport const ProdWorkerToCoordinatorMessages = {\n  TEST: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n    }),\n    callback: z.void(),\n  },\n  INDEX_TASKS: {\n    message: z.discriminatedUnion(\"version\", [\n      IndexTasksMessage.extend({\n        version: z.literal(\"v1\"),\n      }),\n      IndexTasksMessage.extend({\n        version: z.literal(\"v2\"),\n        supportsLazyAttempts: z.boolean(),\n      }),\n    ]),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n      }),\n      z.object({\n        success: z.literal(true),\n      }),\n    ]),\n  },\n  // Deprecated: Only workers without lazy attempt support will use this\n  READY_FOR_EXECUTION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      totalCompletions: z.number(),\n    }),\n  },\n  READY_FOR_LAZY_ATTEMPT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n      totalCompletions: z.number(),\n    }),\n  },\n  READY_FOR_RESUME: {\n    message: z.discriminatedUnion(\"version\", [\n      z.object({\n        version: z.literal(\"v1\"),\n        attemptFriendlyId: z.string(),\n        type: WaitReason,\n      }),\n      z.object({\n        version: z.literal(\"v2\"),\n        attemptFriendlyId: z.string(),\n        attemptNumber: z.number(),\n        type: WaitReason,\n      }),\n    ]),\n  },\n  READY_FOR_CHECKPOINT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n    }),\n  },\n  CANCEL_CHECKPOINT: {\n    message: z\n      .discriminatedUnion(\"version\", [\n        z.object({\n          version: z.literal(\"v1\"),\n        }),\n        z.object({\n          version: z.literal(\"v2\"),\n          reason: WaitReason.optional(),\n        }),\n      ])\n      .default({ version: \"v1\" }),\n    callback: z.object({\n      version: z.literal(\"v2\").default(\"v2\"),\n      checkpointCanceled: z.boolean(),\n      reason: WaitReason.optional(),\n    }),\n  },\n  TASK_HEARTBEAT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptFriendlyId: z.string(),\n    }),\n  },\n  TASK_RUN_HEARTBEAT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n    }),\n  },\n  TASK_RUN_COMPLETED: {\n    message: z.object({\n      version: z.enum([\"v1\", \"v2\"]).default(\"v1\"),\n      execution: ProdTaskRunExecution,\n      completion: TaskRunExecutionResult,\n    }),\n    callback: z.object({\n      willCheckpointAndRestore: z.boolean(),\n      shouldExit: z.boolean(),\n    }),\n  },\n  TASK_RUN_FAILED_TO_RUN: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      completion: TaskRunFailedExecutionResult,\n    }),\n  },\n  WAIT_FOR_DURATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      ms: z.number(),\n      now: z.number(),\n      attemptFriendlyId: z.string(),\n    }),\n    callback: z.object({\n      willCheckpointAndRestore: z.boolean(),\n    }),\n  },\n  WAIT_FOR_TASK: {\n    message: z.object({\n      version: z.enum([\"v1\", \"v2\"]).default(\"v1\"),\n      friendlyId: z.string(),\n      // This is the attempt that is waiting\n      attemptFriendlyId: z.string(),\n    }),\n    callback: z.object({\n      willCheckpointAndRestore: z.boolean(),\n    }),\n  },\n  WAIT_FOR_BATCH: {\n    message: z.object({\n      version: z.enum([\"v1\", \"v2\"]).default(\"v1\"),\n      batchFriendlyId: z.string(),\n      runFriendlyIds: z.string().array(),\n      // This is the attempt that is waiting\n      attemptFriendlyId: z.string(),\n    }),\n    callback: z.object({\n      willCheckpointAndRestore: z.boolean(),\n    }),\n  },\n  INDEXING_FAILED: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      deploymentId: z.string(),\n      error: z.object({\n        name: z.string(),\n        message: z.string(),\n        stack: z.string().optional(),\n        stderr: z.string().optional(),\n      }),\n    }),\n  },\n  CREATE_TASK_RUN_ATTEMPT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n    }),\n    callback: z.discriminatedUnion(\"success\", [\n      z.object({\n        success: z.literal(false),\n        reason: z.string().optional(),\n      }),\n      z.object({\n        success: z.literal(true),\n        executionPayload: ProdTaskRunExecutionPayload,\n      }),\n    ]),\n  },\n  UNRECOVERABLE_ERROR: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      error: z.object({\n        name: z.string(),\n        message: z.string(),\n        stack: z.string().optional(),\n      }),\n    }),\n  },\n  SET_STATE: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptFriendlyId: z.string().optional(),\n      attemptNumber: z.string().optional(),\n    }),\n  },\n};\n\n// TODO: The coordinator can only safely use v1 worker messages, higher versions will need a new flag, e.g. SUPPORTS_VERSIONED_MESSAGES\nexport const CoordinatorToProdWorkerMessages = {\n  RESUME_AFTER_DEPENDENCY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptId: z.string(),\n      completions: TaskRunExecutionResult.array(),\n      executions: TaskRunExecution.array(),\n    }),\n  },\n  RESUME_AFTER_DURATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptId: z.string(),\n    }),\n  },\n  // Deprecated: Only workers without lazy attempt support will use this\n  EXECUTE_TASK_RUN: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      executionPayload: ProdTaskRunExecutionPayload,\n    }),\n  },\n  EXECUTE_TASK_RUN_LAZY_ATTEMPT: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      lazyPayload: TaskRunExecutionLazyAttemptPayload,\n    }),\n  },\n  REQUEST_ATTEMPT_CANCELLATION: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      attemptId: z.string(),\n    }),\n  },\n  REQUEST_EXIT: {\n    message: z.discriminatedUnion(\"version\", [\n      z.object({\n        version: z.literal(\"v1\"),\n      }),\n      z.object({\n        version: z.literal(\"v2\"),\n        delayInMs: z.number().optional(),\n      }),\n    ]),\n  },\n  READY_FOR_RETRY: {\n    message: z.object({\n      version: z.literal(\"v1\").default(\"v1\"),\n      runId: z.string(),\n    }),\n  },\n};\n\nexport const ProdWorkerSocketData = z.object({\n  contentHash: z.string(),\n  projectRef: z.string(),\n  envId: z.string(),\n  runId: z.string(),\n  attemptFriendlyId: z.string().optional(),\n  attemptNumber: z.string().optional(),\n  podName: z.string(),\n  deploymentId: z.string(),\n  deploymentVersion: z.string(),\n});\n\nexport const CoordinatorSocketData = z.object({\n  supportsDynamicConfig: z.string().optional(),\n});\n", "import { z } from \"zod\";\n\nexport const PRIMARY_VARIANT = \"primary\";\n\nconst Variant = z.enum([PRIMARY_VARIANT]);\nexport type Variant = z.infer<typeof Variant>;\n\nconst AccessoryItem = z.object({\n  text: z.string(),\n  variant: z.string().optional(),\n  url: z.string().optional(),\n});\n\nconst Accessory = z.object({\n  items: z.array(AccessoryItem),\n  style: z.enum([\"codepath\"]).optional(),\n});\n\nexport type Accessory = z.infer<typeof Accessory>;\n\nexport const TaskEventStyle = z\n  .object({\n    icon: z.string().optional(),\n    variant: Variant.optional(),\n    accessory: Accessory.optional(),\n  })\n  .default({\n    icon: undefined,\n    variant: undefined,\n  });\n\nexport type TaskEventStyle = z.infer<typeof TaskEventStyle>;\n", "import { z } from \"zod\";\nimport { RetryOptions } from \"./schemas\";\nimport { EventFilter } from \"./eventFilter\";\nimport { Prettify } from \"../types\";\n\nexport const FetchRetryHeadersStrategy = z.object({\n  /** The `headers` strategy retries the request using info from the response headers. */\n  strategy: z.literal(\"headers\"),\n  /** The header to use to determine the maximum number of times to retry the request. */\n  limitHeader: z.string(),\n  /** The header to use to determine the number of remaining retries. */\n  remainingHeader: z.string(),\n  /** The header to use to determine the time when the number of remaining retries will be reset. */\n  resetHeader: z.string(),\n  /** The event filter to use to determine if the request should be retried. */\n  bodyFilter: EventFilter.optional(),\n\n  /** The format of the `resetHeader` value. */\n  resetFormat: z\n    .enum([\n      \"unix_timestamp\",\n      \"unix_timestamp_in_ms\",\n      \"iso_8601\",\n      \"iso_8601_duration_openai_variant\",\n    ])\n    .default(\"unix_timestamp\")\n    .optional(),\n});\n\nexport type FetchRetryHeadersStrategy = z.infer<typeof FetchRetryHeadersStrategy>;\n\nexport const FetchRetryBackoffStrategy = RetryOptions.extend({\n  /** The `backoff` strategy retries the request with an exponential backoff. */\n  strategy: z.literal(\"backoff\"),\n  /** The event filter to use to determine if the request should be retried. */\n  bodyFilter: EventFilter.optional(),\n});\n\n/** The `backoff` strategy retries the request with an exponential backoff. */\nexport type FetchRetryBackoffStrategy = z.infer<typeof FetchRetryBackoffStrategy>;\n\nexport const FetchRetryStrategy = z.discriminatedUnion(\"strategy\", [\n  FetchRetryHeadersStrategy,\n  FetchRetryBackoffStrategy,\n]);\n\nexport type FetchRetryStrategy = z.infer<typeof FetchRetryStrategy>;\n\nexport const FetchRetryByStatusOptions = z.record(z.string(), FetchRetryStrategy);\n\n/** An object where the key is a status code pattern and the value is a retrying strategy. Supported patterns are:\n  - Specific status codes: 429\n  - Ranges: 500-599\n  - Wildcards: 2xx, 3xx, 4xx, 5xx \n  */\nexport type FetchRetryByStatusOptions = Prettify<z.infer<typeof FetchRetryByStatusOptions>>;\n\nexport const FetchTimeoutOptions = z.object({\n  /** The maximum time to wait for the request to complete. */\n  durationInMs: z.number().optional(),\n  retry: RetryOptions.optional(),\n});\n\nexport type FetchTimeoutOptions = z.infer<typeof FetchTimeoutOptions>;\n\nexport const FetchRetryOptions = z.object({\n  /** The retrying strategy for specific status codes. */\n  byStatus: FetchRetryByStatusOptions.optional(),\n  /** The timeout options for the request. */\n  timeout: RetryOptions.optional(),\n  /**\n   * The retrying strategy for connection errors.\n   */\n  connectionError: RetryOptions.optional(),\n});\n\nexport type FetchRetryOptions = Prettify<z.infer<typeof FetchRetryOptions>>;\n", "import { z } from \"zod\";\n\nexport const stringPatternMatchers = [\n  z.object({\n    $endsWith: z.string(),\n  }),\n  z.object({\n    $startsWith: z.string(),\n  }),\n  z.object({\n    $ignoreCaseEquals: z.string(),\n  }),\n] as const;\n\nconst EventMatcher = z.union([\n  /** Match against a string */\n  z.array(z.string()),\n  /** Match against a number */\n  z.array(z.number()),\n  /** Match against a boolean */\n  z.array(z.boolean()),\n  z.array(\n    z.union([\n      ...stringPatternMatchers,\n      z.object({\n        $exists: z.boolean(),\n      }),\n      z.object({\n        $isNull: z.boolean(),\n      }),\n      z.object({\n        $anythingBut: z.union([z.string(), z.number(), z.boolean()]),\n      }),\n      z.object({\n        $anythingBut: z.union([z.array(z.string()), z.array(z.number()), z.array(z.boolean())]),\n      }),\n      z.object({\n        $gt: z.number(),\n      }),\n      z.object({\n        $lt: z.number(),\n      }),\n      z.object({\n        $gte: z.number(),\n      }),\n      z.object({\n        $lte: z.number(),\n      }),\n      z.object({\n        $between: z.tuple([z.number(), z.number()]),\n      }),\n      z.object({\n        $includes: z.union([z.string(), z.number(), z.boolean()]),\n      }),\n      z.object({\n        $not: z.union([z.string(), z.number(), z.boolean()]),\n      }),\n    ])\n  ),\n]);\n\ntype EventMatcher = z.infer<typeof EventMatcher>;\n\n/** A filter for matching against data */\nexport type EventFilter = { [key: string]: EventMatcher | EventFilter };\n\nexport const EventFilter: z.ZodType<EventFilter> = z.lazy(() =>\n  z.record(z.union([EventMatcher, EventFilter]))\n);\n", "import { z } from \"zod\";\n\nexport const ExceptionEventProperties = z.object({\n  type: z.string().optional(),\n  message: z.string().optional(),\n  stacktrace: z.string().optional(),\n});\n\nexport type ExceptionEventProperties = z.infer<typeof ExceptionEventProperties>;\n\nexport const ExceptionSpanEvent = z.object({\n  name: z.literal(\"exception\"),\n  time: z.coerce.date(),\n  properties: z.object({\n    exception: ExceptionEventProperties,\n  }),\n});\n\nexport type ExceptionSpanEvent = z.infer<typeof ExceptionSpanEvent>;\n\nexport const CancellationSpanEvent = z.object({\n  name: z.literal(\"cancellation\"),\n  time: z.coerce.date(),\n  properties: z.object({\n    reason: z.string(),\n  }),\n});\n\nexport type CancellationSpanEvent = z.infer<typeof CancellationSpanEvent>;\n\nexport const OtherSpanEvent = z.object({\n  name: z.string(),\n  time: z.coerce.date(),\n  properties: z.record(z.unknown()),\n});\n\nexport type OtherSpanEvent = z.infer<typeof OtherSpanEvent>;\n\nexport const SpanEvent = z.union([ExceptionSpanEvent, CancellationSpanEvent, OtherSpanEvent]);\n\nexport type SpanEvent = z.infer<typeof SpanEvent>;\n\nexport const SpanEvents = z.array(SpanEvent);\n\nexport type SpanEvents = z.infer<typeof SpanEvents>;\n\nexport function isExceptionSpanEvent(event: SpanEvent): event is ExceptionSpanEvent {\n  return event.name === \"exception\";\n}\n\nexport function isCancellationSpanEvent(event: SpanEvent): event is CancellationSpanEvent {\n  return event.name === \"cancellation\";\n}\n\nexport const SpanMessagingEvent = z.object({\n  system: z.string().optional(),\n  client_id: z.string().optional(),\n  operation: z.enum([\"publish\", \"create\", \"receive\", \"deliver\"]),\n  message: z.any(),\n  destination: z.string().optional(),\n});\n\nexport type SpanMessagingEvent = z.infer<typeof SpanMessagingEvent>;\n", "export const _globalThis = typeof globalThis === \"object\" ? globalThis : global;\n", "import { ApiClientConfiguration } from \"../apiClientManager/types\";\nimport { Clock } from \"../clock/clock\";\nimport type { RuntimeManager } from \"../runtime/manager\";\nimport { TaskCatalog } from \"../task-catalog/catalog\";\nimport { TaskContext } from \"../taskContext/types\";\nimport { UsageManager } from \"../usage/types\";\nimport { _globalThis } from \"./platform\";\n\nconst GLOBAL_TRIGGER_DOT_DEV_KEY = Symbol.for(`dev.trigger.ts.api`);\n\nconst _global = _globalThis as TriggerDotDevGlobal;\n\nexport function registerGlobal<Type extends keyof TriggerDotDevGlobalAPI>(\n  type: Type,\n  instance: TriggerDotDevGlobalAPI[Type],\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_TRIGGER_DOT_DEV_KEY] = _global[GLOBAL_TRIGGER_DOT_DEV_KEY] ?? {});\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(`trigger.dev: Attempted duplicate registration of API: ${type}`);\n    return false;\n  }\n\n  api[type] = instance;\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof TriggerDotDevGlobalAPI>(\n  type: Type\n): TriggerDotDevGlobalAPI[Type] | undefined {\n  return _global[GLOBAL_TRIGGER_DOT_DEV_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof TriggerDotDevGlobalAPI) {\n  const api = _global[GLOBAL_TRIGGER_DOT_DEV_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype TriggerDotDevGlobal = {\n  [GLOBAL_TRIGGER_DOT_DEV_KEY]?: TriggerDotDevGlobalAPI;\n};\n\ntype TriggerDotDevGlobalAPI = {\n  runtime?: RuntimeManager;\n  logger?: any;\n  clock?: Clock;\n  usage?: UsageManager;\n  [\"task-catalog\"]?: TaskCatalog;\n  [\"task-context\"]?: TaskContext;\n  [\"api-client\"]?: ApiClientConfiguration;\n};\n", "export const SemanticInternalAttributes = {\n  ENVIRONMENT_ID: \"ctx.environment.id\",\n  ENVIRONMENT_TYPE: \"ctx.environment.type\",\n  ORGANIZATION_ID: \"ctx.organization.id\",\n  ORGANIZATION_SLUG: \"ctx.organization.slug\",\n  ORGANIZATION_NAME: \"ctx.organization.name\",\n  PROJECT_ID: \"ctx.project.id\",\n  PROJECT_REF: \"ctx.project.ref\",\n  PROJECT_NAME: \"ctx.project.title\",\n  PROJECT_DIR: \"project.dir\",\n  ATTEMPT_ID: \"ctx.attempt.id\",\n  ATTEMPT_NUMBER: \"ctx.attempt.number\",\n  RUN_ID: \"ctx.run.id\",\n  RUN_IS_TEST: \"ctx.run.isTest\",\n  BATCH_ID: \"ctx.batch.id\",\n  TASK_SLUG: \"ctx.task.id\",\n  TASK_PATH: \"ctx.task.filePath\",\n  TASK_EXPORT_NAME: \"ctx.task.exportName\",\n  QUEUE_NAME: \"ctx.queue.name\",\n  QUEUE_ID: \"ctx.queue.id\",\n  MACHINE_PRESET_NAME: \"ctx.machine.name\",\n  MACHINE_PRESET_CPU: \"ctx.machine.cpu\",\n  MACHINE_PRESET_MEMORY: \"ctx.machine.memory\",\n  MACHINE_PRESET_CENTS_PER_MS: \"ctx.machine.centsPerMs\",\n  SPAN_PARTIAL: \"$span.partial\",\n  SPAN_ID: \"$span.span_id\",\n  OUTPUT: \"$output\",\n  OUTPUT_TYPE: \"$mime_type_output\",\n  STYLE: \"$style\",\n  STYLE_ICON: \"$style.icon\",\n  STYLE_VARIANT: \"$style.variant\",\n  STYLE_ACCESSORY: \"$style.accessory\",\n  METADATA: \"$metadata\",\n  TRIGGER: \"$trigger\",\n  PAYLOAD: \"$payload\",\n  PAYLOAD_TYPE: \"$mime_type_payload\",\n  SHOW: \"$show\",\n  SHOW_ACTIONS: \"$show.actions\",\n  WORKER_ID: \"worker.id\",\n  WORKER_VERSION: \"worker.version\",\n  CLI_VERSION: \"cli.version\",\n  SDK_VERSION: \"sdk.version\",\n  SDK_LANGUAGE: \"sdk.language\",\n  RETRY_AT: \"retry.at\",\n  RETRY_DELAY: \"retry.delay\",\n  RETRY_COUNT: \"retry.count\",\n  LINK_TITLE: \"$link.title\",\n  IDEMPOTENCY_KEY: \"ctx.run.idempotencyKey\",\n  USAGE_DURATION_MS: \"$usage.durationMs\",\n  USAGE_COST_IN_CENTS: \"$usage.costInCents\",\n  RATE_LIMIT_LIMIT: \"response.rateLimit.limit\",\n  RATE_LIMIT_REMAINING: \"response.rateLimit.remaining\",\n  RATE_LIMIT_RESET: \"response.rateLimit.reset\",\n};\n", "import { Attributes } from \"@opentelemetry/api\";\nimport { BackgroundWorkerProperties, TaskRunContext } from \"../schemas\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { TaskContext } from \"./types\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\n\nconst API_NAME = \"task-context\";\n\nexport class TaskContextAPI {\n  private static _instance?: TaskContextAPI;\n\n  private constructor() {}\n\n  public static getInstance(): TaskContextAPI {\n    if (!this._instance) {\n      this._instance = new TaskContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  get isInsideTask(): boolean {\n    return this.#getTaskContext() !== undefined;\n  }\n\n  get ctx(): TaskRunContext | undefined {\n    return this.#getTaskContext()?.ctx;\n  }\n\n  get worker(): BackgroundWorkerProperties | undefined {\n    return this.#getTaskContext()?.worker;\n  }\n\n  get attributes(): Attributes {\n    if (this.ctx) {\n      return {\n        ...this.contextAttributes,\n        ...this.workerAttributes,\n      };\n    }\n\n    return {};\n  }\n\n  get workerAttributes(): Attributes {\n    if (this.worker) {\n      return {\n        [SemanticInternalAttributes.WORKER_ID]: this.worker.id,\n        [SemanticInternalAttributes.WORKER_VERSION]: this.worker.version,\n      };\n    }\n\n    return {};\n  }\n\n  get contextAttributes(): Attributes {\n    if (this.ctx) {\n      return {\n        [SemanticInternalAttributes.ATTEMPT_ID]: this.ctx.attempt.id,\n        [SemanticInternalAttributes.ATTEMPT_NUMBER]: this.ctx.attempt.number,\n        [SemanticInternalAttributes.TASK_SLUG]: this.ctx.task.id,\n        [SemanticInternalAttributes.TASK_PATH]: this.ctx.task.filePath,\n        [SemanticInternalAttributes.TASK_EXPORT_NAME]: this.ctx.task.exportName,\n        [SemanticInternalAttributes.QUEUE_NAME]: this.ctx.queue.name,\n        [SemanticInternalAttributes.QUEUE_ID]: this.ctx.queue.id,\n        [SemanticInternalAttributes.ENVIRONMENT_ID]: this.ctx.environment.id,\n        [SemanticInternalAttributes.ENVIRONMENT_TYPE]: this.ctx.environment.type,\n        [SemanticInternalAttributes.ORGANIZATION_ID]: this.ctx.organization.id,\n        [SemanticInternalAttributes.PROJECT_ID]: this.ctx.project.id,\n        [SemanticInternalAttributes.PROJECT_REF]: this.ctx.project.ref,\n        [SemanticInternalAttributes.PROJECT_NAME]: this.ctx.project.name,\n        [SemanticInternalAttributes.RUN_ID]: this.ctx.run.id,\n        [SemanticInternalAttributes.RUN_IS_TEST]: this.ctx.run.isTest,\n        [SemanticInternalAttributes.ORGANIZATION_SLUG]: this.ctx.organization.slug,\n        [SemanticInternalAttributes.ORGANIZATION_NAME]: this.ctx.organization.name,\n        [SemanticInternalAttributes.BATCH_ID]: this.ctx.batch?.id,\n        [SemanticInternalAttributes.IDEMPOTENCY_KEY]: this.ctx.run.idempotencyKey,\n        [SemanticInternalAttributes.MACHINE_PRESET_NAME]: this.ctx.machine?.name,\n        [SemanticInternalAttributes.MACHINE_PRESET_CPU]: this.ctx.machine?.cpu,\n        [SemanticInternalAttributes.MACHINE_PRESET_MEMORY]: this.ctx.machine?.memory,\n        [SemanticInternalAttributes.MACHINE_PRESET_CENTS_PER_MS]: this.ctx.machine?.centsPerMs,\n      };\n    }\n\n    return {};\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public setGlobalTaskContext(taskContext: TaskContext): boolean {\n    return registerGlobal(API_NAME, taskContext);\n  }\n\n  #getTaskContext(): TaskContext | undefined {\n    return getGlobal(API_NAME);\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TaskContextAPI } from \"./taskContext\";\n/** Entrypoint for logger API */\nexport const taskContext = TaskContextAPI.getInstance();\n", "import { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { RetryOptions } from \"../schemas\";\nimport { calculateNextRetryDelay } from \"../utils/retries\";\nimport { ApiConnectionError, ApiError } from \"./errors\";\n\nimport { Attributes, Span } from \"@opentelemetry/api\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { accessoryAttributes } from \"../utils/styleAttributes\";\nimport {\n  CursorPage,\n  CursorPageParams,\n  CursorPageResponse,\n  OffsetLimitPage,\n  OffsetLimitPageParams,\n  OffsetLimitPageResponse,\n} from \"./pagination\";\n\nexport const defaultRetryOptions = {\n  maxAttempts: 3,\n  factor: 2,\n  minTimeoutInMs: 1000,\n  maxTimeoutInMs: 60000,\n  randomize: false,\n} satisfies RetryOptions;\n\nexport type ZodFetchOptions = {\n  retry?: RetryOptions;\n  tracer?: TriggerTracer;\n  name?: string;\n  attributes?: Attributes;\n  icon?: string;\n  onResponseBody?: (body: unknown, span: Span) => void;\n};\n\nexport type ApiRequestOptions = Pick<ZodFetchOptions, \"retry\">;\ntype KeysEnum<T> = { [P in keyof Required<T>]: true };\n\n// This is required so that we can determine if a given object matches the ApiRequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<ApiRequestOptions> = {\n  retry: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is ApiRequestOptions => {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\ninterface FetchCursorPageParams extends CursorPageParams {\n  query?: URLSearchParams;\n}\n\ninterface FetchOffsetLimitPageParams extends OffsetLimitPageParams {\n  query?: URLSearchParams;\n}\n\nexport function zodfetch<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n): ApiPromise<z.output<TResponseBodySchema>> {\n  return new ApiPromise(_doZodFetch(schema, url, requestInit, options));\n}\n\nexport function zodfetchCursorPage<TItemSchema extends z.ZodTypeAny>(\n  schema: TItemSchema,\n  url: string,\n  params: FetchCursorPageParams,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n) {\n  const query = new URLSearchParams(params.query);\n\n  if (params.limit) {\n    query.set(\"page[size]\", String(params.limit));\n  }\n\n  if (params.after) {\n    query.set(\"page[after]\", params.after);\n  }\n\n  if (params.before) {\n    query.set(\"page[before]\", params.before);\n  }\n\n  const cursorPageSchema = z.object({\n    data: z.array(schema),\n    pagination: z.object({\n      next: z.string().optional(),\n      previous: z.string().optional(),\n    }),\n  });\n\n  const $url = new URL(url);\n  $url.search = query.toString();\n\n  const fetchResult = _doZodFetch(cursorPageSchema, $url.href, requestInit, options);\n\n  return new CursorPagePromise(fetchResult, schema, url, params, requestInit, options);\n}\n\nexport function zodfetchOffsetLimitPage<TItemSchema extends z.ZodTypeAny>(\n  schema: TItemSchema,\n  url: string,\n  params: FetchOffsetLimitPageParams,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n) {\n  const query = new URLSearchParams(params.query);\n\n  if (params.limit) {\n    query.set(\"perPage\", String(params.limit));\n  }\n\n  if (params.page) {\n    query.set(\"page\", String(params.page));\n  }\n\n  const offsetLimitPageSchema = z.object({\n    data: z.array(schema),\n    pagination: z.object({\n      currentPage: z.coerce.number(),\n      totalPages: z.coerce.number(),\n      count: z.coerce.number(),\n    }),\n  });\n\n  const $url = new URL(url);\n  $url.search = query.toString();\n\n  const fetchResult = _doZodFetch(offsetLimitPageSchema, $url.href, requestInit, options);\n\n  return new OffsetLimitPagePromise(fetchResult, schema, url, params, requestInit, options);\n}\n\ntype ZodFetchResult<T> = {\n  data: T;\n  response: Response;\n};\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\nasync function traceZodFetch<T>(\n  params: {\n    url: string;\n    requestInit?: RequestInit;\n    options?: ZodFetchOptions;\n  },\n  callback: (span?: Span) => Promise<T>\n): Promise<T> {\n  if (!params.options?.tracer) {\n    return callback();\n  }\n\n  const url = new URL(params.url);\n  const method = params.requestInit?.method ?? \"GET\";\n  const name = params.options.name ?? `${method} ${url.pathname}`;\n\n  return await params.options.tracer.startActiveSpan(\n    name,\n    async (span) => {\n      return await callback(span);\n    },\n    {\n      attributes: {\n        [SemanticInternalAttributes.STYLE_ICON]: params.options?.icon ?? \"api\",\n        ...params.options.attributes,\n      },\n    }\n  );\n}\n\nasync function _doZodFetch<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: PromiseOrValue<RequestInit>,\n  options?: ZodFetchOptions\n): Promise<ZodFetchResult<z.output<TResponseBodySchema>>> {\n  const $requestInit = await requestInit;\n\n  return traceZodFetch({ url, requestInit: $requestInit, options }, async (span) => {\n    const result = await _doZodFetchWithRetries(schema, url, $requestInit, options);\n\n    if (options?.onResponseBody && span) {\n      options.onResponseBody(result.data, span);\n    }\n\n    return result;\n  });\n}\n\nasync function _doZodFetchWithRetries<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions,\n  attempt = 1\n): Promise<ZodFetchResult<z.output<TResponseBodySchema>>> {\n  try {\n    const response = await fetch(url, requestInitWithCache(requestInit));\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      const retryResult = shouldRetry(response, attempt, options?.retry);\n\n      if (retryResult.retry) {\n        await waitForRetry(url, attempt + 1, retryResult.delay, options, requestInit, response);\n\n        return await _doZodFetchWithRetries(schema, url, requestInit, options, attempt + 1);\n      } else {\n        const errText = await response.text().catch((e) => castToError(e).message);\n        const errJSON = safeJsonParse(errText);\n        const errMessage = errJSON ? undefined : errText;\n\n        throw ApiError.generate(response.status, errJSON, errMessage, responseHeaders);\n      }\n    }\n\n    const jsonBody = await response.json();\n    const parsedResult = schema.safeParse(jsonBody);\n\n    if (parsedResult.success) {\n      return { data: parsedResult.data, response };\n    }\n\n    throw fromZodError(parsedResult.error);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    if (options?.retry) {\n      const retry = { ...defaultRetryOptions, ...options.retry };\n\n      const delay = calculateNextRetryDelay(retry, attempt);\n\n      if (delay) {\n        await waitForRetry(url, attempt + 1, delay, options, requestInit);\n\n        return await _doZodFetchWithRetries(schema, url, requestInit, options, attempt + 1);\n      }\n    }\n\n    throw new ApiConnectionError({ cause: castToError(error) });\n  }\n}\n\nfunction castToError(err: any): Error {\n  if (err instanceof Error) return err;\n  return new Error(err);\n}\n\ntype ShouldRetryResult =\n  | {\n      retry: false;\n    }\n  | {\n      retry: true;\n      delay: number;\n    };\n\nfunction shouldRetry(\n  response: Response,\n  attempt: number,\n  retryOptions?: RetryOptions\n): ShouldRetryResult {\n  function shouldRetryForOptions(): ShouldRetryResult {\n    const retry = { ...defaultRetryOptions, ...retryOptions };\n\n    const delay = calculateNextRetryDelay(retry, attempt);\n\n    if (delay) {\n      return { retry: true, delay };\n    } else {\n      return { retry: false };\n    }\n  }\n\n  // Note this is not a standard header.\n  const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n\n  // If the server explicitly says whether or not to retry, obey.\n  if (shouldRetryHeader === \"true\") return shouldRetryForOptions();\n  if (shouldRetryHeader === \"false\") return { retry: false };\n\n  // Retry on request timeouts.\n  if (response.status === 408) return shouldRetryForOptions();\n\n  // Retry on lock timeouts.\n  if (response.status === 409) return shouldRetryForOptions();\n\n  // Retry on rate limits.\n  if (response.status === 429) {\n    if (\n      attempt >= (typeof retryOptions?.maxAttempts === \"number\" ? retryOptions?.maxAttempts : 3)\n    ) {\n      return { retry: false };\n    }\n\n    // x-ratelimit-reset is the unix timestamp in milliseconds when the rate limit will reset.\n    const resetAtUnixEpochMs = response.headers.get(\"x-ratelimit-reset\");\n\n    if (resetAtUnixEpochMs) {\n      const resetAtUnixEpoch = parseInt(resetAtUnixEpochMs, 10);\n      const delay = resetAtUnixEpoch - Date.now() + Math.floor(Math.random() * 1000);\n\n      if (delay > 0) {\n        return { retry: true, delay };\n      }\n    }\n\n    return shouldRetryForOptions();\n  }\n\n  // Retry internal errors.\n  if (response.status >= 500) return shouldRetryForOptions();\n\n  return { retry: false };\n}\n\nfunction safeJsonParse(text: string): any {\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction createResponseHeaders(headers: Response[\"headers\"]): Record<string, string> {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries()\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    }\n  );\n}\n\nfunction requestInitWithCache(requestInit?: RequestInit): RequestInit {\n  try {\n    const withCache: RequestInit = {\n      ...requestInit,\n      cache: \"no-cache\",\n    };\n\n    const _ = new Request(\"http://localhost\", withCache);\n\n    return withCache;\n  } catch (error) {\n    return requestInit ?? {};\n  }\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class ApiPromise<T> extends Promise<T> {\n  constructor(private responsePromise: Promise<ZodFetchResult<T>>) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    return this.responsePromise.then((result) => result.data);\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport class CursorPagePromise<TItemSchema extends z.ZodTypeAny>\n  extends ApiPromise<CursorPage<z.output<TItemSchema>>>\n  implements AsyncIterable<z.output<TItemSchema>>\n{\n  constructor(\n    result: Promise<ZodFetchResult<CursorPageResponse<z.output<TItemSchema>>>>,\n    private schema: TItemSchema,\n    private url: string,\n    private params: FetchCursorPageParams,\n    private requestInit?: RequestInit,\n    private options?: ZodFetchOptions\n  ) {\n    super(\n      result.then((result) => ({\n        data: new CursorPage(result.data.data, result.data.pagination, this.#fetchPage.bind(this)),\n        response: result.response,\n      }))\n    );\n  }\n\n  #fetchPage(params: Omit<CursorPageParams, \"limit\">): Promise<CursorPage<z.output<TItemSchema>>> {\n    return zodfetchCursorPage(\n      this.schema,\n      this.url,\n      { ...this.params, ...params },\n      this.requestInit,\n      this.options\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport class OffsetLimitPagePromise<TItemSchema extends z.ZodTypeAny>\n  extends ApiPromise<OffsetLimitPage<z.output<TItemSchema>>>\n  implements AsyncIterable<z.output<TItemSchema>>\n{\n  constructor(\n    result: Promise<ZodFetchResult<OffsetLimitPageResponse<z.output<TItemSchema>>>>,\n    private schema: TItemSchema,\n    private url: string,\n    private params: FetchOffsetLimitPageParams,\n    private requestInit?: RequestInit,\n    private options?: ZodFetchOptions\n  ) {\n    super(\n      result.then((result) => ({\n        data: new OffsetLimitPage(\n          result.data.data,\n          result.data.pagination,\n          this.#fetchPage.bind(this)\n        ),\n        response: result.response,\n      }))\n    );\n  }\n\n  #fetchPage(\n    params: Omit<FetchOffsetLimitPageParams, \"limit\">\n  ): Promise<OffsetLimitPage<z.output<TItemSchema>>> {\n    return zodfetchOffsetLimitPage(\n      this.schema,\n      this.url,\n      { ...this.params, ...params },\n      this.requestInit,\n      this.options\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nasync function waitForRetry(\n  url: string,\n  attempt: number,\n  delay: number,\n  options?: ZodFetchOptions,\n  requestInit?: RequestInit,\n  response?: Response\n): Promise<void> {\n  if (options?.tracer) {\n    const method = requestInit?.method ?? \"GET\";\n\n    return options.tracer.startActiveSpan(\n      response ? `wait after ${response.status}` : `wait after error`,\n      async (span) => {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"wait\",\n          ...accessoryAttributes({\n            items: [\n              {\n                text: `retrying ${options?.name ?? method.toUpperCase()} in ${delay}ms`,\n                variant: \"normal\",\n              },\n            ],\n            style: \"codepath\",\n          }),\n        },\n      }\n    );\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, delay));\n}\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n", "import { RetryOptions } from \"./schemas\";\n\nconst DEFAULT_RETRY_OPTIONS = {\n  limit: 5,\n  factor: 1.8,\n  minTimeoutInMs: 1000,\n  maxTimeoutInMs: 60000,\n  randomize: true,\n} satisfies RetryOptions;\n\nexport function calculateRetryAt(retryOptions: RetryOptions, attempts: number): Date | undefined {\n  const options = {\n    ...DEFAULT_RETRY_OPTIONS,\n    ...retryOptions,\n  };\n\n  const retryCount = attempts + 1;\n\n  if (retryCount >= options.limit) {\n    return;\n  }\n\n  const random = options.randomize ? Math.random() + 1 : 1;\n\n  let timeoutInMs = Math.round(\n    random *\n      Math.max(options.minTimeoutInMs, 1) *\n      Math.pow(options.factor, Math.max(attempts - 1, 0))\n  );\n\n  timeoutInMs = Math.min(timeoutInMs, options.maxTimeoutInMs);\n\n  return new Date(Date.now() + timeoutInMs);\n}\n\nexport function calculateResetAt(\n  resets: string | undefined | null,\n  format:\n    | \"unix_timestamp\"\n    | \"iso_8601\"\n    | \"iso_8601_duration_openai_variant\"\n    | \"unix_timestamp_in_ms\",\n  now: Date = new Date()\n): Date | undefined {\n  if (!resets) return;\n\n  switch (format) {\n    case \"iso_8601_duration_openai_variant\": {\n      return calculateISO8601DurationOpenAIVariantResetAt(resets, now);\n    }\n    case \"iso_8601\": {\n      return calculateISO8601ResetAt(resets, now);\n    }\n    case \"unix_timestamp\": {\n      return calculateUnixTimestampResetAt(resets, now);\n    }\n    case \"unix_timestamp_in_ms\": {\n      return calculateUnixTimestampInMsResetAt(resets, now);\n    }\n  }\n}\n\nfunction calculateUnixTimestampResetAt(resets: string, now: Date = new Date()): Date | undefined {\n  // Check if the input is null or undefined\n  if (!resets) return undefined;\n\n  // Convert the string to a number\n  const resetAt = parseInt(resets, 10);\n\n  // If the string doesn't match the expected format, return undefined\n  if (isNaN(resetAt)) return undefined;\n\n  // Return the date\n  return new Date(resetAt * 1000);\n}\n\nfunction calculateUnixTimestampInMsResetAt(\n  resets: string,\n  now: Date = new Date()\n): Date | undefined {\n  // Check if the input is null or undefined\n  if (!resets) return undefined;\n\n  // Convert the string to a number\n  const resetAt = parseInt(resets, 10);\n\n  // If the string doesn't match the expected format, return undefined\n  if (isNaN(resetAt)) return undefined;\n\n  // Return the date\n  return new Date(resetAt);\n}\n\nfunction calculateISO8601ResetAt(resets: string, now: Date = new Date()): Date | undefined {\n  // Check if the input is null or undefined\n  if (!resets) return undefined;\n\n  // Parse the date\n  const resetAt = new Date(resets);\n\n  // If the string doesn't match the expected format, return undefined\n  if (isNaN(resetAt.getTime())) return undefined;\n\n  return resetAt;\n}\n\nfunction calculateISO8601DurationOpenAIVariantResetAt(\n  resets: string,\n  now: Date = new Date()\n): Date | undefined {\n  // Check if the input is null or undefined\n  if (!resets) return undefined;\n\n  // Regular expression to match the duration string pattern\n  const pattern = /^(?:(\\d+)d)?(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+(?:\\.\\d+)?)s)?(?:(\\d+)ms)?$/;\n  const match = resets.match(pattern);\n\n  // If the string doesn't match the expected format, return undefined\n  if (!match) return undefined;\n\n  // Extract days, hours, minutes, seconds, and milliseconds from the string\n  const days = parseInt(match[1], 10) || 0;\n  const hours = parseInt(match[2], 10) || 0;\n  const minutes = parseInt(match[3], 10) || 0;\n  const seconds = parseFloat(match[4]) || 0;\n  const milliseconds = parseInt(match[5], 10) || 0;\n\n  // Calculate the future date based on the current date plus the extracted time\n  const resetAt = new Date(now);\n  resetAt.setDate(resetAt.getDate() + days);\n  resetAt.setHours(resetAt.getHours() + hours);\n  resetAt.setMinutes(resetAt.getMinutes() + minutes);\n  resetAt.setSeconds(resetAt.getSeconds() + Math.floor(seconds));\n  resetAt.setMilliseconds(\n    resetAt.getMilliseconds() + (seconds - Math.floor(seconds)) * 1000 + milliseconds\n  );\n\n  return resetAt;\n}\n", "import { calculateResetAt as calculateResetAtInternal } from \"../../retry\";\nimport { FetchRetryOptions, type RetryOptions } from \"../schemas\";\n\nexport const defaultRetryOptions = {\n  maxAttempts: 3,\n  factor: 2,\n  minTimeoutInMs: 1000,\n  maxTimeoutInMs: 60000,\n  randomize: true,\n} satisfies RetryOptions;\n\nexport const defaultFetchRetryOptions = {\n  byStatus: {\n    \"429,408,409,5xx\": {\n      strategy: \"backoff\",\n      ...defaultRetryOptions,\n    },\n  },\n  connectionError: defaultRetryOptions,\n  timeout: defaultRetryOptions,\n} satisfies FetchRetryOptions;\n\n/**\n *\n * @param options\n * @param attempt - The current attempt number. If the first attempt has failed, this will be 1.\n * @returns\n */\nexport function calculateNextRetryDelay(options: RetryOptions, attempt: number) {\n  const opts = { ...defaultRetryOptions, ...options };\n\n  if (attempt >= opts.maxAttempts) {\n    return;\n  }\n\n  const { factor, minTimeoutInMs, maxTimeoutInMs, randomize } = opts;\n\n  const random = randomize ? Math.random() + 1 : 1;\n\n  const timeout = Math.min(maxTimeoutInMs, random * minTimeoutInMs * Math.pow(factor, attempt - 1));\n\n  // Round to the nearest integer\n  return Math.round(timeout);\n}\n\nexport function calculateResetAt(\n  resets: string | undefined | null,\n  format:\n    | \"unix_timestamp\"\n    | \"iso_8601\"\n    | \"iso_8601_duration_openai_variant\"\n    | \"unix_timestamp_in_ms\",\n  now: number = Date.now()\n): number | undefined {\n  const resetAt = calculateResetAtInternal(resets, format, new Date(now));\n\n  return resetAt?.getTime();\n}\n", "export type APIHeaders = Record<string, string | null | undefined>;\n\nexport class ApiError extends Error {\n  readonly status: number | undefined;\n  readonly headers: APIHeaders | undefined;\n  readonly error: Object | undefined;\n\n  readonly code: string | null | undefined;\n  readonly param: string | null | undefined;\n  readonly type: string | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: APIHeaders | undefined\n  ) {\n    super(`${ApiError.makeMessage(status, error, message)}`);\n    this.name = \"TriggerApiError\";\n    this.status = status;\n    this.headers = headers;\n\n    const data = error as Record<string, any>;\n    this.error = data;\n    this.code = data?.[\"code\"];\n    this.param = data?.[\"param\"];\n    this.type = data?.[\"type\"];\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg = error?.message\n      ? typeof error.message === \"string\"\n        ? error.message\n        : JSON.stringify(error.message)\n      : error\n      ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return \"(no status code or body)\";\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: APIHeaders | undefined\n  ) {\n    if (!status) {\n      return new ApiConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = (errorResponse as Record<string, any>)?.[\"error\"];\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new ApiError(status, error, message, headers);\n  }\n}\n\nexport class ApiConnectionError extends ApiError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || \"Connection error.\", undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class BadRequestError extends ApiError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends ApiError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends ApiError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends ApiError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends ApiError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends ApiError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends ApiError {\n  override readonly status: 429 = 429;\n\n  get millisecondsUntilReset(): number | undefined {\n    // x-ratelimit-reset is the unix timestamp in milliseconds when the rate limit will reset.\n    const resetAtUnixEpochMs = (this.headers ?? {})[\"x-ratelimit-reset\"];\n\n    if (typeof resetAtUnixEpochMs === \"string\") {\n      const resetAtUnixEpoch = parseInt(resetAtUnixEpochMs, 10);\n\n      if (isNaN(resetAtUnixEpoch)) {\n        return;\n      }\n\n      // Add between 0 and 2000ms to the reset time to add jitter\n      return Math.max(resetAtUnixEpoch - Date.now() + Math.floor(Math.random() * 2000), 0);\n    }\n  }\n}\n\nexport class InternalServerError extends ApiError {}\n\nfunction castToError(err: any): Error {\n  if (err instanceof Error) return err;\n  return new Error(err);\n}\n", "import { Attributes } from \"@opentelemetry/api\";\n\nexport const NULL_SENTINEL = \"$@null((\";\n\nexport function flattenAttributes(\n  obj: Record<string, unknown> | Array<unknown> | string | boolean | number | null | undefined,\n  prefix?: string\n): Attributes {\n  const result: Attributes = {};\n\n  // Check if obj is null or undefined\n  if (obj === undefined) {\n    return result;\n  }\n\n  if (obj === null) {\n    result[prefix || \"\"] = NULL_SENTINEL;\n    return result;\n  }\n\n  if (typeof obj === \"string\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  if (typeof obj === \"number\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  if (typeof obj === \"boolean\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  for (const [key, value] of Object.entries(obj)) {\n    const newPrefix = `${prefix ? `${prefix}.` : \"\"}${Array.isArray(obj) ? `[${key}]` : key}`;\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (typeof value[i] === \"object\" && value[i] !== null) {\n          // update null check here as well\n          Object.assign(result, flattenAttributes(value[i], `${newPrefix}.[${i}]`));\n        } else {\n          if (value[i] === null) {\n            result[`${newPrefix}.[${i}]`] = NULL_SENTINEL;\n          } else {\n            result[`${newPrefix}.[${i}]`] = value[i];\n          }\n        }\n      }\n    } else if (isRecord(value)) {\n      // update null check here\n      Object.assign(result, flattenAttributes(value, newPrefix));\n    } else {\n      if (typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\") {\n        result[newPrefix] = value;\n      } else if (value === null) {\n        result[newPrefix] = NULL_SENTINEL;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\nexport function unflattenAttributes(\n  obj: Attributes\n): Record<string, unknown> | string | number | boolean | null | undefined {\n  if (typeof obj !== \"object\" || obj === null || Array.isArray(obj)) {\n    return obj;\n  }\n\n  if (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    Object.keys(obj).length === 1 &&\n    Object.keys(obj)[0] === \"\"\n  ) {\n    return rehydrateNull(obj[\"\"]) as any;\n  }\n\n  if (Object.keys(obj).length === 0) {\n    return;\n  }\n\n  const result: Record<string, unknown> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    const parts = key.split(\".\").reduce((acc, part) => {\n      if (part.includes(\"[\")) {\n        // Handling nested array indices\n        const subparts = part.split(/\\[|\\]/).filter((p) => p !== \"\");\n        acc.push(...subparts);\n      } else {\n        acc.push(part);\n      }\n      return acc;\n    }, [] as string[]);\n\n    let current: any = result;\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      const nextPart = parts[i + 1];\n      const isArray = /^\\d+$/.test(nextPart);\n      if (isArray && !Array.isArray(current[part])) {\n        current[part] = [];\n      } else if (!isArray && current[part] === undefined) {\n        current[part] = {};\n      }\n      current = current[part];\n    }\n    const lastPart = parts[parts.length - 1];\n    current[lastPart] = rehydrateNull(value);\n  }\n\n  // Convert the result to an array if all top-level keys are numeric indices\n  if (Object.keys(result).every((k) => /^\\d+$/.test(k))) {\n    const maxIndex = Math.max(...Object.keys(result).map((k) => parseInt(k)));\n    const arrayResult = Array(maxIndex + 1);\n    for (const key in result) {\n      arrayResult[parseInt(key)] = result[key];\n    }\n    return arrayResult as any;\n  }\n\n  return result;\n}\n\nexport function primitiveValueOrflattenedAttributes(\n  obj: Record<string, unknown> | Array<unknown> | string | boolean | number | undefined,\n  prefix: string | undefined\n): Attributes | string | number | boolean | undefined {\n  if (\n    typeof obj === \"string\" ||\n    typeof obj === \"number\" ||\n    typeof obj === \"boolean\" ||\n    obj === null ||\n    obj === undefined\n  ) {\n    return obj;\n  }\n\n  const attributes = flattenAttributes(obj, prefix);\n\n  if (\n    prefix !== undefined &&\n    typeof attributes[prefix] !== \"undefined\" &&\n    attributes[prefix] !== null\n  ) {\n    return attributes[prefix] as unknown as Attributes;\n  }\n\n  return attributes;\n}\n\nfunction rehydrateNull(value: any): any {\n  if (value === NULL_SENTINEL) {\n    return null;\n  }\n\n  return value;\n}\n", "import { Attributes } from \"@opentelemetry/api\";\nimport { Accessory } from \"../schemas\";\nimport { flattenAttributes } from \"./flattenAttributes\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\n\nexport function accessoryAttributes(accessory: Accessory): Attributes {\n  return flattenAttributes(accessory, SemanticInternalAttributes.STYLE_ACCESSORY);\n}\n", "export interface CursorPageParams {\n  limit?: number;\n  after?: string;\n  before?: string;\n}\n\nexport interface OffsetLimitPageParams {\n  limit?: number;\n  page?: number;\n}\n\nexport interface PageResponse<Item> {\n  data: Array<Item>;\n}\n\nexport interface CursorPageResponse<Item> extends PageResponse<Item> {\n  pagination: {\n    next?: string;\n    previous?: string;\n  };\n}\n\nexport interface OffsetLimitPageResponse<Item> extends PageResponse<Item> {\n  pagination: {\n    currentPage: number;\n    totalPages: number;\n    count: number;\n  };\n}\n\nexport interface Page<Item> {\n  getPaginatedItems(): Item[];\n  hasNextPage(): boolean;\n  hasPreviousPage(): boolean;\n}\n\nexport class CursorPage<Item> implements CursorPageResponse<Item>, Page<Item>, AsyncIterable<Item> {\n  data: Array<Item>;\n  pagination: { next?: string; previous?: string };\n\n  constructor(\n    data: Array<Item>,\n    pagination: { next?: string; previous?: string },\n    private pageFetcher: (params: Omit<CursorPageParams, \"limit\">) => Promise<CursorPage<Item>>\n  ) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  hasNextPage(): boolean {\n    return !!this.pagination.next;\n  }\n\n  hasPreviousPage(): boolean {\n    return !!this.pagination.previous;\n  }\n\n  getNextPage(): Promise<CursorPage<Item>> {\n    if (!this.pagination.next) {\n      throw new Error(\"No next page available\");\n    }\n\n    return this.pageFetcher({ after: this.pagination.next });\n  }\n\n  getPreviousPage(): Promise<CursorPage<Item>> {\n    if (!this.pagination.previous) {\n      throw new Error(\"No previous page available\");\n    }\n\n    return this.pageFetcher({ before: this.pagination.previous });\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: CursorPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\nexport class OffsetLimitPage<Item>\n  implements OffsetLimitPageResponse<Item>, Page<Item>, AsyncIterable<Item>\n{\n  data: Array<Item>;\n  pagination: { currentPage: number; totalPages: number; count: number };\n\n  constructor(\n    data: Array<Item>,\n    pagination: { currentPage: number; totalPages: number; count: number },\n    private pageFetcher: (\n      params: Omit<OffsetLimitPageParams, \"limit\">\n    ) => Promise<OffsetLimitPage<Item>>\n  ) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  hasNextPage(): boolean {\n    return this.pagination.currentPage < this.pagination.totalPages;\n  }\n\n  hasPreviousPage(): boolean {\n    return this.pagination.currentPage > 1;\n  }\n\n  getNextPage(): Promise<OffsetLimitPage<Item>> {\n    if (!this.hasNextPage()) {\n      throw new Error(\"No next page available\");\n    }\n\n    return this.pageFetcher({\n      page: this.pagination.currentPage + 1,\n    });\n  }\n\n  getPreviousPage(): Promise<OffsetLimitPage<Item>> {\n    if (!this.hasPreviousPage()) {\n      throw new Error(\"No previous page available\");\n    }\n\n    return this.pageFetcher({\n      page: this.pagination.currentPage - 1,\n    });\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: OffsetLimitPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n", "import { PreciseDate } from \"@google-cloud/precise-date\";\nimport { Clock } from \"./clock\";\n\nexport class SimpleClock implements Clock {\n  preciseNow(): [number, number] {\n    const now = new PreciseDate();\n    const nowStruct = now.toStruct();\n\n    return [nowStruct.seconds, nowStruct.nanos];\n  }\n\n  reset() {\n    // do nothing\n  }\n}\n", "const API_NAME = \"clock\";\n\nimport { getGlobal, registerGlobal } from \"../utils/globals\";\nimport type { Clock, ClockTime } from \"./clock\";\nimport { SimpleClock } from \"./simpleClock\";\n\nconst SIMPLE_CLOCK = new SimpleClock();\n\nexport class ClockAPI {\n  private static _instance?: ClockAPI;\n\n  private constructor() {}\n\n  public static getInstance(): ClockAPI {\n    if (!this._instance) {\n      this._instance = new ClockAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalClock(clock: Clock): boolean {\n    return registerGlobal(API_NAME, clock);\n  }\n\n  public preciseNow(): ClockTime {\n    return this.#getClock().preciseNow();\n  }\n\n  public reset(): void {\n    this.#getClock().reset();\n  }\n\n  #getClock(): Clock {\n    return getGlobal(API_NAME) ?? SIMPLE_CLOCK;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ClockAPI } from \"./clock\";\n/** Entrypoint for clock API */\nexport const clock = ClockAPI.getInstance();\n", "import { AttributeValue, Attributes } from \"@opentelemetry/api\";\n\nexport const OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT = 256;\nexport const OTEL_LOG_ATTRIBUTE_COUNT_LIMIT = 256;\nexport const OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT = 1028;\nexport const OTEL_LOG_ATTRIBUTE_VALUE_LENGTH_LIMIT = 1028;\nexport const OTEL_SPAN_EVENT_COUNT_LIMIT = 10;\nexport const OTEL_LINK_COUNT_LIMIT = 2;\nexport const OTEL_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 10;\nexport const OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 10;\nexport const OFFLOAD_IO_PACKET_LENGTH_LIMIT = 128 * 1024;\n\nexport function imposeAttributeLimits(attributes: Attributes): Attributes {\n  const newAttributes: Attributes = {};\n\n  for (const [key, value] of Object.entries(attributes)) {\n    if (calculateAttributeValueLength(value) > OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n      continue;\n    }\n\n    if (Object.keys(newAttributes).length >= OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) {\n      break;\n    }\n\n    newAttributes[key] = value;\n  }\n\n  return newAttributes;\n}\n\nfunction calculateAttributeValueLength(value: AttributeValue | undefined | null): number {\n  if (value === undefined || value === null) {\n    return 0;\n  }\n\n  if (typeof value === \"string\") {\n    return value.length;\n  }\n\n  if (typeof value === \"number\") {\n    return 8;\n  }\n\n  if (typeof value === \"boolean\") {\n    return 4;\n  }\n\n  if (Array.isArray(value)) {\n    return value.reduce((acc: number, v) => acc + calculateAttributeValueLength(v), 0);\n  }\n\n  return 0;\n}\n", "import { Attributes, Span, SpanOptions } from \"@opentelemetry/api\";\nimport { Logger, SeverityNumber } from \"@opentelemetry/api-logs\";\nimport { iconStringForSeverity } from \"../icons\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { flattenAttributes } from \"../utils/flattenAttributes\";\nimport { ClockTime } from \"../clock/clock\";\nimport { clock } from \"../clock-api\";\n\nexport type LogLevel = \"none\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"log\";\n\nexport const logLevels: Array<LogLevel> = [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\nexport type TaskLoggerConfig = {\n  logger: Logger;\n  tracer: TriggerTracer;\n  level: LogLevel;\n};\n\nexport interface TaskLogger {\n  debug(message: string, properties?: Record<string, unknown>): void;\n  log(message: string, properties?: Record<string, unknown>): void;\n  info(message: string, properties?: Record<string, unknown>): void;\n  warn(message: string, properties?: Record<string, unknown>): void;\n  error(message: string, properties?: Record<string, unknown>): void;\n  trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: SpanOptions): Promise<T>;\n}\n\nexport class OtelTaskLogger implements TaskLogger {\n  private readonly _level: number;\n\n  constructor(private readonly _config: TaskLoggerConfig) {\n    this._level = logLevels.indexOf(_config.level);\n  }\n\n  debug(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 4) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"debug\", SeverityNumber.DEBUG, properties);\n  }\n\n  log(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 3) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"log\", SeverityNumber.INFO, properties);\n  }\n\n  info(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 3) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"info\", SeverityNumber.INFO, properties);\n  }\n\n  warn(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 2) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"warn\", SeverityNumber.WARN, properties);\n  }\n\n  error(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 1) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"error\", SeverityNumber.ERROR, properties);\n  }\n\n  #emitLog(\n    message: string,\n    timestamp: ClockTime,\n    severityText: string,\n    severityNumber: SeverityNumber,\n    properties?: Record<string, unknown>\n  ) {\n    let attributes: Attributes = { ...flattenAttributes(safeJsonProcess(properties)) };\n\n    const icon = iconStringForSeverity(severityNumber);\n    if (icon !== undefined) {\n      attributes[SemanticInternalAttributes.STYLE_ICON] = icon;\n    }\n\n    this._config.logger.emit({\n      severityNumber,\n      severityText,\n      body: message,\n      attributes,\n      timestamp,\n    });\n  }\n\n  trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: SpanOptions): Promise<T> {\n    return this._config.tracer.startActiveSpan(name, fn, options);\n  }\n\n  #getTimestampInHrTime(): ClockTime {\n    return clock.preciseNow();\n  }\n}\n\nexport class NoopTaskLogger implements TaskLogger {\n  debug() {}\n  log() {}\n  info() {}\n  warn() {}\n  error() {}\n  trace<T>(name: string, fn: (span: Span) => Promise<T>): Promise<T> {\n    return fn({} as Span);\n  }\n}\n\nfunction safeJsonProcess(value?: Record<string, unknown>): Record<string, unknown> | undefined {\n  try {\n    return JSON.parse(JSON.stringify(value, jsonErrorReplacer));\n  } catch {\n    return value;\n  }\n}\n\nfunction jsonErrorReplacer(key: string, value: unknown) {\n  if (value instanceof Error) {\n    return {\n      name: value.name,\n      message: value.message,\n      stack: value.stack,\n    };\n  }\n\n  return value;\n}\n", "import { NoopTaskLogger, TaskLogger } from \"./taskLogger\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { Span } from \"@opentelemetry/api\";\n\nconst API_NAME = \"logger\";\n\nconst NOOP_TASK_LOGGER = new NoopTaskLogger();\n\nexport class LoggerAPI implements TaskLogger {\n  private static _instance?: LoggerAPI;\n\n  private constructor() {}\n\n  public static getInstance(): LoggerAPI {\n    if (!this._instance) {\n      this._instance = new LoggerAPI();\n    }\n\n    return this._instance;\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public setGlobalTaskLogger(taskLogger: TaskLogger): boolean {\n    return registerGlobal(API_NAME, taskLogger);\n  }\n\n  public debug(message: string, metadata?: Record<string, unknown>) {\n    this.#getTaskLogger().debug(message, metadata);\n  }\n\n  public log(message: string, metadata?: Record<string, unknown>) {\n    this.#getTaskLogger().log(message, metadata);\n  }\n\n  public info(message: string, metadata?: Record<string, unknown>) {\n    this.#getTaskLogger().info(message, metadata);\n  }\n\n  public warn(message: string, metadata?: Record<string, unknown>) {\n    this.#getTaskLogger().warn(message, metadata);\n  }\n\n  public error(message: string, metadata?: Record<string, unknown>) {\n    this.#getTaskLogger().error(message, metadata);\n  }\n\n  public trace<T>(name: string, fn: (span: Span) => Promise<T>): Promise<T> {\n    return this.#getTaskLogger().trace(name, fn);\n  }\n\n  #getTaskLogger(): TaskLogger {\n    return getGlobal(API_NAME) ?? NOOP_TASK_LOGGER;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { LoggerAPI } from \"./logger\";\n/** Entrypoint for logger API */\nexport const logger = LoggerAPI.getInstance();\n", "import { BatchTaskRunExecutionResult, TaskRunContext, TaskRunExecutionResult } from \"../schemas\";\nimport { RuntimeManager } from \"./manager\";\n\nexport class NoopRuntimeManager implements RuntimeManager {\n  disable(): void {\n    // do nothing\n  }\n\n  waitForDuration(ms: number): Promise<void> {\n    return Promise.resolve();\n  }\n\n  waitUntil(date: Date): Promise<void> {\n    return Promise.resolve();\n  }\n\n  waitForTask(params: { id: string; ctx: TaskRunContext }): Promise<TaskRunExecutionResult> {\n    return Promise.resolve({\n      ok: false,\n      id: params.id,\n      error: { type: \"INTERNAL_ERROR\", code: \"CONFIGURED_INCORRECTLY\" },\n    });\n  }\n\n  waitForBatch(params: {\n    id: string;\n    runs: string[];\n    ctx: TaskRunContext;\n  }): Promise<BatchTaskRunExecutionResult> {\n    return Promise.resolve({\n      id: params.id,\n      items: [],\n    });\n  }\n}\n", "import { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\n\nexport class NoopUsageManager implements UsageManager {\n  disable(): void {\n    // Noop\n  }\n\n  start(): UsageMeasurement {\n    return {\n      sample: () => ({ cpuTime: 0, wallTime: 0 }),\n    };\n  }\n\n  stop(measurement: UsageMeasurement): UsageSample {\n    return measurement.sample();\n  }\n\n  pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    return cb();\n  }\n\n  sample(): UsageSample | undefined {\n    return undefined;\n  }\n}\n", "const API_NAME = \"usage\";\n\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport type { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\nimport { NoopUsageManager } from \"./noopUsageManager\";\n\nconst NOOP_USAGE_MANAGER = new NoopUsageManager();\n\nexport class UsageAPI implements UsageManager {\n  private static _instance?: UsageAPI;\n\n  private constructor() {}\n\n  public static getInstance(): UsageAPI {\n    if (!this._instance) {\n      this._instance = new UsageAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalUsageManager(manager: UsageManager): boolean {\n    return registerGlobal(API_NAME, manager);\n  }\n\n  public disable() {\n    this.#getUsageManager().disable();\n    unregisterGlobal(API_NAME);\n  }\n\n  public start(): UsageMeasurement {\n    return this.#getUsageManager().start();\n  }\n\n  public stop(measurement: UsageMeasurement): UsageSample {\n    return this.#getUsageManager().stop(measurement);\n  }\n\n  public pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    return this.#getUsageManager().pauseAsync(cb);\n  }\n\n  public sample(): UsageSample | undefined {\n    return this.#getUsageManager().sample();\n  }\n\n  #getUsageManager(): UsageManager {\n    return getGlobal(API_NAME) ?? NOOP_USAGE_MANAGER;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { UsageAPI } from \"./usage/api\";\n/** Entrypoint for usage API */\nexport const usage = UsageAPI.getInstance();\n", "const API_NAME = \"runtime\";\n\nimport { BatchTaskRunExecutionResult, TaskRunContext, TaskRunExecutionResult } from \"../schemas\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { type RuntimeManager } from \"./manager\";\nimport { NoopRuntimeManager } from \"./noopRuntimeManager\";\nimport { usage } from \"../usage-api\";\n\nconst NOOP_RUNTIME_MANAGER = new NoopRuntimeManager();\n\nexport class RuntimeAPI {\n  private static _instance?: RuntimeAPI;\n\n  private constructor() {}\n\n  public static getInstance(): RuntimeAPI {\n    if (!this._instance) {\n      this._instance = new RuntimeAPI();\n    }\n\n    return this._instance;\n  }\n\n  public waitForDuration(ms: number): Promise<void> {\n    return usage.pauseAsync(() => this.#getRuntimeManager().waitForDuration(ms));\n  }\n\n  public waitUntil(date: Date): Promise<void> {\n    return usage.pauseAsync(() => this.#getRuntimeManager().waitUntil(date));\n  }\n\n  public waitForTask(params: { id: string; ctx: TaskRunContext }): Promise<TaskRunExecutionResult> {\n    return usage.pauseAsync(() => this.#getRuntimeManager().waitForTask(params));\n  }\n\n  public waitForBatch(params: {\n    id: string;\n    runs: string[];\n    ctx: TaskRunContext;\n  }): Promise<BatchTaskRunExecutionResult> {\n    return usage.pauseAsync(() => this.#getRuntimeManager().waitForBatch(params));\n  }\n\n  public setGlobalRuntimeManager(runtimeManager: RuntimeManager): boolean {\n    return registerGlobal(API_NAME, runtimeManager);\n  }\n\n  public disable() {\n    this.#getRuntimeManager().disable();\n    unregisterGlobal(API_NAME);\n  }\n\n  #getRuntimeManager(): RuntimeManager {\n    return getGlobal(API_NAME) ?? NOOP_RUNTIME_MANAGER;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { RuntimeAPI } from \"./runtime\";\n/** Entrypoint for runtime API */\nexport const runtime = RuntimeAPI.getInstance();\n", "export function getEnvVar(name: string): string | undefined {\n  // This could run in a non-Node.js environment (Bun, Deno, CF Worker, etc.), so don't just assume process.env is a thing\n  if (typeof process !== \"undefined\" && typeof process.env === \"object\" && process.env !== null) {\n    return process.env[name];\n  }\n}\n", "import { ApiClient } from \"../apiClient\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { getEnvVar } from \"../utils/getEnv\";\nimport { ApiClientConfiguration } from \"./types\";\n\nconst API_NAME = \"api-client\";\n\nexport class APIClientManagerAPI {\n  private static _instance?: APIClientManagerAPI;\n\n  private constructor() {}\n\n  public static getInstance(): APIClientManagerAPI {\n    if (!this._instance) {\n      this._instance = new APIClientManagerAPI();\n    }\n\n    return this._instance;\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public setGlobalAPIClientConfiguration(config: ApiClientConfiguration): boolean {\n    return registerGlobal(API_NAME, config);\n  }\n\n  get baseURL(): string | undefined {\n    const store = this.#getConfig();\n    return store?.baseURL ?? getEnvVar(\"TRIGGER_API_URL\") ?? \"https://api.trigger.dev\";\n  }\n\n  get accessToken(): string | undefined {\n    const store = this.#getConfig();\n    return store?.secretKey ?? getEnvVar(\"TRIGGER_SECRET_KEY\") ?? getEnvVar(\"TRIGGER_ACCESS_TOKEN\");\n  }\n\n  get client(): ApiClient | undefined {\n    if (!this.baseURL || !this.accessToken) {\n      return undefined;\n    }\n\n    return new ApiClient(this.baseURL, this.accessToken);\n  }\n\n  #getConfig(): ApiClientConfiguration | undefined {\n    return getGlobal(API_NAME);\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { APIClientManagerAPI } from \"./apiClientManager\";\n/** Entrypoint for logger API */\nexport const apiClientManager = APIClientManagerAPI.getInstance();\n\nexport type { ApiClientConfiguration } from \"./apiClientManager/types\";\n", "import { TaskFileMetadata, TaskMetadataWithFilePath } from \"../schemas\";\nimport { TaskMetadataWithFunctions } from \"../types\";\nimport { TaskCatalog } from \"./catalog\";\n\nexport class NoopTaskCatalog implements TaskCatalog {\n  registerTaskMetadata(task: TaskMetadataWithFunctions): void {\n    // noop\n  }\n\n  registerTaskFileMetadata(id: string, metadata: TaskFileMetadata): void {\n    // noop\n  }\n\n  updateTaskMetadata(id: string, updates: Partial<TaskMetadataWithFunctions>): void {\n    // noop\n  }\n\n  getAllTaskMetadata(): Array<TaskMetadataWithFilePath> {\n    return [];\n  }\n\n  getTaskMetadata(id: string): TaskMetadataWithFilePath | undefined {\n    return undefined;\n  }\n\n  getTask(id: string): TaskMetadataWithFunctions | undefined {\n    return undefined;\n  }\n\n  taskExists(id: string): boolean {\n    return false;\n  }\n\n  disable() {\n    // noop\n  }\n}\n", "const API_NAME = \"task-catalog\";\n\nimport { TaskFileMetadata, TaskMetadataWithFilePath } from \"../schemas\";\nimport { TaskMetadataWithFunctions } from \"../types\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { type TaskCatalog } from \"./catalog\";\nimport { NoopTaskCatalog } from \"./noopTaskCatalog\";\n\nconst NOOP_TASK_CATALOG = new NoopTaskCatalog();\n\nexport class TaskCatalogAPI {\n  private static _instance?: TaskCatalogAPI;\n\n  private constructor() {}\n\n  public static getInstance(): TaskCatalogAPI {\n    if (!this._instance) {\n      this._instance = new TaskCatalogAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalTaskCatalog(taskCatalog: TaskCatalog): boolean {\n    return registerGlobal(API_NAME, taskCatalog);\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public registerTaskMetadata(task: TaskMetadataWithFunctions): void {\n    this.#getCatalog().registerTaskMetadata(task);\n  }\n\n  public updateTaskMetadata(id: string, updates: Partial<TaskMetadataWithFunctions>): void {\n    this.#getCatalog().updateTaskMetadata(id, updates);\n  }\n\n  public registerTaskFileMetadata(id: string, metadata: TaskFileMetadata): void {\n    this.#getCatalog().registerTaskFileMetadata(id, metadata);\n  }\n\n  public getAllTaskMetadata(): Array<TaskMetadataWithFilePath> {\n    return this.#getCatalog().getAllTaskMetadata();\n  }\n\n  public getTaskMetadata(id: string): TaskMetadataWithFilePath | undefined {\n    return this.#getCatalog().getTaskMetadata(id);\n  }\n\n  public getTask(id: string): TaskMetadataWithFunctions | undefined {\n    return this.#getCatalog().getTask(id);\n  }\n\n  public taskExists(id: string): boolean {\n    return this.#getCatalog().taskExists(id);\n  }\n\n  #getCatalog(): TaskCatalog {\n    return getGlobal(API_NAME) ?? NOOP_TASK_CATALOG;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TaskCatalogAPI } from \"./task-catalog\";\n/** Entrypoint for runtime API */\nexport const taskCatalog = TaskCatalogAPI.getInstance();\n", "import humanizeDuration, { Unit } from \"humanize-duration\";\n\nfunction dateDifference(date1: Date, date2: Date) {\n  return Math.abs(date1.getTime() - date2.getTime());\n}\n\ntype DurationOptions = {\n  style?: \"long\" | \"short\";\n  maxDecimalPoints?: number;\n  units?: Unit[];\n};\n\nexport function formatDuration(\n  start?: Date | null,\n  end?: Date | null,\n  options?: DurationOptions\n): string {\n  if (!start || !end) {\n    return \"–\";\n  }\n\n  return formatDurationMilliseconds(dateDifference(start, end), options);\n}\n\nexport function nanosecondsToMilliseconds(nanoseconds: number): number {\n  return nanoseconds / 1_000_000;\n}\n\nexport function millisecondsToNanoseconds(milliseconds: number): number {\n  return milliseconds * 1_000_000;\n}\n\nexport function formatDurationNanoseconds(nanoseconds: number, options?: DurationOptions): string {\n  return formatDurationMilliseconds(nanosecondsToMilliseconds(nanoseconds), options);\n}\n\nconst aboveOneSecondUnits = [\"d\", \"h\", \"m\", \"s\"] as Unit[];\nconst belowOneSecondUnits = [\"ms\"] as Unit[];\n\nexport function formatDurationMilliseconds(\n  milliseconds: number,\n  options?: DurationOptions\n): string {\n  let duration = humanizeDuration(milliseconds, {\n    units: options?.units\n      ? options.units\n      : milliseconds < 1000\n      ? belowOneSecondUnits\n      : aboveOneSecondUnits,\n    maxDecimalPoints: options?.maxDecimalPoints ?? 1,\n    largest: 2,\n  });\n\n  if (!options) {\n    return duration;\n  }\n\n  switch (options.style) {\n    case \"short\":\n      duration = duration.replace(\" milliseconds\", \"ms\");\n      duration = duration.replace(\" millisecond\", \"ms\");\n      duration = duration.replace(\" seconds\", \"s\");\n      duration = duration.replace(\" second\", \"s\");\n      duration = duration.replace(\" minutes\", \"m\");\n      duration = duration.replace(\" minute\", \"m\");\n      duration = duration.replace(\" hours\", \"h\");\n      duration = duration.replace(\" hour\", \"h\");\n      duration = duration.replace(\" days\", \"d\");\n      duration = duration.replace(\" day\", \"d\");\n      duration = duration.replace(\" weeks\", \"w\");\n      duration = duration.replace(\" week\", \"w\");\n      duration = duration.replace(\" months\", \"mo\");\n      duration = duration.replace(\" month\", \"mo\");\n      duration = duration.replace(\" years\", \"y\");\n      duration = duration.replace(\" year\", \"y\");\n  }\n\n  return duration;\n}\n\nexport function formatDurationInDays(milliseconds: number): string {\n  let duration = humanizeDuration(milliseconds, {\n    maxDecimalPoints: 0,\n    largest: 2,\n    units: [\"d\"],\n  });\n\n  return duration;\n}\n", "import {\n  Context,\n  SpanOptions,\n  SpanStatusCode,\n  context,\n  propagation,\n  trace,\n  type Span,\n  type Tracer,\n} from \"@opentelemetry/api\";\nimport { Logger, logs } from \"@opentelemetry/api-logs\";\nimport { SemanticInternalAttributes } from \"./semanticInternalAttributes\";\nimport { clock } from \"./clock-api\";\nimport { usage } from \"./usage-api\";\nimport { taskContext } from \"./task-context-api\";\n\nexport type TriggerTracerConfig =\n  | {\n      name: string;\n      version: string;\n    }\n  | {\n      tracer: Tracer;\n      logger: Logger;\n    };\n\nexport class TriggerTracer {\n  constructor(private readonly _config: TriggerTracerConfig) {}\n\n  private _tracer: Tracer | undefined;\n  private get tracer(): Tracer {\n    if (!this._tracer) {\n      if (\"tracer\" in this._config) return this._config.tracer;\n\n      this._tracer = trace.getTracer(this._config.name, this._config.version);\n    }\n\n    return this._tracer;\n  }\n\n  private _logger: Logger | undefined;\n  private get logger(): Logger {\n    if (!this._logger) {\n      if (\"logger\" in this._config) return this._config.logger;\n\n      this._logger = logs.getLogger(this._config.name, this._config.version);\n    }\n\n    return this._logger;\n  }\n\n  extractContext(traceContext?: Record<string, unknown>) {\n    return propagation.extract(context.active(), traceContext ?? {});\n  }\n\n  startActiveSpan<T>(\n    name: string,\n    fn: (span: Span) => Promise<T>,\n    options?: SpanOptions,\n    ctx?: Context\n  ): Promise<T> {\n    const parentContext = ctx ?? context.active();\n\n    const attributes = options?.attributes ?? {};\n\n    return this.tracer.startActiveSpan(\n      name,\n      {\n        ...options,\n        attributes,\n        startTime: clock.preciseNow(),\n      },\n      parentContext,\n      async (span) => {\n        if (taskContext.ctx) {\n          this.tracer\n            .startSpan(\n              name,\n              {\n                ...options,\n                attributes: {\n                  ...attributes,\n                  [SemanticInternalAttributes.SPAN_PARTIAL]: true,\n                  [SemanticInternalAttributes.SPAN_ID]: span.spanContext().spanId,\n                },\n              },\n              parentContext\n            )\n            .end();\n        }\n\n        const usageMeasurement = usage.start();\n\n        try {\n          return await fn(span);\n        } catch (e) {\n          if (typeof e === \"string\" || e instanceof Error) {\n            span.recordException(e);\n          }\n\n          span.setStatus({ code: SpanStatusCode.ERROR });\n\n          throw e;\n        } finally {\n          if (taskContext.ctx) {\n            const usageSample = usage.stop(usageMeasurement);\n            const machine = taskContext.ctx.machine;\n\n            span.setAttributes({\n              [SemanticInternalAttributes.USAGE_DURATION_MS]: usageSample.cpuTime,\n              [SemanticInternalAttributes.USAGE_COST_IN_CENTS]: machine?.centsPerMs\n                ? usageSample.cpuTime * machine.centsPerMs\n                : 0,\n            });\n          }\n\n          span.end(clock.preciseNow());\n        }\n      }\n    );\n  }\n\n  startSpan(name: string, options?: SpanOptions, ctx?: Context) {\n    const parentContext = ctx ?? context.active();\n\n    const attributes = options?.attributes ?? {};\n\n    const span = this.tracer.startSpan(name, options, ctx);\n\n    this.tracer\n      .startSpan(\n        name,\n        {\n          ...options,\n          attributes: {\n            ...attributes,\n            [SemanticInternalAttributes.SPAN_PARTIAL]: true,\n            [SemanticInternalAttributes.SPAN_ID]: span.spanContext().spanId,\n          },\n        },\n        parentContext\n      )\n      .end();\n\n    return span;\n  }\n}\n", "import { EventFilter } from \"./schemas/eventFilter\";\n\n// EventFilter is a recursive type, where the keys are strings and the values are an array of strings, numbers, booleans, or objects.\n// If the values of the array are strings, numbers, or booleans, than we are matching against the value of the payload.\n// If the values of the array are objects, then we are doing content filtering\n// An example would be [{ $endsWith: \".png\" }, { $startsWith: \"images/\" } ]\nexport function eventFilterMatches(payload: any, filter: EventFilter): boolean {\n  if (payload === undefined || payload === null) {\n    if (Object.entries(filter).length === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  for (const [patternKey, patternValue] of Object.entries(filter)) {\n    const payloadValue = payload[patternKey];\n\n    if (Array.isArray(patternValue)) {\n      if (patternValue.length === 0) {\n        continue;\n      }\n\n      // Check to see if all the items in the array are a string\n      if ((patternValue as unknown[]).every((item) => typeof item === \"string\")) {\n        if ((patternValue as string[]).includes(payloadValue)) {\n          continue;\n        }\n\n        return false;\n      }\n\n      // Check to see if all the items in the array are a number\n      if ((patternValue as unknown[]).every((item) => typeof item === \"number\")) {\n        if ((patternValue as number[]).includes(payloadValue)) {\n          continue;\n        }\n\n        return false;\n      }\n\n      // Check to see if all the items in the array are a boolean\n      if ((patternValue as unknown[]).every((item) => typeof item === \"boolean\")) {\n        if ((patternValue as boolean[]).includes(payloadValue)) {\n          continue;\n        }\n\n        return false;\n      }\n\n      // Now we know that all the items in the array are objects\n      const objectArray = patternValue as Exclude<\n        typeof patternValue,\n        number[] | string[] | boolean[]\n      >;\n\n      if (!contentFiltersMatches(payloadValue, objectArray)) {\n        return false;\n      }\n\n      continue;\n    } else if (typeof patternValue === \"object\") {\n      if (Array.isArray(payloadValue)) {\n        if (!payloadValue.some((item) => eventFilterMatches(item, patternValue))) {\n          return false;\n        }\n      } else {\n        if (!eventFilterMatches(payloadValue, patternValue)) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\ntype ContentFilters = Exclude<EventFilter[string], EventFilter | string[] | number[] | boolean[]>;\n\nfunction contentFiltersMatches(actualValue: any, contentFilters: ContentFilters): boolean {\n  for (const contentFilter of contentFilters) {\n    if (typeof contentFilter === \"object\") {\n      const [key, value] = Object.entries(contentFilter)[0];\n\n      if (!contentFilterMatches(actualValue, contentFilter)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction contentFilterMatches(actualValue: any, contentFilter: ContentFilters[number]): boolean {\n  if (\"$endsWith\" in contentFilter) {\n    if (typeof actualValue !== \"string\") {\n      return false;\n    }\n\n    return actualValue.endsWith(contentFilter.$endsWith);\n  }\n\n  if (\"$startsWith\" in contentFilter) {\n    if (typeof actualValue !== \"string\") {\n      return false;\n    }\n\n    return actualValue.startsWith(contentFilter.$startsWith);\n  }\n\n  if (\"$anythingBut\" in contentFilter) {\n    if (Array.isArray(contentFilter.$anythingBut)) {\n      if ((contentFilter.$anythingBut as any[]).includes(actualValue)) {\n        return false;\n      }\n    }\n\n    if (contentFilter.$anythingBut === actualValue) {\n      return false;\n    }\n\n    return true;\n  }\n\n  if (\"$exists\" in contentFilter) {\n    if (contentFilter.$exists) {\n      return actualValue !== undefined;\n    }\n\n    return actualValue === undefined;\n  }\n\n  if (\"$gt\" in contentFilter) {\n    if (typeof actualValue !== \"number\") {\n      return false;\n    }\n\n    return actualValue > contentFilter.$gt;\n  }\n\n  if (\"$lt\" in contentFilter) {\n    if (typeof actualValue !== \"number\") {\n      return false;\n    }\n\n    return actualValue < contentFilter.$lt;\n  }\n\n  if (\"$gte\" in contentFilter) {\n    if (typeof actualValue !== \"number\") {\n      return false;\n    }\n\n    return actualValue >= contentFilter.$gte;\n  }\n\n  if (\"$lte\" in contentFilter) {\n    if (typeof actualValue !== \"number\") {\n      return false;\n    }\n\n    return actualValue <= contentFilter.$lte;\n  }\n\n  if (\"$between\" in contentFilter) {\n    if (typeof actualValue !== \"number\") {\n      return false;\n    }\n\n    return actualValue >= contentFilter.$between[0] && actualValue <= contentFilter.$between[1];\n  }\n\n  if (\"$includes\" in contentFilter) {\n    if (Array.isArray(actualValue)) {\n      return actualValue.includes(contentFilter.$includes);\n    }\n\n    return false;\n  }\n\n  // Use localCompare\n  if (\"$ignoreCaseEquals\" in contentFilter) {\n    if (typeof actualValue !== \"string\") {\n      return false;\n    }\n\n    return (\n      actualValue.localeCompare(contentFilter.$ignoreCaseEquals, undefined, {\n        sensitivity: \"accent\",\n      }) === 0\n    );\n  }\n\n  if (\"$isNull\" in contentFilter) {\n    if (contentFilter.$isNull) {\n      return actualValue === null;\n    }\n\n    return actualValue !== null;\n  }\n\n  if (\"$not\" in contentFilter) {\n    if (Array.isArray(actualValue)) {\n      return !actualValue.includes(contentFilter.$not);\n    } else if (typeof actualValue === 'number' || typeof actualValue === 'boolean' || typeof actualValue === 'string') {\n      return actualValue !== contentFilter.$not;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n", "export function omit<T extends Record<string, any>, K extends keyof T>(\n  obj: T,\n  ...keys: K[]\n): Omit<T, K> {\n  const result: Record<string, any> = {};\n\n  for (const key in obj) {\n    if (!keys.includes(key as unknown as K)) {\n      result[key] = obj[key];\n    }\n  }\n\n  return result as Omit<T, K>;\n}\n", "import { dependencies } from \"../../../package.json\"\n\nexport function detectDependencyVersion(dependency: string): string | undefined {\n  return (dependencies as Record<string, string>)[dependency]\n}", "import { Attributes, Span } from \"@opentelemetry/api\";\nimport { OFFLOAD_IO_PACKET_LENGTH_LIMIT, imposeAttributeLimits } from \"../limits\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { flattenAttributes } from \"./flattenAttributes\";\nimport { apiClientManager } from \"../apiClientManager-api\";\n\nexport type IOPacket = {\n  data?: string | undefined;\n  dataType: string;\n};\n\nexport async function parsePacket(value: IOPacket): Promise<any> {\n  if (!value.data) {\n    return undefined;\n  }\n\n  switch (value.dataType) {\n    case \"application/json\":\n      return JSON.parse(value.data);\n    case \"application/super+json\":\n      const { parse } = await loadSuperJSON();\n\n      return parse(value.data);\n    case \"text/plain\":\n      return value.data;\n    case \"application/store\":\n      throw new Error(\n        `Cannot parse an application/store packet (${value.data}). Needs to be imported first.`\n      );\n    default:\n      return value.data;\n  }\n}\n\nexport async function stringifyIO(value: any): Promise<IOPacket> {\n  if (value === undefined) {\n    return { dataType: \"application/json\" };\n  }\n\n  if (typeof value === \"string\") {\n    return { data: value, dataType: \"text/plain\" };\n  }\n\n  try {\n    const { stringify } = await loadSuperJSON();\n    const data = stringify(value);\n\n    return { data, dataType: \"application/super+json\" };\n  } catch {\n    return { data: value, dataType: \"application/json\" };\n  }\n}\n\nexport async function conditionallyExportPacket(\n  packet: IOPacket,\n  pathPrefix: string,\n  tracer?: TriggerTracer\n): Promise<IOPacket> {\n  if (apiClientManager.client) {\n    const { needsOffloading, size } = packetRequiresOffloading(packet);\n\n    if (needsOffloading) {\n      if (!tracer) {\n        return await exportPacket(packet, pathPrefix);\n      } else {\n        const result = await tracer.startActiveSpan(\n          \"store.uploadOutput\",\n          async (span) => {\n            return await exportPacket(packet, pathPrefix);\n          },\n          {\n            attributes: {\n              byteLength: size,\n              [SemanticInternalAttributes.STYLE_ICON]: \"cloud-upload\",\n            },\n          }\n        );\n\n        return result ?? packet;\n      }\n    }\n  }\n\n  return packet;\n}\n\nexport function packetRequiresOffloading(\n  packet: IOPacket,\n  lengthLimit?: number\n): {\n  needsOffloading: boolean;\n  size: number;\n} {\n  if (!packet.data) {\n    return {\n      needsOffloading: false,\n      size: 0,\n    };\n  }\n\n  const byteSize = Buffer.byteLength(packet.data, \"utf8\");\n\n  return {\n    needsOffloading: byteSize >= (lengthLimit ?? OFFLOAD_IO_PACKET_LENGTH_LIMIT),\n    size: byteSize,\n  };\n}\n\nasync function exportPacket(packet: IOPacket, pathPrefix: string): Promise<IOPacket> {\n  // Offload the output\n  const filename = `${pathPrefix}.${getPacketExtension(packet.dataType)}`;\n\n  const presignedResponse = await apiClientManager.client!.createUploadPayloadUrl(filename);\n\n  const uploadResponse = await fetch(presignedResponse.presignedUrl, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": packet.dataType,\n    },\n    body: packet.data,\n  });\n\n  if (!uploadResponse.ok) {\n    throw new Error(\n      `Failed to upload output to ${presignedResponse.presignedUrl}: ${uploadResponse.statusText}`\n    );\n  }\n\n  return {\n    data: filename,\n    dataType: \"application/store\",\n  };\n}\n\nexport async function conditionallyImportPacket(\n  packet: IOPacket,\n  tracer?: TriggerTracer\n): Promise<IOPacket> {\n  if (packet.dataType !== \"application/store\") {\n    return packet;\n  }\n\n  if (!tracer) {\n    return await importPacket(packet);\n  } else {\n    const result = await tracer.startActiveSpan(\n      \"store.downloadPayload\",\n      async (span) => {\n        return await importPacket(packet, span);\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"cloud-download\",\n        },\n      }\n    );\n\n    return result ?? packet;\n  }\n}\n\nasync function importPacket(packet: IOPacket, span?: Span): Promise<IOPacket> {\n  if (!packet.data) {\n    return packet;\n  }\n\n  if (!apiClientManager.client) {\n    return packet;\n  }\n\n  const presignedResponse = await apiClientManager.client.getPayloadUrl(packet.data);\n\n  const response = await fetch(presignedResponse.presignedUrl);\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to import packet ${presignedResponse.presignedUrl}: ${response.statusText}`\n    );\n  }\n\n  const data = await response.text();\n\n  span?.setAttribute(\"size\", Buffer.byteLength(data, \"utf8\"));\n\n  return {\n    data,\n    dataType: response.headers.get(\"content-type\") ?? \"application/json\",\n  };\n}\n\nexport async function createPacketAttributes(\n  packet: IOPacket,\n  dataKey: string,\n  dataTypeKey: string\n): Promise<Attributes | undefined> {\n  if (!packet.data) {\n    return;\n  }\n\n  switch (packet.dataType) {\n    case \"application/json\":\n      return {\n        ...flattenAttributes(packet, dataKey),\n        [dataTypeKey]: packet.dataType,\n      };\n    case \"application/super+json\":\n      const { parse } = await loadSuperJSON();\n\n      if (typeof packet.data === \"undefined\" || packet.data === null) {\n        return;\n      }\n\n      try {\n        const parsed = parse(packet.data) as any;\n        const jsonified = JSON.parse(JSON.stringify(parsed, safeReplacer));\n\n        const result = {\n          ...flattenAttributes(jsonified, dataKey),\n          [dataTypeKey]: \"application/json\",\n        };\n\n        return result;\n      } catch (e) {\n        return;\n      }\n\n    case \"application/store\":\n      return {\n        [dataKey]: packet.data,\n        [dataTypeKey]: packet.dataType,\n      };\n    case \"text/plain\":\n      return {\n        [dataKey]: packet.data,\n        [dataTypeKey]: packet.dataType,\n      };\n    default:\n      return;\n  }\n}\n\nexport async function createPacketAttributesAsJson(\n  data: any,\n  dataType: string\n): Promise<Attributes> {\n  if (\n    typeof data === \"string\" ||\n    typeof data === \"number\" ||\n    typeof data === \"boolean\" ||\n    data === null ||\n    data === undefined\n  ) {\n    return data;\n  }\n\n  switch (dataType) {\n    case \"application/json\":\n      return imposeAttributeLimits(flattenAttributes(data, undefined));\n    case \"application/super+json\":\n      const { deserialize } = await loadSuperJSON();\n\n      const deserialized = deserialize(data) as any;\n      const jsonify = safeJsonParse(JSON.stringify(deserialized, safeReplacer));\n\n      return imposeAttributeLimits(flattenAttributes(jsonify, undefined));\n    case \"application/store\":\n      return data;\n    default:\n      return {};\n  }\n}\n\nexport async function prettyPrintPacket(rawData: any, dataType?: string): Promise<string> {\n  if (rawData === undefined) {\n    return \"\";\n  }\n\n  if (dataType === \"application/super+json\") {\n    if (typeof rawData === \"string\") {\n      rawData = safeJsonParse(rawData);\n    }\n    const { deserialize } = await loadSuperJSON();\n\n    return await prettyPrintPacket(deserialize(rawData), \"application/json\");\n  }\n\n  if (dataType === \"application/json\") {\n    if (typeof rawData === \"string\") {\n      rawData = safeJsonParse(rawData);\n    }\n    return JSON.stringify(rawData, safeReplacer, 2);\n  }\n\n  if (typeof rawData === \"string\") {\n    return rawData;\n  }\n\n  return JSON.stringify(rawData, safeReplacer, 2);\n}\n\nfunction safeReplacer(key: string, value: any) {\n  // If it is a BigInt\n  if (typeof value === \"bigint\") {\n    return value.toString(); // Convert to string\n  }\n\n  // if it is a Regex\n  if (value instanceof RegExp) {\n    return value.toString(); // Convert to string\n  }\n\n  // if it is a Set\n  if (value instanceof Set) {\n    return Array.from(value); // Convert to array\n  }\n\n  // if it is a Map, convert it to an object\n  if (value instanceof Map) {\n    const obj: Record<string, any> = {};\n    value.forEach((v, k) => {\n      obj[k] = v;\n    });\n    return obj;\n  }\n\n  return value; // Otherwise return the value as is\n}\n\nfunction getPacketExtension(outputType: string): string {\n  switch (outputType) {\n    case \"application/json\":\n      return \"json\";\n    case \"application/super+json\":\n      return \"json\";\n    case \"text/plain\":\n      return \"txt\";\n    default:\n      return \"txt\";\n  }\n}\n\nasync function loadSuperJSON(): Promise<typeof import(\"superjson\")> {\n  return await import(\"superjson\");\n}\n\nfunction safeJsonParse(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return;\n  }\n}\n\nexport async function replaceSuperJsonPayload(original: string, newPayload: string) {\n  const superjson = await loadSuperJSON();\n  const originalObject = superjson.parse(original);\n  const { meta } = superjson.serialize(originalObject);\n\n  const newSuperJson = {\n    json: JSON.parse(newPayload) as any,\n    meta,\n  };\n\n  return superjson.deserialize(newSuperJson);\n}\n", "import { SpanKind } from \"@opentelemetry/api\";\nimport { ConsoleInterceptor } from \"../consoleInterceptor\";\nimport { parseError, sanitizeError } from \"../errors\";\nimport { TracingSDK, recordSpanException } from \"../otel\";\nimport {\n  BackgroundWorkerProperties,\n  Config,\n  TaskRunContext,\n  TaskRunErrorCodes,\n  TaskRunExecution,\n  TaskRunExecutionResult,\n  TaskRunExecutionRetry,\n} from \"../schemas\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { taskContext } from \"../task-context-api\";\nimport { TriggerTracer } from \"../tracer\";\nimport { HandleErrorFunction, ProjectConfig, TaskMetadataWithFunctions } from \"../types\";\nimport {\n  conditionallyExportPacket,\n  conditionallyImportPacket,\n  createPacketAttributes,\n  parsePacket,\n  stringifyIO,\n} from \"../utils/ioSerialization\";\nimport { calculateNextRetryDelay } from \"../utils/retries\";\nimport { accessoryAttributes } from \"../utils/styleAttributes\";\nimport { UsageMeasurement } from \"../usage/types\";\nimport { ApiError, RateLimitError } from \"../apiClient/errors\";\n\nexport type TaskExecutorOptions = {\n  tracingSDK: TracingSDK;\n  tracer: TriggerTracer;\n  consoleInterceptor: ConsoleInterceptor;\n  projectConfig: Config;\n  importedConfig: ProjectConfig | undefined;\n  handleErrorFn: HandleErrorFunction | undefined;\n};\n\nexport class TaskExecutor {\n  private _tracingSDK: TracingSDK;\n  private _tracer: TriggerTracer;\n  private _consoleInterceptor: ConsoleInterceptor;\n  private _config: Config;\n  private _importedConfig: ProjectConfig | undefined;\n  private _handleErrorFn: HandleErrorFunction | undefined;\n\n  constructor(\n    public task: TaskMetadataWithFunctions,\n    options: TaskExecutorOptions\n  ) {\n    this._tracingSDK = options.tracingSDK;\n    this._tracer = options.tracer;\n    this._consoleInterceptor = options.consoleInterceptor;\n    this._config = options.projectConfig;\n    this._importedConfig = options.importedConfig;\n    this._handleErrorFn = options.handleErrorFn;\n  }\n\n  async execute(\n    execution: TaskRunExecution,\n    worker: BackgroundWorkerProperties,\n    traceContext: Record<string, unknown>,\n    usage: UsageMeasurement\n  ): Promise<{ result: TaskRunExecutionResult }> {\n    const ctx = TaskRunContext.parse(execution);\n    const attemptMessage = `Attempt ${execution.attempt.number}`;\n\n    const originalPacket = {\n      data: execution.run.payload,\n      dataType: execution.run.payloadType,\n    };\n\n    taskContext.setGlobalTaskContext({\n      ctx,\n      worker,\n    });\n\n    this._tracingSDK.asyncResourceDetector.resolveWithAttributes({\n      ...taskContext.attributes,\n      [SemanticInternalAttributes.SDK_VERSION]: this.task.packageVersion,\n      [SemanticInternalAttributes.SDK_LANGUAGE]: \"typescript\",\n    });\n\n    const result = await this._tracer.startActiveSpan(\n      attemptMessage,\n      async (span) => {\n        return await this._consoleInterceptor.intercept(console, async () => {\n          let parsedPayload: any;\n          let initOutput: any;\n\n          try {\n            const payloadPacket = await conditionallyImportPacket(originalPacket, this._tracer);\n\n            parsedPayload = await parsePacket(payloadPacket);\n\n            if (execution.attempt.number === 1) {\n              await this.#callOnStartFunctions(parsedPayload, ctx);\n            }\n\n            initOutput = await this.#callInitFunctions(parsedPayload, ctx);\n\n            const output = await this.#callRun(parsedPayload, ctx, initOutput);\n\n            await this.#callOnSuccessFunctions(parsedPayload, output, ctx, initOutput);\n\n            try {\n              const stringifiedOutput = await stringifyIO(output);\n\n              const finalOutput = await conditionallyExportPacket(\n                stringifiedOutput,\n                `${execution.attempt.id}/output`,\n                this._tracer\n              );\n\n              const attributes = await createPacketAttributes(\n                finalOutput,\n                SemanticInternalAttributes.OUTPUT,\n                SemanticInternalAttributes.OUTPUT_TYPE\n              );\n\n              if (attributes) {\n                span.setAttributes(attributes);\n              }\n\n              return {\n                ok: true,\n                id: execution.run.id,\n                output: finalOutput.data,\n                outputType: finalOutput.dataType,\n              } satisfies TaskRunExecutionResult;\n            } catch (stringifyError) {\n              recordSpanException(span, stringifyError);\n\n              return {\n                ok: false,\n                id: execution.run.id,\n                error: {\n                  type: \"INTERNAL_ERROR\",\n                  code: TaskRunErrorCodes.TASK_OUTPUT_ERROR,\n                  message:\n                    stringifyError instanceof Error\n                      ? stringifyError.message\n                      : typeof stringifyError === \"string\"\n                      ? stringifyError\n                      : undefined,\n                },\n              } satisfies TaskRunExecutionResult;\n            }\n          } catch (runError) {\n            try {\n              const handleErrorResult = await this.#handleError(\n                execution,\n                runError,\n                parsedPayload,\n                ctx\n              );\n\n              recordSpanException(span, handleErrorResult.error ?? runError);\n\n              if (handleErrorResult.status !== \"retry\") {\n                await this.#callOnFailureFunctions(\n                  parsedPayload,\n                  handleErrorResult.error ?? runError,\n                  ctx,\n                  initOutput\n                );\n              }\n\n              return {\n                id: execution.run.id,\n                ok: false,\n                error: sanitizeError(\n                  handleErrorResult.error\n                    ? parseError(handleErrorResult.error)\n                    : parseError(runError)\n                ),\n                retry: handleErrorResult.status === \"retry\" ? handleErrorResult.retry : undefined,\n                skippedRetrying: handleErrorResult.status === \"skipped\",\n              } satisfies TaskRunExecutionResult;\n            } catch (handleErrorError) {\n              recordSpanException(span, handleErrorError);\n\n              return {\n                ok: false,\n                id: execution.run.id,\n                error: {\n                  type: \"INTERNAL_ERROR\",\n                  code: TaskRunErrorCodes.HANDLE_ERROR_ERROR,\n                  message:\n                    handleErrorError instanceof Error\n                      ? handleErrorError.message\n                      : typeof handleErrorError === \"string\"\n                      ? handleErrorError\n                      : undefined,\n                },\n              } satisfies TaskRunExecutionResult;\n            }\n          } finally {\n            await this.#callTaskCleanup(parsedPayload, ctx, initOutput);\n          }\n        });\n      },\n      {\n        kind: SpanKind.CONSUMER,\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"attempt\",\n          ...accessoryAttributes({\n            items: [\n              {\n                text: ctx.task.filePath,\n              },\n              {\n                text: `${ctx.task.exportName}.run()`,\n              },\n            ],\n            style: \"codepath\",\n          }),\n        },\n      },\n      this._tracer.extractContext(traceContext)\n    );\n\n    return { result };\n  }\n\n  async #callRun(payload: unknown, ctx: TaskRunContext, init: unknown) {\n    const runFn = this.task.fns.run;\n    const middlewareFn = this.task.fns.middleware;\n\n    if (!runFn) {\n      throw new Error(\"Task does not have a run function\");\n    }\n\n    if (!middlewareFn) {\n      return runFn(payload, { ctx, init });\n    }\n\n    return middlewareFn(payload, { ctx, next: async () => runFn(payload, { ctx, init }) });\n  }\n\n  async #callInitFunctions(payload: unknown, ctx: TaskRunContext) {\n    await this.#callConfigInit(payload, ctx);\n\n    const initFn = this.task.fns.init;\n\n    if (!initFn) {\n      return {};\n    }\n\n    return this._tracer.startActiveSpan(\n      \"init\",\n      async (span) => {\n        return await initFn(payload, { ctx });\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"function\",\n        },\n      }\n    );\n  }\n\n  async #callConfigInit(payload: unknown, ctx: TaskRunContext) {\n    const initFn = this._importedConfig?.init;\n\n    if (!initFn) {\n      return {};\n    }\n\n    return this._tracer.startActiveSpan(\n      \"config.init\",\n      async (span) => {\n        return await initFn(payload, { ctx });\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"function\",\n        },\n      }\n    );\n  }\n\n  async #callOnSuccessFunctions(\n    payload: unknown,\n    output: any,\n    ctx: TaskRunContext,\n    initOutput: any\n  ) {\n    await this.#callOnSuccessFunction(\n      this.task.fns.onSuccess,\n      \"task.onSuccess\",\n      payload,\n      output,\n      ctx,\n      initOutput\n    );\n\n    await this.#callOnSuccessFunction(\n      this._importedConfig?.onSuccess,\n      \"config.onSuccess\",\n      payload,\n      output,\n      ctx,\n      initOutput\n    );\n  }\n\n  async #callOnSuccessFunction(\n    onSuccessFn: TaskMetadataWithFunctions[\"fns\"][\"onSuccess\"],\n    name: string,\n    payload: unknown,\n    output: any,\n    ctx: TaskRunContext,\n    initOutput: any\n  ) {\n    if (!onSuccessFn) {\n      return;\n    }\n\n    try {\n      await this._tracer.startActiveSpan(\n        name,\n        async (span) => {\n          return await onSuccessFn(payload, output, { ctx, init: initOutput });\n        },\n        {\n          attributes: {\n            [SemanticInternalAttributes.STYLE_ICON]: \"function\",\n          },\n        }\n      );\n    } catch {\n      // Ignore errors from onSuccess functions\n    }\n  }\n\n  async #callOnFailureFunctions(\n    payload: unknown,\n    error: unknown,\n    ctx: TaskRunContext,\n    initOutput: any\n  ) {\n    await this.#callOnFailureFunction(\n      this.task.fns.onFailure,\n      \"task.onFailure\",\n      payload,\n      error,\n      ctx,\n      initOutput\n    );\n\n    await this.#callOnFailureFunction(\n      this._importedConfig?.onFailure,\n      \"config.onFailure\",\n      payload,\n      error,\n      ctx,\n      initOutput\n    );\n  }\n\n  async #callOnFailureFunction(\n    onFailureFn: TaskMetadataWithFunctions[\"fns\"][\"onFailure\"],\n    name: string,\n    payload: unknown,\n    error: unknown,\n    ctx: TaskRunContext,\n    initOutput: any\n  ) {\n    if (!onFailureFn) {\n      return;\n    }\n\n    try {\n      return await this._tracer.startActiveSpan(\n        name,\n        async (span) => {\n          return await onFailureFn(payload, error, { ctx, init: initOutput });\n        },\n        {\n          attributes: {\n            [SemanticInternalAttributes.STYLE_ICON]: \"function\",\n          },\n        }\n      );\n    } catch (e) {\n      // Ignore errors from onFailure functions\n    }\n  }\n\n  async #callOnStartFunctions(payload: unknown, ctx: TaskRunContext) {\n    await this.#callOnStartFunction(\n      this._importedConfig?.onStart,\n      \"config.onStart\",\n      payload,\n      ctx,\n      {}\n    );\n\n    await this.#callOnStartFunction(this.task.fns.onStart, \"task.onStart\", payload, ctx, {});\n  }\n\n  async #callOnStartFunction(\n    onStartFn: TaskMetadataWithFunctions[\"fns\"][\"onStart\"],\n    name: string,\n    payload: unknown,\n    ctx: TaskRunContext,\n    initOutput: any\n  ) {\n    if (!onStartFn) {\n      return;\n    }\n\n    try {\n      await this._tracer.startActiveSpan(\n        name,\n        async (span) => {\n          return await onStartFn(payload, { ctx });\n        },\n        {\n          attributes: {\n            [SemanticInternalAttributes.STYLE_ICON]: \"function\",\n          },\n        }\n      );\n    } catch {\n      // Ignore errors from onStart functions\n    }\n  }\n\n  async #callTaskCleanup(payload: unknown, ctx: TaskRunContext, init: unknown) {\n    const cleanupFn = this.task.fns.cleanup;\n\n    if (!cleanupFn) {\n      return;\n    }\n\n    return this._tracer.startActiveSpan(\"cleanup\", async (span) => {\n      return await cleanupFn(payload, { ctx, init });\n    });\n  }\n\n  async #handleError(\n    execution: TaskRunExecution,\n    error: unknown,\n    payload: any,\n    ctx: TaskRunContext\n  ): Promise<\n    | { status: \"retry\"; retry: TaskRunExecutionRetry; error?: unknown }\n    | { status: \"skipped\"; error?: unknown } // skipped is different than noop, it means that the task was skipped from retrying, instead of just not retrying\n    | { status: \"noop\"; error?: unknown }\n  > {\n    const retriesConfig = this._importedConfig?.retries ?? this._config.retries;\n\n    const retry = this.task.retry ?? retriesConfig?.default;\n\n    if (!retry) {\n      return { status: \"noop\" };\n    }\n\n    if (error instanceof Error && error.name === \"AbortTaskRunError\") {\n      return { status: \"skipped\" };\n    }\n\n    if (execution.run.maxAttempts) {\n      retry.maxAttempts = Math.max(execution.run.maxAttempts, 1);\n    }\n\n    let delay = calculateNextRetryDelay(retry, execution.attempt.number);\n\n    if (\n      delay &&\n      error instanceof Error &&\n      error.name === \"TriggerApiError\" &&\n      (error as ApiError).status === 429\n    ) {\n      const rateLimitError = error as RateLimitError;\n\n      delay = rateLimitError.millisecondsUntilReset;\n    }\n\n    if (\n      execution.environment.type === \"DEVELOPMENT\" &&\n      typeof retriesConfig?.enabledInDev === \"boolean\" &&\n      !retriesConfig.enabledInDev\n    ) {\n      return { status: \"skipped\" };\n    }\n\n    return this._tracer.startActiveSpan(\n      \"handleError()\",\n      async (span) => {\n        const handleErrorResult = this.task.fns.handleError\n          ? await this.task.fns.handleError(payload, error, {\n              ctx,\n              retry,\n              retryDelayInMs: delay,\n              retryAt: delay ? new Date(Date.now() + delay) : undefined,\n            })\n          : this._importedConfig\n          ? await this._handleErrorFn?.(payload, error, {\n              ctx,\n              retry,\n              retryDelayInMs: delay,\n              retryAt: delay ? new Date(Date.now() + delay) : undefined,\n            })\n          : undefined;\n\n        // If handleErrorResult\n        if (!handleErrorResult) {\n          return typeof delay === \"undefined\"\n            ? { status: \"noop\" }\n            : { status: \"retry\", retry: { timestamp: Date.now() + delay, delay } };\n        }\n\n        if (handleErrorResult.skipRetrying) {\n          return { status: \"skipped\", error: handleErrorResult.error };\n        }\n\n        if (typeof handleErrorResult.retryAt !== \"undefined\") {\n          return {\n            status: \"retry\",\n            retry: {\n              timestamp: handleErrorResult.retryAt.getTime(),\n              delay: handleErrorResult.retryAt.getTime() - Date.now(),\n            },\n            error: handleErrorResult.error,\n          };\n        }\n\n        if (typeof handleErrorResult.retryDelayInMs === \"number\") {\n          return {\n            status: \"retry\",\n            retry: {\n              timestamp: Date.now() + handleErrorResult.retryDelayInMs,\n              delay: handleErrorResult.retryDelayInMs,\n            },\n            error: handleErrorResult.error,\n          };\n        }\n\n        if (handleErrorResult.retry && typeof handleErrorResult.retry === \"object\") {\n          const delay = calculateNextRetryDelay(handleErrorResult.retry, execution.attempt.number);\n\n          return typeof delay === \"undefined\"\n            ? { status: \"noop\", error: handleErrorResult.error }\n            : {\n                status: \"retry\",\n                retry: { timestamp: Date.now() + delay, delay },\n                error: handleErrorResult.error,\n              };\n        }\n\n        return { status: \"noop\", error: handleErrorResult.error };\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"exclamation-circle\",\n        },\n      }\n    );\n  }\n}\n", "import { z } from \"zod\";\nimport { TaskRunError } from \"./schemas/common\";\n\nexport class AbortTaskRunError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AbortTaskRunError\";\n  }\n}\n\nexport function parseError(error: unknown): TaskRunError {\n  if (error instanceof Error) {\n    return {\n      type: \"BUILT_IN_ERROR\",\n      name: error.name,\n      message: error.message,\n      stackTrace: error.stack ?? \"\",\n    };\n  }\n\n  if (typeof error === \"string\") {\n    return {\n      type: \"STRING_ERROR\",\n      raw: error,\n    };\n  }\n\n  try {\n    return {\n      type: \"CUSTOM_ERROR\",\n      raw: JSON.stringify(error),\n    };\n  } catch (e) {\n    return {\n      type: \"CUSTOM_ERROR\",\n      raw: String(error),\n    };\n  }\n}\n\nexport function createErrorTaskError(error: TaskRunError): any {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      const e = new Error(error.message);\n\n      e.name = error.name;\n      e.stack = error.stackTrace;\n\n      return e;\n    }\n    case \"STRING_ERROR\": {\n      return error.raw;\n    }\n    case \"CUSTOM_ERROR\": {\n      return JSON.parse(error.raw);\n    }\n    case \"INTERNAL_ERROR\": {\n      return new Error(`trigger.dev internal error (${error.code})`);\n    }\n  }\n}\n\nexport const SerializedError = z.object({\n  message: z.string(),\n  name: z.string().optional(),\n  stackTrace: z.string().optional(),\n});\n\nexport type SerializedError = z.infer<typeof SerializedError>;\n\nexport function createJsonErrorObject(error: TaskRunError): SerializedError {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      return {\n        name: error.name,\n        message: error.message,\n        stackTrace: error.stackTrace,\n      };\n    }\n    case \"STRING_ERROR\": {\n      return {\n        message: error.raw,\n      };\n    }\n    case \"CUSTOM_ERROR\": {\n      return {\n        message: error.raw,\n      };\n    }\n    case \"INTERNAL_ERROR\": {\n      return {\n        message: `trigger.dev internal error (${error.code})`,\n      };\n    }\n  }\n}\n\n// Removes any null characters from the error message\nexport function sanitizeError(error: TaskRunError): TaskRunError {\n  switch (error.type) {\n    case \"BUILT_IN_ERROR\": {\n      return {\n        type: \"BUILT_IN_ERROR\",\n        message: error.message?.replace(/\\0/g, \"\"),\n        name: error.name?.replace(/\\0/g, \"\"),\n        stackTrace: error.stackTrace?.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"STRING_ERROR\": {\n      return {\n        type: \"STRING_ERROR\",\n        raw: error.raw.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"CUSTOM_ERROR\": {\n      return {\n        type: \"CUSTOM_ERROR\",\n        raw: error.raw.replace(/\\0/g, \"\"),\n      };\n    }\n    case \"INTERNAL_ERROR\": {\n      return {\n        type: \"INTERNAL_ERROR\",\n        code: error.code,\n        message: error.message?.replace(/\\0/g, \"\"),\n        stackTrace: error.stackTrace?.replace(/\\0/g, \"\"),\n      };\n    }\n  }\n}\n\nexport function correctErrorStackTrace(\n  stackTrace: string,\n  projectDir?: string,\n  options?: { removeFirstLine?: boolean; isDev?: boolean }\n) {\n  const [errorLine, ...traceLines] = stackTrace.split(\"\\n\");\n\n  return [\n    options?.removeFirstLine ? undefined : errorLine,\n    ...traceLines.map((line) => correctStackTraceLine(line, projectDir, options?.isDev)),\n  ]\n    .filter(Boolean)\n    .join(\"\\n\");\n}\n\nconst LINES_TO_IGNORE = [\n  /ConsoleInterceptor/,\n  /TriggerTracer/,\n  /TaskExecutor/,\n  /EXECUTE_TASK_RUN/,\n  /@trigger.dev\\/core/,\n  /packages\\/core\\/src\\/v3/,\n  /safeJsonProcess/,\n  /__entryPoint.ts/,\n  /ZodIpc/,\n  /startActiveSpan/,\n  /processTicksAndRejections/,\n];\n\nfunction correctStackTraceLine(line: string, projectDir?: string, isDev?: boolean) {\n  if (LINES_TO_IGNORE.some((regex) => regex.test(line))) {\n    return;\n  }\n\n  // Check to see if the path is inside the project directory\n  if (isDev && projectDir && !line.includes(projectDir)) {\n    return;\n  }\n\n  return line.trim();\n}\n\nexport function groupTaskMetadataIssuesByTask(tasks: any, issues: z.ZodIssue[]) {\n  return issues.reduce(\n    (acc, issue) => {\n      if (issue.path.length === 0) {\n        return acc;\n      }\n\n      const taskIndex = issue.path[1];\n\n      if (typeof taskIndex !== \"number\") {\n        return acc;\n      }\n\n      const task = tasks[taskIndex];\n\n      if (!task) {\n        return acc;\n      }\n\n      const restOfPath = issue.path.slice(2);\n\n      const taskId = task.id;\n      const taskName = task.exportName;\n      const filePath = task.filePath;\n\n      const key = taskIndex;\n\n      const existing = acc[key] ?? {\n        id: taskId,\n        exportName: taskName,\n        filePath,\n        issues: [] as Array<{ message: string; path?: string }>,\n      };\n\n      existing.issues.push({\n        message: issue.message,\n        path: restOfPath.length === 0 ? undefined : restOfPath.join(\".\"),\n      });\n\n      return {\n        ...acc,\n        [key]: existing,\n      };\n    },\n    {} as Record<\n      number,\n      {\n        id: any;\n        exportName: string;\n        filePath: string;\n        issues: Array<{ message: string; path?: string }>;\n      }\n    >\n  );\n}\n", "import { Span, SpanStatusCode } from \"@opentelemetry/api\";\n\nexport { TracingSDK, type TracingSDKConfig, type TracingDiagnosticLogLevel } from \"./tracingSDK\";\n\nexport function recordSpanException(span: Span, error: unknown) {\n  if (error instanceof Error) {\n    span.recordException(sanitizeSpanError(error));\n  } else if (typeof error === \"string\") {\n    span.recordException(error.replace(/\\0/g, \"\"));\n  } else {\n    span.recordException(JSON.stringify(error).replace(/\\0/g, \"\"));\n  }\n\n  span.setStatus({ code: SpanStatusCode.ERROR });\n}\n\nfunction sanitizeSpanError(error: Error) {\n  // Create a new error object with the same name, message and stack trace\n  const sanitizedError = new Error(error.message.replace(/\\0/g, \"\"));\n  sanitizedError.name = error.name.replace(/\\0/g, \"\");\n  sanitizedError.stack = error.stack?.replace(/\\0/g, \"\");\n\n  return sanitizedError;\n}\n", "import { DiagConsoleLogger, DiagLogLevel, TracerProvider, diag } from \"@opentelemetry/api\";\nimport { logs } from \"@opentelemetry/api-logs\";\nimport { OTLPLogExporter } from \"@opentelemetry/exporter-logs-otlp-http\";\nimport { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport {\n  registerInstrumentations,\n  type InstrumentationOption,\n} from \"@opentelemetry/instrumentation\";\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n  detectResourcesSync,\n  processDetectorSync,\n} from \"@opentelemetry/resources\";\nimport {\n  BatchLogRecordProcessor,\n  LoggerProvider,\n  SimpleLogRecordProcessor,\n} from \"@opentelemetry/sdk-logs\";\nimport {\n  BatchSpanProcessor,\n  NodeTracerProvider,\n  SimpleSpanProcessor,\n  SpanExporter,\n} from \"@opentelemetry/sdk-trace-node\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\nimport {\n  OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_LINK_COUNT_LIMIT,\n  OTEL_LOG_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOG_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT,\n} from \"../limits\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TaskContextLogProcessor, TaskContextSpanProcessor } from \"../taskContext/otelProcessors\";\nimport { getEnvVar } from \"../utils/getEnv\";\nimport { version } from \"../../../package.json\";\n\nclass AsyncResourceDetector implements DetectorSync {\n  private _promise: Promise<ResourceAttributes>;\n  private _resolver?: (value: ResourceAttributes) => void;\n  private _resolved: boolean = false;\n\n  constructor() {\n    this._promise = new Promise((resolver) => {\n      this._resolver = resolver;\n    });\n  }\n\n  detect(_config?: ResourceDetectionConfig): Resource {\n    return new Resource({}, this._promise);\n  }\n\n  resolveWithAttributes(attributes: ResourceAttributes) {\n    if (!this._resolver) {\n      throw new Error(\"Resolver not available\");\n    }\n\n    if (this._resolved) {\n      return;\n    }\n\n    this._resolved = true;\n    this._resolver(attributes);\n  }\n}\n\nexport type TracingDiagnosticLogLevel =\n  | \"none\"\n  | \"error\"\n  | \"warn\"\n  | \"info\"\n  | \"debug\"\n  | \"verbose\"\n  | \"all\";\n\nexport type TracingSDKConfig = {\n  url: string;\n  forceFlushTimeoutMillis?: number;\n  resource?: IResource;\n  instrumentations?: InstrumentationOption[];\n  diagLogLevel?: TracingDiagnosticLogLevel;\n};\n\nexport class TracingSDK {\n  public readonly asyncResourceDetector = new AsyncResourceDetector();\n  private readonly _logProvider: LoggerProvider;\n  private readonly _spanExporter: SpanExporter;\n  private readonly _traceProvider: NodeTracerProvider;\n\n  public readonly getLogger: LoggerProvider[\"getLogger\"];\n  public readonly getTracer: TracerProvider[\"getTracer\"];\n\n  constructor(private readonly config: TracingSDKConfig) {\n    setLogLevel(config.diagLogLevel ?? \"none\");\n\n    const envResourceAttributesSerialized = getEnvVar(\"OTEL_RESOURCE_ATTRIBUTES\");\n    const envResourceAttributes = envResourceAttributesSerialized\n      ? JSON.parse(envResourceAttributesSerialized)\n      : {};\n\n    const commonResources = detectResourcesSync({\n      detectors: [this.asyncResourceDetector, processDetectorSync],\n    })\n      .merge(\n        new Resource({\n          [SemanticResourceAttributes.CLOUD_PROVIDER]: \"trigger.dev\",\n          [SemanticInternalAttributes.TRIGGER]: true,\n          [SemanticInternalAttributes.CLI_VERSION]: version,\n        })\n      )\n      .merge(config.resource ?? new Resource({}))\n      .merge(new Resource(envResourceAttributes));\n\n    const traceProvider = new NodeTracerProvider({\n      forceFlushTimeoutMillis: config.forceFlushTimeoutMillis,\n      resource: commonResources,\n      spanLimits: {\n        attributeCountLimit: OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n        attributeValueLengthLimit: OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n        eventCountLimit: OTEL_SPAN_EVENT_COUNT_LIMIT,\n        attributePerEventCountLimit: OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n        linkCountLimit: OTEL_LINK_COUNT_LIMIT,\n        attributePerLinkCountLimit: OTEL_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n      },\n    });\n\n    const spanExporter = new OTLPTraceExporter({\n      url: `${config.url}/v1/traces`,\n      timeoutMillis: config.forceFlushTimeoutMillis,\n    });\n\n    traceProvider.addSpanProcessor(\n      new TaskContextSpanProcessor(\n        getEnvVar(\"OTEL_BATCH_PROCESSING_ENABLED\") === \"1\"\n          ? new BatchSpanProcessor(spanExporter, {\n              maxExportBatchSize: parseInt(getEnvVar(\"OTEL_SPAN_MAX_EXPORT_BATCH_SIZE\") ?? \"64\"),\n              scheduledDelayMillis: parseInt(\n                getEnvVar(\"OTEL_SPAN_SCHEDULED_DELAY_MILLIS\") ?? \"200\"\n              ),\n              exportTimeoutMillis: parseInt(\n                getEnvVar(\"OTEL_SPAN_EXPORT_TIMEOUT_MILLIS\") ?? \"30000\"\n              ),\n              maxQueueSize: parseInt(getEnvVar(\"OTEL_SPAN_MAX_QUEUE_SIZE\") ?? \"512\"),\n            })\n          : new SimpleSpanProcessor(spanExporter)\n      )\n    );\n\n    traceProvider.register();\n\n    registerInstrumentations({\n      instrumentations: config.instrumentations ?? [],\n      tracerProvider: traceProvider,\n    });\n\n    const logExporter = new OTLPLogExporter({\n      url: `${config.url}/v1/logs`,\n    });\n\n    // To start a logger, you first need to initialize the Logger provider.\n    const loggerProvider = new LoggerProvider({\n      resource: commonResources,\n      logRecordLimits: {\n        attributeCountLimit: OTEL_LOG_ATTRIBUTE_COUNT_LIMIT,\n        attributeValueLengthLimit: OTEL_LOG_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      },\n    });\n\n    loggerProvider.addLogRecordProcessor(\n      new TaskContextLogProcessor(\n        getEnvVar(\"OTEL_BATCH_PROCESSING_ENABLED\") === \"1\"\n          ? new BatchLogRecordProcessor(logExporter, {\n              maxExportBatchSize: parseInt(getEnvVar(\"OTEL_LOG_MAX_EXPORT_BATCH_SIZE\") ?? \"64\"),\n              scheduledDelayMillis: parseInt(getEnvVar(\"OTEL_LOG_SCHEDULED_DELAY_MILLIS\") ?? \"200\"),\n              exportTimeoutMillis: parseInt(getEnvVar(\"OTEL_LOG_EXPORT_TIMEOUT_MILLIS\") ?? \"30000\"),\n              maxQueueSize: parseInt(getEnvVar(\"OTEL_LOG_MAX_QUEUE_SIZE\") ?? \"512\"),\n            })\n          : new SimpleLogRecordProcessor(logExporter)\n      )\n    );\n\n    this._logProvider = loggerProvider;\n    this._spanExporter = spanExporter;\n    this._traceProvider = traceProvider;\n\n    logs.setGlobalLoggerProvider(loggerProvider);\n\n    this.getLogger = loggerProvider.getLogger.bind(loggerProvider);\n    this.getTracer = traceProvider.getTracer.bind(traceProvider);\n  }\n\n  public async flush() {\n    await Promise.all([this._traceProvider.forceFlush(), this._logProvider.forceFlush()]);\n  }\n\n  public async shutdown() {\n    await Promise.all([this._traceProvider.shutdown(), this._logProvider.shutdown()]);\n  }\n}\n\nfunction setLogLevel(level: TracingDiagnosticLogLevel) {\n  let diagLogLevel: DiagLogLevel;\n\n  switch (level) {\n    case \"none\":\n      diagLogLevel = DiagLogLevel.NONE;\n      break;\n    case \"error\":\n      diagLogLevel = DiagLogLevel.ERROR;\n      break;\n    case \"warn\":\n      diagLogLevel = DiagLogLevel.WARN;\n      break;\n    case \"info\":\n      diagLogLevel = DiagLogLevel.INFO;\n      break;\n    case \"debug\":\n      diagLogLevel = DiagLogLevel.DEBUG;\n      break;\n    case \"verbose\":\n      diagLogLevel = DiagLogLevel.VERBOSE;\n      break;\n    case \"all\":\n      diagLogLevel = DiagLogLevel.ALL;\n      break;\n    default:\n      diagLogLevel = DiagLogLevel.NONE;\n  }\n\n  diag.setLogger(new DiagConsoleLogger(), diagLogLevel);\n}\n", "import { AttributeValue, Attributes } from \"@opentelemetry/api\";\n\nexport const OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT = 256;\nexport const OTEL_LOG_ATTRIBUTE_COUNT_LIMIT = 256;\nexport const OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT = 1028;\nexport const OTEL_LOG_ATTRIBUTE_VALUE_LENGTH_LIMIT = 1028;\nexport const OTEL_SPAN_EVENT_COUNT_LIMIT = 10;\nexport const OTEL_LINK_COUNT_LIMIT = 2;\nexport const OTEL_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 10;\nexport const OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 10;\nexport const OFFLOAD_IO_PACKET_LENGTH_LIMIT = 128 * 1024;\n\nexport function imposeAttributeLimits(attributes: Attributes): Attributes {\n  const newAttributes: Attributes = {};\n\n  for (const [key, value] of Object.entries(attributes)) {\n    if (calculateAttributeValueLength(value) > OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n      continue;\n    }\n\n    if (Object.keys(newAttributes).length >= OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) {\n      break;\n    }\n\n    newAttributes[key] = value;\n  }\n\n  return newAttributes;\n}\n\nfunction calculateAttributeValueLength(value: AttributeValue | undefined | null): number {\n  if (value === undefined || value === null) {\n    return 0;\n  }\n\n  if (typeof value === \"string\") {\n    return value.length;\n  }\n\n  if (typeof value === \"number\") {\n    return 8;\n  }\n\n  if (typeof value === \"boolean\") {\n    return 4;\n  }\n\n  if (Array.isArray(value)) {\n    return value.reduce((acc: number, v) => acc + calculateAttributeValueLength(v), 0);\n  }\n\n  return 0;\n}\n", "export const SemanticInternalAttributes = {\n  ENVIRONMENT_ID: \"ctx.environment.id\",\n  ENVIRONMENT_TYPE: \"ctx.environment.type\",\n  ORGANIZATION_ID: \"ctx.organization.id\",\n  ORGANIZATION_SLUG: \"ctx.organization.slug\",\n  ORGANIZATION_NAME: \"ctx.organization.name\",\n  PROJECT_ID: \"ctx.project.id\",\n  PROJECT_REF: \"ctx.project.ref\",\n  PROJECT_NAME: \"ctx.project.title\",\n  PROJECT_DIR: \"project.dir\",\n  ATTEMPT_ID: \"ctx.attempt.id\",\n  ATTEMPT_NUMBER: \"ctx.attempt.number\",\n  RUN_ID: \"ctx.run.id\",\n  RUN_IS_TEST: \"ctx.run.isTest\",\n  BATCH_ID: \"ctx.batch.id\",\n  TASK_SLUG: \"ctx.task.id\",\n  TASK_PATH: \"ctx.task.filePath\",\n  TASK_EXPORT_NAME: \"ctx.task.exportName\",\n  QUEUE_NAME: \"ctx.queue.name\",\n  QUEUE_ID: \"ctx.queue.id\",\n  MACHINE_PRESET_NAME: \"ctx.machine.name\",\n  MACHINE_PRESET_CPU: \"ctx.machine.cpu\",\n  MACHINE_PRESET_MEMORY: \"ctx.machine.memory\",\n  MACHINE_PRESET_CENTS_PER_MS: \"ctx.machine.centsPerMs\",\n  SPAN_PARTIAL: \"$span.partial\",\n  SPAN_ID: \"$span.span_id\",\n  OUTPUT: \"$output\",\n  OUTPUT_TYPE: \"$mime_type_output\",\n  STYLE: \"$style\",\n  STYLE_ICON: \"$style.icon\",\n  STYLE_VARIANT: \"$style.variant\",\n  STYLE_ACCESSORY: \"$style.accessory\",\n  METADATA: \"$metadata\",\n  TRIGGER: \"$trigger\",\n  PAYLOAD: \"$payload\",\n  PAYLOAD_TYPE: \"$mime_type_payload\",\n  SHOW: \"$show\",\n  SHOW_ACTIONS: \"$show.actions\",\n  WORKER_ID: \"worker.id\",\n  WORKER_VERSION: \"worker.version\",\n  CLI_VERSION: \"cli.version\",\n  SDK_VERSION: \"sdk.version\",\n  SDK_LANGUAGE: \"sdk.language\",\n  RETRY_AT: \"retry.at\",\n  RETRY_DELAY: \"retry.delay\",\n  RETRY_COUNT: \"retry.count\",\n  LINK_TITLE: \"$link.title\",\n  IDEMPOTENCY_KEY: \"ctx.run.idempotencyKey\",\n  USAGE_DURATION_MS: \"$usage.durationMs\",\n  USAGE_COST_IN_CENTS: \"$usage.costInCents\",\n  RATE_LIMIT_LIMIT: \"response.rateLimit.limit\",\n  RATE_LIMIT_REMAINING: \"response.rateLimit.remaining\",\n  RATE_LIMIT_RESET: \"response.rateLimit.reset\",\n};\n", "import { Attributes } from \"@opentelemetry/api\";\n\nexport const NULL_SENTINEL = \"$@null((\";\n\nexport function flattenAttributes(\n  obj: Record<string, unknown> | Array<unknown> | string | boolean | number | null | undefined,\n  prefix?: string\n): Attributes {\n  const result: Attributes = {};\n\n  // Check if obj is null or undefined\n  if (obj === undefined) {\n    return result;\n  }\n\n  if (obj === null) {\n    result[prefix || \"\"] = NULL_SENTINEL;\n    return result;\n  }\n\n  if (typeof obj === \"string\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  if (typeof obj === \"number\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  if (typeof obj === \"boolean\") {\n    result[prefix || \"\"] = obj;\n    return result;\n  }\n\n  for (const [key, value] of Object.entries(obj)) {\n    const newPrefix = `${prefix ? `${prefix}.` : \"\"}${Array.isArray(obj) ? `[${key}]` : key}`;\n    if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (typeof value[i] === \"object\" && value[i] !== null) {\n          // update null check here as well\n          Object.assign(result, flattenAttributes(value[i], `${newPrefix}.[${i}]`));\n        } else {\n          if (value[i] === null) {\n            result[`${newPrefix}.[${i}]`] = NULL_SENTINEL;\n          } else {\n            result[`${newPrefix}.[${i}]`] = value[i];\n          }\n        }\n      }\n    } else if (isRecord(value)) {\n      // update null check here\n      Object.assign(result, flattenAttributes(value, newPrefix));\n    } else {\n      if (typeof value === \"number\" || typeof value === \"string\" || typeof value === \"boolean\") {\n        result[newPrefix] = value;\n      } else if (value === null) {\n        result[newPrefix] = NULL_SENTINEL;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return value !== null && typeof value === \"object\" && !Array.isArray(value);\n}\n\nexport function unflattenAttributes(\n  obj: Attributes\n): Record<string, unknown> | string | number | boolean | null | undefined {\n  if (typeof obj !== \"object\" || obj === null || Array.isArray(obj)) {\n    return obj;\n  }\n\n  if (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    Object.keys(obj).length === 1 &&\n    Object.keys(obj)[0] === \"\"\n  ) {\n    return rehydrateNull(obj[\"\"]) as any;\n  }\n\n  if (Object.keys(obj).length === 0) {\n    return;\n  }\n\n  const result: Record<string, unknown> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    const parts = key.split(\".\").reduce((acc, part) => {\n      if (part.includes(\"[\")) {\n        // Handling nested array indices\n        const subparts = part.split(/\\[|\\]/).filter((p) => p !== \"\");\n        acc.push(...subparts);\n      } else {\n        acc.push(part);\n      }\n      return acc;\n    }, [] as string[]);\n\n    let current: any = result;\n    for (let i = 0; i < parts.length - 1; i++) {\n      const part = parts[i];\n      const nextPart = parts[i + 1];\n      const isArray = /^\\d+$/.test(nextPart);\n      if (isArray && !Array.isArray(current[part])) {\n        current[part] = [];\n      } else if (!isArray && current[part] === undefined) {\n        current[part] = {};\n      }\n      current = current[part];\n    }\n    const lastPart = parts[parts.length - 1];\n    current[lastPart] = rehydrateNull(value);\n  }\n\n  // Convert the result to an array if all top-level keys are numeric indices\n  if (Object.keys(result).every((k) => /^\\d+$/.test(k))) {\n    const maxIndex = Math.max(...Object.keys(result).map((k) => parseInt(k)));\n    const arrayResult = Array(maxIndex + 1);\n    for (const key in result) {\n      arrayResult[parseInt(key)] = result[key];\n    }\n    return arrayResult as any;\n  }\n\n  return result;\n}\n\nexport function primitiveValueOrflattenedAttributes(\n  obj: Record<string, unknown> | Array<unknown> | string | boolean | number | undefined,\n  prefix: string | undefined\n): Attributes | string | number | boolean | undefined {\n  if (\n    typeof obj === \"string\" ||\n    typeof obj === \"number\" ||\n    typeof obj === \"boolean\" ||\n    obj === null ||\n    obj === undefined\n  ) {\n    return obj;\n  }\n\n  const attributes = flattenAttributes(obj, prefix);\n\n  if (\n    prefix !== undefined &&\n    typeof attributes[prefix] !== \"undefined\" &&\n    attributes[prefix] !== null\n  ) {\n    return attributes[prefix] as unknown as Attributes;\n  }\n\n  return attributes;\n}\n\nfunction rehydrateNull(value: any): any {\n  if (value === NULL_SENTINEL) {\n    return null;\n  }\n\n  return value;\n}\n", "export const _globalThis = typeof globalThis === \"object\" ? globalThis : global;\n", "import { ApiClientConfiguration } from \"../apiClientManager/types\";\nimport { Clock } from \"../clock/clock\";\nimport type { RuntimeManager } from \"../runtime/manager\";\nimport { TaskCatalog } from \"../task-catalog/catalog\";\nimport { TaskContext } from \"../taskContext/types\";\nimport { UsageManager } from \"../usage/types\";\nimport { _globalThis } from \"./platform\";\n\nconst GLOBAL_TRIGGER_DOT_DEV_KEY = Symbol.for(`dev.trigger.ts.api`);\n\nconst _global = _globalThis as TriggerDotDevGlobal;\n\nexport function registerGlobal<Type extends keyof TriggerDotDevGlobalAPI>(\n  type: Type,\n  instance: TriggerDotDevGlobalAPI[Type],\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_TRIGGER_DOT_DEV_KEY] = _global[GLOBAL_TRIGGER_DOT_DEV_KEY] ?? {});\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(`trigger.dev: Attempted duplicate registration of API: ${type}`);\n    return false;\n  }\n\n  api[type] = instance;\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof TriggerDotDevGlobalAPI>(\n  type: Type\n): TriggerDotDevGlobalAPI[Type] | undefined {\n  return _global[GLOBAL_TRIGGER_DOT_DEV_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof TriggerDotDevGlobalAPI) {\n  const api = _global[GLOBAL_TRIGGER_DOT_DEV_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype TriggerDotDevGlobal = {\n  [GLOBAL_TRIGGER_DOT_DEV_KEY]?: TriggerDotDevGlobalAPI;\n};\n\ntype TriggerDotDevGlobalAPI = {\n  runtime?: RuntimeManager;\n  logger?: any;\n  clock?: Clock;\n  usage?: UsageManager;\n  [\"task-catalog\"]?: TaskCatalog;\n  [\"task-context\"]?: TaskContext;\n  [\"api-client\"]?: ApiClientConfiguration;\n};\n", "import { Attributes } from \"@opentelemetry/api\";\nimport { BackgroundWorkerProperties, TaskRunContext } from \"../schemas\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { TaskContext } from \"./types\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\n\nconst API_NAME = \"task-context\";\n\nexport class TaskContextAPI {\n  private static _instance?: TaskContextAPI;\n\n  private constructor() {}\n\n  public static getInstance(): TaskContextAPI {\n    if (!this._instance) {\n      this._instance = new TaskContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  get isInsideTask(): boolean {\n    return this.#getTaskContext() !== undefined;\n  }\n\n  get ctx(): TaskRunContext | undefined {\n    return this.#getTaskContext()?.ctx;\n  }\n\n  get worker(): BackgroundWorkerProperties | undefined {\n    return this.#getTaskContext()?.worker;\n  }\n\n  get attributes(): Attributes {\n    if (this.ctx) {\n      return {\n        ...this.contextAttributes,\n        ...this.workerAttributes,\n      };\n    }\n\n    return {};\n  }\n\n  get workerAttributes(): Attributes {\n    if (this.worker) {\n      return {\n        [SemanticInternalAttributes.WORKER_ID]: this.worker.id,\n        [SemanticInternalAttributes.WORKER_VERSION]: this.worker.version,\n      };\n    }\n\n    return {};\n  }\n\n  get contextAttributes(): Attributes {\n    if (this.ctx) {\n      return {\n        [SemanticInternalAttributes.ATTEMPT_ID]: this.ctx.attempt.id,\n        [SemanticInternalAttributes.ATTEMPT_NUMBER]: this.ctx.attempt.number,\n        [SemanticInternalAttributes.TASK_SLUG]: this.ctx.task.id,\n        [SemanticInternalAttributes.TASK_PATH]: this.ctx.task.filePath,\n        [SemanticInternalAttributes.TASK_EXPORT_NAME]: this.ctx.task.exportName,\n        [SemanticInternalAttributes.QUEUE_NAME]: this.ctx.queue.name,\n        [SemanticInternalAttributes.QUEUE_ID]: this.ctx.queue.id,\n        [SemanticInternalAttributes.ENVIRONMENT_ID]: this.ctx.environment.id,\n        [SemanticInternalAttributes.ENVIRONMENT_TYPE]: this.ctx.environment.type,\n        [SemanticInternalAttributes.ORGANIZATION_ID]: this.ctx.organization.id,\n        [SemanticInternalAttributes.PROJECT_ID]: this.ctx.project.id,\n        [SemanticInternalAttributes.PROJECT_REF]: this.ctx.project.ref,\n        [SemanticInternalAttributes.PROJECT_NAME]: this.ctx.project.name,\n        [SemanticInternalAttributes.RUN_ID]: this.ctx.run.id,\n        [SemanticInternalAttributes.RUN_IS_TEST]: this.ctx.run.isTest,\n        [SemanticInternalAttributes.ORGANIZATION_SLUG]: this.ctx.organization.slug,\n        [SemanticInternalAttributes.ORGANIZATION_NAME]: this.ctx.organization.name,\n        [SemanticInternalAttributes.BATCH_ID]: this.ctx.batch?.id,\n        [SemanticInternalAttributes.IDEMPOTENCY_KEY]: this.ctx.run.idempotencyKey,\n        [SemanticInternalAttributes.MACHINE_PRESET_NAME]: this.ctx.machine?.name,\n        [SemanticInternalAttributes.MACHINE_PRESET_CPU]: this.ctx.machine?.cpu,\n        [SemanticInternalAttributes.MACHINE_PRESET_MEMORY]: this.ctx.machine?.memory,\n        [SemanticInternalAttributes.MACHINE_PRESET_CENTS_PER_MS]: this.ctx.machine?.centsPerMs,\n      };\n    }\n\n    return {};\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public setGlobalTaskContext(taskContext: TaskContext): boolean {\n    return registerGlobal(API_NAME, taskContext);\n  }\n\n  #getTaskContext(): TaskContext | undefined {\n    return getGlobal(API_NAME);\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TaskContextAPI } from \"./taskContext\";\n/** Entrypoint for logger API */\nexport const taskContext = TaskContextAPI.getInstance();\n", "import { LogRecord, LogRecordProcessor } from \"@opentelemetry/sdk-logs\";\nimport { Span, SpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { Context } from \"@opentelemetry/api\";\nimport { flattenAttributes } from \"../utils/flattenAttributes\";\nimport { taskContext } from \"../task-context-api\";\n\nexport class TaskContextSpanProcessor implements SpanProcessor {\n  private _innerProcessor: SpanProcessor;\n\n  constructor(innerProcessor: SpanProcessor) {\n    this._innerProcessor = innerProcessor;\n  }\n\n  // Called when a span starts\n  onStart(span: Span, parentContext: Context): void {\n    if (taskContext.ctx) {\n      span.setAttributes(\n        flattenAttributes(\n          {\n            [SemanticInternalAttributes.ATTEMPT_ID]: taskContext.ctx.attempt.id,\n            [SemanticInternalAttributes.ATTEMPT_NUMBER]: taskContext.ctx.attempt.number,\n          },\n          SemanticInternalAttributes.METADATA\n        )\n      );\n    }\n\n    this._innerProcessor.onStart(span, parentContext);\n  }\n\n  // Delegate the rest of the methods to the wrapped processor\n\n  onEnd(span: Span): void {\n    this._innerProcessor.onEnd(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._innerProcessor.shutdown();\n  }\n\n  forceFlush(): Promise<void> {\n    return this._innerProcessor.forceFlush();\n  }\n}\n\nexport class TaskContextLogProcessor implements LogRecordProcessor {\n  private _innerProcessor: LogRecordProcessor;\n\n  constructor(innerProcessor: LogRecordProcessor) {\n    this._innerProcessor = innerProcessor;\n  }\n  forceFlush(): Promise<void> {\n    return this._innerProcessor.forceFlush();\n  }\n  onEmit(logRecord: LogRecord, context?: Context | undefined): void {\n    // Adds in the context attributes to the log record\n    if (taskContext.ctx) {\n      logRecord.setAttributes(\n        flattenAttributes(\n          {\n            [SemanticInternalAttributes.ATTEMPT_ID]: taskContext.ctx.attempt.id,\n            [SemanticInternalAttributes.ATTEMPT_NUMBER]: taskContext.ctx.attempt.number,\n          },\n          SemanticInternalAttributes.METADATA\n        )\n      );\n    }\n\n    this._innerProcessor.onEmit(logRecord, context);\n  }\n  shutdown(): Promise<void> {\n    return this._innerProcessor.shutdown();\n  }\n}\n", "export function getEnvVar(name: string): string | undefined {\n  // This could run in a non-Node.js environment (Bun, Deno, CF Worker, etc.), so don't just assume process.env is a thing\n  if (typeof process !== \"undefined\" && typeof process.env === \"object\" && process.env !== null) {\n    return process.env[name];\n  }\n}\n", "{\n  \"name\": \"@trigger.dev/core\",\n  \"version\": \"3.0.0-beta.56\",\n  \"description\": \"Core code used across the Trigger.dev SDK and platform\",\n  \"license\": \"MIT\",\n  \"main\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"module\": \"./dist/index.mjs\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"files\": [\n    \"dist\"\n  ],\n  \"exports\": {\n    \".\": {\n      \"import\": {\n        \"types\": \"./dist/index.d.mts\",\n        \"default\": \"./dist/index.mjs\"\n      },\n      \"require\": \"./dist/index.js\",\n      \"types\": \"./dist/index.d.ts\"\n    },\n    \"./eventFilterMatches\": {\n      \"import\": {\n        \"types\": \"./dist/eventFilterMatches.d.mts\",\n        \"default\": \"./dist/eventFilterMatches.mjs\"\n      },\n      \"require\": \"./dist/eventFilterMatches.js\",\n      \"types\": \"./dist/eventFilterMatches.d.ts\"\n    },\n    \"./replacements\": {\n      \"import\": {\n        \"types\": \"./dist/replacements.d.mts\",\n        \"default\": \"./dist/replacements.mjs\"\n      },\n      \"require\": \"./dist/replacements.js\",\n      \"types\": \"./dist/replacements.d.ts\"\n    },\n    \"./requestFilterMatches\": {\n      \"import\": {\n        \"types\": \"./dist/requestFilterMatches.d.mts\",\n        \"default\": \"./dist/requestFilterMatches.mjs\"\n      },\n      \"require\": \"./dist/requestFilterMatches.js\",\n      \"types\": \"./dist/requestFilterMatches.d.ts\"\n    },\n    \"./retry\": {\n      \"import\": {\n        \"types\": \"./dist/retry.d.mts\",\n        \"default\": \"./dist/retry.mjs\"\n      },\n      \"require\": \"./dist/retry.js\",\n      \"types\": \"./dist/retry.d.ts\"\n    },\n    \"./utils\": {\n      \"import\": {\n        \"types\": \"./dist/utils.d.mts\",\n        \"default\": \"./dist/utils.mjs\"\n      },\n      \"require\": \"./dist/utils.js\",\n      \"types\": \"./dist/utils.d.ts\"\n    },\n    \"./schemas\": {\n      \"import\": {\n        \"types\": \"./dist/schemas/index.d.mts\",\n        \"default\": \"./dist/schemas/index.mjs\"\n      },\n      \"require\": \"./dist/schemas/index.js\",\n      \"types\": \"./dist/schemas/index.d.ts\"\n    },\n    \"./types\": {\n      \"import\": {\n        \"types\": \"./dist/types.d.mts\",\n        \"default\": \"./dist/types.mjs\"\n      },\n      \"require\": \"./dist/types.js\",\n      \"types\": \"./dist/types.d.ts\"\n    },\n    \"./versions\": {\n      \"import\": {\n        \"types\": \"./dist/versions.d.mts\",\n        \"default\": \"./dist/versions.mjs\"\n      },\n      \"require\": \"./dist/versions.js\",\n      \"types\": \"./dist/versions.d.ts\"\n    },\n    \"./v3\": {\n      \"import\": {\n        \"types\": \"./dist/v3/index.d.mts\",\n        \"default\": \"./dist/v3/index.mjs\"\n      },\n      \"require\": \"./dist/v3/index.js\",\n      \"types\": \"./dist/v3/index.d.ts\"\n    },\n    \"./v3/errors\": {\n      \"import\": {\n        \"types\": \"./dist/v3/errors.d.mts\",\n        \"default\": \"./dist/v3/errors.mjs\"\n      },\n      \"require\": \"./dist/v3/errors.js\",\n      \"types\": \"./dist/v3/errors.d.ts\"\n    },\n    \"./v3/logger-api\": {\n      \"import\": {\n        \"types\": \"./dist/v3/logger-api.d.mts\",\n        \"default\": \"./dist/v3/logger-api.mjs\"\n      },\n      \"require\": \"./dist/v3/logger-api.js\",\n      \"types\": \"./dist/v3/logger-api.d.ts\"\n    },\n    \"./v3/otel\": {\n      \"import\": {\n        \"types\": \"./dist/v3/otel/index.d.mts\",\n        \"default\": \"./dist/v3/otel/index.mjs\"\n      },\n      \"require\": \"./dist/v3/otel/index.js\",\n      \"types\": \"./dist/v3/otel/index.d.ts\"\n    },\n    \"./v3/semanticInternalAttributes\": {\n      \"import\": {\n        \"types\": \"./dist/v3/semanticInternalAttributes.d.mts\",\n        \"default\": \"./dist/v3/semanticInternalAttributes.mjs\"\n      },\n      \"require\": \"./dist/v3/semanticInternalAttributes.js\",\n      \"types\": \"./dist/v3/semanticInternalAttributes.d.ts\"\n    },\n    \"./v3/utils/durations\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/durations.d.mts\",\n        \"default\": \"./dist/v3/utils/durations.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/durations.js\",\n      \"types\": \"./dist/v3/utils/durations.d.ts\"\n    },\n    \"./v3/utils/flattenAttributes\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/flattenAttributes.d.mts\",\n        \"default\": \"./dist/v3/utils/flattenAttributes.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/flattenAttributes.js\",\n      \"types\": \"./dist/v3/utils/flattenAttributes.d.ts\"\n    },\n    \"./v3/utils/ioSerialization\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/ioSerialization.d.mts\",\n        \"default\": \"./dist/v3/utils/ioSerialization.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/ioSerialization.js\",\n      \"types\": \"./dist/v3/utils/ioSerialization.d.ts\"\n    },\n    \"./v3/utils/omit\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/omit.d.mts\",\n        \"default\": \"./dist/v3/utils/omit.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/omit.js\",\n      \"types\": \"./dist/v3/utils/omit.d.ts\"\n    },\n    \"./v3/utils/retries\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/retries.d.mts\",\n        \"default\": \"./dist/v3/utils/retries.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/retries.js\",\n      \"types\": \"./dist/v3/utils/retries.d.ts\"\n    },\n    \"./v3/utils/structuredLogger\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/structuredLogger.d.mts\",\n        \"default\": \"./dist/v3/utils/structuredLogger.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/structuredLogger.js\",\n      \"types\": \"./dist/v3/utils/structuredLogger.d.ts\"\n    },\n    \"./v3/zodfetch\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodfetch.d.mts\",\n        \"default\": \"./dist/v3/zodfetch.mjs\"\n      },\n      \"require\": \"./dist/v3/zodfetch.js\",\n      \"types\": \"./dist/v3/zodfetch.d.ts\"\n    },\n    \"./v3/zodMessageHandler\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodMessageHandler.d.mts\",\n        \"default\": \"./dist/v3/zodMessageHandler.mjs\"\n      },\n      \"require\": \"./dist/v3/zodMessageHandler.js\",\n      \"types\": \"./dist/v3/zodMessageHandler.d.ts\"\n    },\n    \"./v3/zodNamespace\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodNamespace.d.mts\",\n        \"default\": \"./dist/v3/zodNamespace.mjs\"\n      },\n      \"require\": \"./dist/v3/zodNamespace.js\",\n      \"types\": \"./dist/v3/zodNamespace.d.ts\"\n    },\n    \"./v3/zodSocket\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodSocket.d.mts\",\n        \"default\": \"./dist/v3/zodSocket.mjs\"\n      },\n      \"require\": \"./dist/v3/zodSocket.js\",\n      \"types\": \"./dist/v3/zodSocket.d.ts\"\n    },\n    \"./v3/zodIpc\": {\n      \"import\": {\n        \"types\": \"./dist/v3/zodIpc.d.mts\",\n        \"default\": \"./dist/v3/zodIpc.mjs\"\n      },\n      \"require\": \"./dist/v3/zodIpc.js\",\n      \"types\": \"./dist/v3/zodIpc.d.ts\"\n    },\n    \"./v3/utils/timers\": {\n      \"import\": {\n        \"types\": \"./dist/v3/utils/timers.d.mts\",\n        \"default\": \"./dist/v3/utils/timers.mjs\"\n      },\n      \"require\": \"./dist/v3/utils/timers.js\",\n      \"types\": \"./dist/v3/utils/timers.d.ts\"\n    },\n    \"./v3/dev\": {\n      \"import\": {\n        \"types\": \"./dist/v3/dev/index.d.mts\",\n        \"default\": \"./dist/v3/dev/index.mjs\"\n      },\n      \"require\": \"./dist/v3/dev/index.js\",\n      \"types\": \"./dist/v3/dev/index.d.ts\"\n    },\n    \"./v3/prod\": {\n      \"import\": {\n        \"types\": \"./dist/v3/prod/index.d.mts\",\n        \"default\": \"./dist/v3/prod/index.mjs\"\n      },\n      \"require\": \"./dist/v3/prod/index.js\",\n      \"types\": \"./dist/v3/prod/index.d.ts\"\n    },\n    \"./v3/workers\": {\n      \"import\": {\n        \"types\": \"./dist/v3/workers/index.d.mts\",\n        \"default\": \"./dist/v3/workers/index.mjs\"\n      },\n      \"require\": \"./dist/v3/workers/index.js\",\n      \"types\": \"./dist/v3/workers/index.d.ts\"\n    },\n    \"./v3/schemas\": {\n      \"import\": {\n        \"types\": \"./dist/v3/schemas/index.d.mts\",\n        \"default\": \"./dist/v3/schemas/index.mjs\"\n      },\n      \"require\": \"./dist/v3/schemas/index.js\",\n      \"types\": \"./dist/v3/schemas/index.d.ts\"\n    },\n    \"./package.json\": \"./package.json\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"v3\": [\n        \"./dist/v3/index.d.ts\"\n      ],\n      \"v3/otel\": [\n        \"./dist/v3/otel/index.d.ts\"\n      ]\n    }\n  },\n  \"sideEffects\": false,\n  \"scripts\": {\n    \"clean\": \"rimraf dist\",\n    \"build\": \"npm run clean && npm run build:tsup\",\n    \"build:tsup\": \"tsup --dts-resolve\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"@google-cloud/precise-date\": \"^4.0.0\",\n    \"@opentelemetry/api\": \"^1.8.0\",\n    \"@opentelemetry/api-logs\": \"^0.48.0\",\n    \"@opentelemetry/exporter-logs-otlp-http\": \"^0.49.1\",\n    \"@opentelemetry/exporter-trace-otlp-http\": \"^0.49.1\",\n    \"@opentelemetry/instrumentation\": \"^0.49.1\",\n    \"@opentelemetry/resources\": \"^1.22.0\",\n    \"@opentelemetry/sdk-logs\": \"^0.49.1\",\n    \"@opentelemetry/sdk-node\": \"^0.49.1\",\n    \"@opentelemetry/sdk-trace-base\": \"^1.22.0\",\n    \"@opentelemetry/sdk-trace-node\": \"^1.22.0\",\n    \"@opentelemetry/semantic-conventions\": \"^1.22.0\",\n    \"humanize-duration\": \"^3.27.3\",\n    \"socket.io-client\": \"4.7.5\",\n    \"superjson\": \"^2.2.1\",\n    \"ulidx\": \"^2.2.1\",\n    \"zod\": \"3.22.3\",\n    \"zod-error\": \"1.5.0\",\n    \"zod-validation-error\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"@trigger.dev/tsconfig\": \"workspace:*\",\n    \"@trigger.dev/tsup\": \"workspace:*\",\n    \"@types/humanize-duration\": \"^3.27.1\",\n    \"@types/jest\": \"^29.5.3\",\n    \"@types/node\": \"20.12.7\",\n    \"@types/readable-stream\": \"^4.0.14\",\n    \"jest\": \"^29.6.2\",\n    \"rimraf\": \"^3.0.2\",\n    \"socket.io\": \"4.7.4\",\n    \"ts-jest\": \"^29.1.1\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.0\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0\"\n  }\n}", "import { z } from \"zod\";\nimport { BackgroundWorkerMetadata, ImageDetailsMetadata } from \"./resources\";\nimport { QueueOptions } from \"./schemas\";\nimport { SerializedError } from \"../errors\";\n\nexport const WhoAmIResponseSchema = z.object({\n  userId: z.string(),\n  email: z.string().email(),\n  dashboardUrl: z.string(),\n});\n\nexport type WhoAmIResponse = z.infer<typeof WhoAmIResponseSchema>;\n\nexport const GetProjectResponseBody = z.object({\n  id: z.string(),\n  externalRef: z.string(),\n  name: z.string(),\n  slug: z.string(),\n  createdAt: z.coerce.date(),\n  organization: z.object({\n    id: z.string(),\n    title: z.string(),\n    slug: z.string(),\n    createdAt: z.coerce.date(),\n  }),\n});\n\nexport type GetProjectResponseBody = z.infer<typeof GetProjectResponseBody>;\n\nexport const GetProjectsResponseBody = z.array(GetProjectResponseBody);\n\nexport type GetProjectsResponseBody = z.infer<typeof GetProjectsResponseBody>;\n\nexport const GetProjectEnvResponse = z.object({\n  apiKey: z.string(),\n  name: z.string(),\n  apiUrl: z.string(),\n});\n\nexport type GetProjectEnvResponse = z.infer<typeof GetProjectEnvResponse>;\n\nexport const CreateBackgroundWorkerRequestBody = z.object({\n  localOnly: z.boolean(),\n  metadata: BackgroundWorkerMetadata,\n  supportsLazyAttempts: z.boolean().optional(),\n});\n\nexport type CreateBackgroundWorkerRequestBody = z.infer<typeof CreateBackgroundWorkerRequestBody>;\n\nexport const CreateBackgroundWorkerResponse = z.object({\n  id: z.string(),\n  version: z.string(),\n  contentHash: z.string(),\n});\n\nexport type CreateBackgroundWorkerResponse = z.infer<typeof CreateBackgroundWorkerResponse>;\n\n//an array of 1, 2, or 3 strings\nconst RunTag = z.string().max(64, \"Tags must be less than 64 characters\");\nexport const RunTags = z.union([RunTag, RunTag.array()]);\n\nexport type RunTags = z.infer<typeof RunTags>;\n\nexport const TriggerTaskRequestBody = z.object({\n  payload: z.any(),\n  context: z.any(),\n  options: z\n    .object({\n      dependentAttempt: z.string().optional(),\n      dependentBatch: z.string().optional(),\n      lockToVersion: z.string().optional(),\n      queue: QueueOptions.optional(),\n      concurrencyKey: z.string().optional(),\n      idempotencyKey: z.string().optional(),\n      test: z.boolean().optional(),\n      payloadType: z.string().optional(),\n      delay: z.string().or(z.coerce.date()).optional(),\n      ttl: z.string().or(z.number().nonnegative().int()).optional(),\n      tags: RunTags.optional(),\n      maxAttempts: z.number().int().optional(),\n    })\n    .optional(),\n});\n\nexport type TriggerTaskRequestBody = z.infer<typeof TriggerTaskRequestBody>;\n\nexport const TriggerTaskResponse = z.object({\n  id: z.string(),\n});\n\nexport type TriggerTaskResponse = z.infer<typeof TriggerTaskResponse>;\n\nexport const BatchTriggerTaskRequestBody = z.object({\n  items: TriggerTaskRequestBody.array(),\n  dependentAttempt: z.string().optional(),\n});\n\nexport type BatchTriggerTaskRequestBody = z.infer<typeof BatchTriggerTaskRequestBody>;\n\nexport const BatchTriggerTaskResponse = z.object({\n  batchId: z.string(),\n  runs: z.string().array(),\n});\n\nexport type BatchTriggerTaskResponse = z.infer<typeof BatchTriggerTaskResponse>;\n\nexport const GetBatchResponseBody = z.object({\n  id: z.string(),\n  items: z.array(\n    z.object({\n      id: z.string(),\n      taskRunId: z.string(),\n      status: z.enum([\"PENDING\", \"CANCELED\", \"COMPLETED\", \"FAILED\"]),\n    })\n  ),\n});\n\nexport type GetBatchResponseBody = z.infer<typeof GetBatchResponseBody>;\n\nexport const AddTagsRequestBody = z.object({\n  tags: RunTags,\n});\n\nexport type AddTagsRequestBody = z.infer<typeof AddTagsRequestBody>;\n\nexport const RescheduleRunRequestBody = z.object({\n  delay: z.string().or(z.coerce.date()),\n});\n\nexport type RescheduleRunRequestBody = z.infer<typeof RescheduleRunRequestBody>;\n\nexport const GetEnvironmentVariablesResponseBody = z.object({\n  variables: z.record(z.string()),\n});\n\nexport type GetEnvironmentVariablesResponseBody = z.infer<\n  typeof GetEnvironmentVariablesResponseBody\n>;\n\nexport const StartDeploymentIndexingRequestBody = z.object({\n  imageReference: z.string(),\n  selfHosted: z.boolean().optional(),\n});\n\nexport type StartDeploymentIndexingRequestBody = z.infer<typeof StartDeploymentIndexingRequestBody>;\n\nexport const StartDeploymentIndexingResponseBody = z.object({\n  id: z.string(),\n  contentHash: z.string(),\n});\n\nexport type StartDeploymentIndexingResponseBody = z.infer<\n  typeof StartDeploymentIndexingResponseBody\n>;\n\nexport const ExternalBuildData = z.object({\n  buildId: z.string(),\n  buildToken: z.string(),\n  projectId: z.string(),\n});\n\nexport type ExternalBuildData = z.infer<typeof ExternalBuildData>;\n\nexport const InitializeDeploymentResponseBody = z.object({\n  id: z.string(),\n  contentHash: z.string(),\n  shortCode: z.string(),\n  version: z.string(),\n  imageTag: z.string(),\n  externalBuildData: ExternalBuildData.optional().nullable(),\n  registryHost: z.string().optional(),\n});\n\nexport type InitializeDeploymentResponseBody = z.infer<typeof InitializeDeploymentResponseBody>;\n\nexport const InitializeDeploymentRequestBody = z.object({\n  contentHash: z.string(),\n  userId: z.string().optional(),\n});\n\nexport type InitializeDeploymentRequestBody = z.infer<typeof InitializeDeploymentRequestBody>;\n\nexport const DeploymentErrorData = z.object({\n  name: z.string(),\n  message: z.string(),\n  stack: z.string().optional(),\n  stderr: z.string().optional(),\n});\n\nexport const GetDeploymentResponseBody = z.object({\n  id: z.string(),\n  status: z.enum([\n    \"PENDING\",\n    \"BUILDING\",\n    \"DEPLOYING\",\n    \"DEPLOYED\",\n    \"FAILED\",\n    \"CANCELED\",\n    \"TIMED_OUT\",\n  ]),\n  contentHash: z.string(),\n  shortCode: z.string(),\n  version: z.string(),\n  imageReference: z.string().optional(),\n  errorData: DeploymentErrorData.optional().nullable(),\n  worker: z\n    .object({\n      id: z.string(),\n      version: z.string(),\n      tasks: z.array(\n        z.object({\n          id: z.string(),\n          slug: z.string(),\n          filePath: z.string(),\n          exportName: z.string(),\n        })\n      ),\n    })\n    .optional(),\n});\n\nexport type GetDeploymentResponseBody = z.infer<typeof GetDeploymentResponseBody>;\n\nexport const CreateUploadPayloadUrlResponseBody = z.object({\n  presignedUrl: z.string(),\n});\n\nexport type CreateUploadPayloadUrlResponseBody = z.infer<typeof CreateUploadPayloadUrlResponseBody>;\n\nexport const ReplayRunResponse = z.object({\n  id: z.string(),\n});\n\nexport type ReplayRunResponse = z.infer<typeof ReplayRunResponse>;\n\nexport const CanceledRunResponse = z.object({\n  id: z.string(),\n});\n\nexport type CanceledRunResponse = z.infer<typeof CanceledRunResponse>;\n\nexport const ScheduleType = z.union([z.literal(\"DECLARATIVE\"), z.literal(\"IMPERATIVE\")]);\n\nexport const ScheduledTaskPayload = z.object({\n  /** The schedule id associated with this run (you can have many schedules for the same task).\n    You can use this to remove the schedule, update it, etc */\n  scheduleId: z.string(),\n  /** The type of schedule – `\"DECLARATIVE\"` or `\"IMPERATIVE\"`.\n   *\n   * **DECLARATIVE** – defined inline on your `schedules.task` using the `cron` property. They can only be created, updated or deleted by modifying the `cron` property on your task.\n   *\n   * **IMPERATIVE** – created using the `schedules.create` functions or in the dashboard.\n   */\n  type: ScheduleType,\n  /** When the task was scheduled to run.\n   * Note this will be slightly different from `new Date()` because it takes a few ms to run the task.\n   * \n   * This date is UTC. To output it as a string with a timezone you would do this: \n   * ```ts\n   * const formatted = payload.timestamp.toLocaleString(\"en-US\", {\n        timeZone: payload.timezone,\n    });\n    ```  */\n  timestamp: z.date(),\n  /** When the task was last run (it has been).\n    This can be undefined if it's never been run. This date is UTC. */\n  lastTimestamp: z.date().optional(),\n  /** You can optionally provide an external id when creating the schedule.\n    Usually you would use a userId or some other unique identifier.\n    This defaults to undefined if you didn't provide one. */\n  externalId: z.string().optional(),\n  /** The IANA timezone the schedule is set to. The default is UTC.\n   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones\n   */\n  timezone: z.string(),\n  /** The next 5 dates this task is scheduled to run */\n  upcoming: z.array(z.date()),\n});\n\nexport type ScheduledTaskPayload = z.infer<typeof ScheduledTaskPayload>;\n\nexport const CreateScheduleOptions = z.object({\n  /** The id of the task you want to attach to. */\n  task: z.string(),\n  /**  The schedule in CRON format.\n   * \n   * ```txt\n*    *    *    *    *    *\n┬    ┬    ┬    ┬    ┬\n│    │    │    │    |\n│    │    │    │    └ day of week (0 - 7, 1L - 7L) (0 or 7 is Sun)\n│    │    │    └───── month (1 - 12)\n│    │    └────────── day of month (1 - 31, L)\n│    └─────────────── hour (0 - 23)\n└──────────────────── minute (0 - 59)\n   * ```\n\n\"L\" means the last. In the \"day of week\" field, 1L means the last Monday of the month. In the day of month field, L means the last day of the month.\n\n   */\n  cron: z.string(),\n  /** You can only create one schedule with this key. If you use it twice, the second call will update the schedule.\n   *\n   * This is required to prevent you from creating duplicate schedules. */\n  deduplicationKey: z.string(),\n  /** Optionally, you can specify your own IDs (like a user ID) and then use it inside the run function of your task.\n   *\n   * This allows you to have per-user CRON tasks.\n   */\n  externalId: z.string().optional(),\n  /** Optionally, you can specify a timezone in the IANA format. If unset it will use UTC.\n   * If specified then the CRON will be evaluated in that timezone and will respect daylight savings.\n   *\n   * If you set the CRON to `0 0 * * *` and the timezone to `America/New_York` then the task will run at midnight in New York time, no matter whether it's daylight savings or not.\n   *\n   * You can see the full list of supported timezones here: https://cloud.trigger.dev/timezones\n   *\n   * @example \"America/New_York\", \"Europe/London\", \"Asia/Tokyo\", \"Africa/Cairo\"\n   *\n   */\n  timezone: z.string().optional(),\n});\n\nexport type CreateScheduleOptions = z.infer<typeof CreateScheduleOptions>;\n\nexport const UpdateScheduleOptions = CreateScheduleOptions.omit({ deduplicationKey: true });\n\nexport type UpdateScheduleOptions = z.infer<typeof UpdateScheduleOptions>;\n\nexport const ScheduleGenerator = z.object({\n  type: z.literal(\"CRON\"),\n  expression: z.string(),\n  description: z.string(),\n});\n\nexport type ScheduleGenerator = z.infer<typeof ScheduleGenerator>;\n\nexport const ScheduleObject = z.object({\n  id: z.string(),\n  type: ScheduleType,\n  task: z.string(),\n  active: z.boolean(),\n  deduplicationKey: z.string().nullish(),\n  externalId: z.string().nullish(),\n  generator: ScheduleGenerator,\n  timezone: z.string(),\n  nextRun: z.coerce.date().nullish(),\n  environments: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string(),\n      userName: z.string().nullish(),\n    })\n  ),\n});\n\nexport type ScheduleObject = z.infer<typeof ScheduleObject>;\n\nexport const DeletedScheduleObject = z.object({\n  id: z.string(),\n});\n\nexport type DeletedScheduleObject = z.infer<typeof DeletedScheduleObject>;\n\nexport const ListSchedulesResult = z.object({\n  data: z.array(ScheduleObject),\n  pagination: z.object({\n    currentPage: z.number(),\n    totalPages: z.number(),\n    count: z.number(),\n  }),\n});\n\nexport type ListSchedulesResult = z.infer<typeof ListSchedulesResult>;\n\nexport const ListScheduleOptions = z.object({\n  page: z.number().optional(),\n  perPage: z.number().optional(),\n});\n\nexport type ListScheduleOptions = z.infer<typeof ListScheduleOptions>;\n\nexport const TimezonesResult = z.object({\n  timezones: z.array(z.string()),\n});\n\nexport type TimezonesResult = z.infer<typeof TimezonesResult>;\n\nexport const RunStatus = z.enum([\n  /// Task hasn't been deployed yet but is waiting to be executed\n  \"WAITING_FOR_DEPLOY\",\n  /// Task is waiting to be executed by a worker\n  \"QUEUED\",\n  /// Task is currently being executed by a worker\n  \"EXECUTING\",\n  /// Task has failed and is waiting to be retried\n  \"REATTEMPTING\",\n  /// Task has been paused by the system, and will be resumed by the system\n  \"FROZEN\",\n  /// Task has been completed successfully\n  \"COMPLETED\",\n  /// Task has been canceled by the user\n  \"CANCELED\",\n  /// Task has been completed with errors\n  \"FAILED\",\n  /// Task has crashed and won't be retried, most likely the worker ran out of resources, e.g. memory or storage\n  \"CRASHED\",\n  /// Task was interrupted during execution, mostly this happens in development environments\n  \"INTERRUPTED\",\n  /// Task has failed to complete, due to an error in the system\n  \"SYSTEM_FAILURE\",\n  /// Task has been scheduled to run at a specific time\n  \"DELAYED\",\n  /// Task has expired and won't be executed\n  \"EXPIRED\",\n]);\n\nexport type RunStatus = z.infer<typeof RunStatus>;\n\nexport const AttemptStatus = z.enum([\n  \"PENDING\",\n  \"EXECUTING\",\n  \"PAUSED\",\n  \"COMPLETED\",\n  \"FAILED\",\n  \"CANCELED\",\n]);\n\nexport type AttemptStatus = z.infer<typeof AttemptStatus>;\n\nexport const RunEnvironmentDetails = z.object({\n  id: z.string(),\n  name: z.string(),\n  user: z.string().optional(),\n});\n\nexport type RunEnvironmentDetails = z.infer<typeof RunEnvironmentDetails>;\n\nexport const RunScheduleDetails = z.object({\n  id: z.string(),\n  externalId: z.string().optional(),\n  deduplicationKey: z.string().optional(),\n  generator: ScheduleGenerator,\n});\n\nexport type RunScheduleDetails = z.infer<typeof RunScheduleDetails>;\n\nconst CommonRunFields = {\n  id: z.string(),\n  status: RunStatus,\n  taskIdentifier: z.string(),\n  idempotencyKey: z.string().optional(),\n  version: z.string().optional(),\n  isQueued: z.boolean(),\n  isExecuting: z.boolean(),\n  isCompleted: z.boolean(),\n  isSuccess: z.boolean(),\n  isFailed: z.boolean(),\n  isCancelled: z.boolean(),\n  isTest: z.boolean(),\n  createdAt: z.coerce.date(),\n  updatedAt: z.coerce.date(),\n  startedAt: z.coerce.date().optional(),\n  finishedAt: z.coerce.date().optional(),\n  delayedUntil: z.coerce.date().optional(),\n  ttl: z.string().optional(),\n  expiredAt: z.coerce.date().optional(),\n  tags: z.string().array(),\n  costInCents: z.number(),\n  baseCostInCents: z.number(),\n  durationMs: z.number(),\n};\n\nexport const RetrieveRunResponse = z.object({\n  ...CommonRunFields,\n  payload: z.any().optional(),\n  payloadPresignedUrl: z.string().optional(),\n  output: z.any().optional(),\n  outputPresignedUrl: z.string().optional(),\n  schedule: RunScheduleDetails.optional(),\n  attempts: z.array(\n    z\n      .object({\n        id: z.string(),\n        status: AttemptStatus,\n        createdAt: z.coerce.date(),\n        updatedAt: z.coerce.date(),\n        startedAt: z.coerce.date().optional(),\n        completedAt: z.coerce.date().optional(),\n        error: SerializedError.optional(),\n      })\n      .optional()\n  ),\n});\n\nexport type RetrieveRunResponse = z.infer<typeof RetrieveRunResponse>;\n\nexport const ListRunResponseItem = z.object({\n  ...CommonRunFields,\n  env: RunEnvironmentDetails,\n});\n\nexport type ListRunResponseItem = z.infer<typeof ListRunResponseItem>;\n\nexport const ListRunResponse = z.object({\n  data: z.array(ListRunResponseItem),\n  pagination: z.object({\n    next: z.string().optional(),\n    previous: z.string().optional(),\n  }),\n});\n\nexport type ListRunResponse = z.infer<typeof ListRunResponse>;\n\nexport const CreateEnvironmentVariableRequestBody = z.object({\n  name: z.string(),\n  value: z.string(),\n});\n\nexport type CreateEnvironmentVariableRequestBody = z.infer<\n  typeof CreateEnvironmentVariableRequestBody\n>;\n\nexport const UpdateEnvironmentVariableRequestBody = z.object({\n  value: z.string(),\n});\n\nexport type UpdateEnvironmentVariableRequestBody = z.infer<\n  typeof UpdateEnvironmentVariableRequestBody\n>;\n\nexport const ImportEnvironmentVariablesRequestBody = z.object({\n  variables: z.record(z.string()),\n  override: z.boolean().optional(),\n});\n\nexport type ImportEnvironmentVariablesRequestBody = z.infer<\n  typeof ImportEnvironmentVariablesRequestBody\n>;\n\nexport const EnvironmentVariableResponseBody = z.object({\n  success: z.boolean(),\n});\n\nexport type EnvironmentVariableResponseBody = z.infer<typeof EnvironmentVariableResponseBody>;\n\nexport const EnvironmentVariableValue = z.object({\n  value: z.string(),\n});\n\nexport type EnvironmentVariableValue = z.infer<typeof EnvironmentVariableValue>;\n\nexport const EnvironmentVariable = z.object({\n  name: z.string(),\n  value: z.string(),\n});\n\nexport const EnvironmentVariables = z.array(EnvironmentVariable);\n\nexport type EnvironmentVariables = z.infer<typeof EnvironmentVariables>;\n", "import { z } from \"zod\";\nimport { QueueOptions, RetryOptions, ScheduleMetadata } from \"./schemas\";\nimport { MachineConfig } from \"./common\";\n\nexport const TaskResource = z.object({\n  id: z.string(),\n  filePath: z.string(),\n  exportName: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n});\n\nexport type TaskResource = z.infer<typeof TaskResource>;\n\nexport const BackgroundWorkerMetadata = z.object({\n  packageVersion: z.string(),\n  contentHash: z.string(),\n  cliPackageVersion: z.string().optional(),\n  tasks: z.array(TaskResource),\n});\n\nexport type BackgroundWorkerMetadata = z.infer<typeof BackgroundWorkerMetadata>;\n\nexport const ImageDetailsMetadata = z.object({\n  contentHash: z.string(),\n  imageTag: z.string(),\n});\n\nexport type ImageDetailsMetadata = z.infer<typeof ImageDetailsMetadata>;\n", "import { z } from \"zod\";\nimport { RequireKeys } from \"../types\";\nimport { MachineConfig, MachinePreset, TaskRunExecution } from \"./common\";\n\n/*\n    WARNING: Never import anything from ./messages here. If it's needed in both, put it here instead.\n*/\nexport const EnvironmentType = z.enum([\"PRODUCTION\", \"STAGING\", \"DEVELOPMENT\", \"PREVIEW\"]);\nexport type EnvironmentType = z.infer<typeof EnvironmentType>;\n\nexport const TaskRunExecutionPayload = z.object({\n  execution: TaskRunExecution,\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type TaskRunExecutionPayload = z.infer<typeof TaskRunExecutionPayload>;\n\n// **IMPORTANT NOTE**: If you change this schema, make sure it is backwards compatible with the previous version as this also used when a worker signals to the coordinator that a TaskRun is complete.\n// Strategies for not breaking backwards compatibility:\n// 1. Add new fields as optional\n// 2. If a field is required, add a default value\nexport const ProdTaskRunExecution = TaskRunExecution.extend({\n  worker: z.object({\n    id: z.string(),\n    contentHash: z.string(),\n    version: z.string(),\n  }),\n  machine: MachinePreset.default({ name: \"small-1x\", cpu: 1, memory: 1, centsPerMs: 0 }),\n});\n\nexport type ProdTaskRunExecution = z.infer<typeof ProdTaskRunExecution>;\n\nexport const ProdTaskRunExecutionPayload = z.object({\n  execution: ProdTaskRunExecution,\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type ProdTaskRunExecutionPayload = z.infer<typeof ProdTaskRunExecutionPayload>;\n\nexport const FixedWindowRateLimit = z.object({\n  type: z.literal(\"fixed-window\"),\n  limit: z.number(),\n  window: z.union([\n    z.object({\n      seconds: z.number(),\n    }),\n    z.object({\n      minutes: z.number(),\n    }),\n    z.object({\n      hours: z.number(),\n    }),\n  ]),\n});\n\nexport const SlidingWindowRateLimit = z.object({\n  type: z.literal(\"sliding-window\"),\n  limit: z.number(),\n  window: z.union([\n    z.object({\n      seconds: z.number(),\n    }),\n    z.object({\n      minutes: z.number(),\n    }),\n    z.object({\n      hours: z.number(),\n    }),\n  ]),\n});\n\nexport const RateLimitOptions = z.discriminatedUnion(\"type\", [\n  FixedWindowRateLimit,\n  SlidingWindowRateLimit,\n]);\n\nexport type RateLimitOptions = z.infer<typeof RateLimitOptions>;\n\nexport const RetryOptions = z.object({\n  /** The number of attempts before giving up */\n  maxAttempts: z.number().int().optional(),\n  /** The exponential factor to use when calculating the next retry time.\n   *\n   * Each subsequent retry will be calculated as `previousTimeout * factor`\n   */\n  factor: z.number().optional(),\n  /** The minimum time to wait before retrying */\n  minTimeoutInMs: z.number().int().optional(),\n  /** The maximum time to wait before retrying */\n  maxTimeoutInMs: z.number().int().optional(),\n  /** Randomize the timeout between retries.\n   *\n   * This can be useful to prevent the thundering herd problem where all retries happen at the same time.\n   */\n  randomize: z.boolean().optional(),\n});\n\nexport type RetryOptions = z.infer<typeof RetryOptions>;\n\nexport const QueueOptions = z.object({\n  /** You can define a shared queue and then pass the name in to your task.\n   * \n   * @example\n   * \n   * ```ts\n   * const myQueue = queue({\n      name: \"my-queue\",\n      concurrencyLimit: 1,\n    });\n\n    export const task1 = task({\n      id: \"task-1\",\n      queue: {\n        name: \"my-queue\",\n      },\n      run: async (payload: { message: string }) => {\n        // ...\n      },\n    });\n\n    export const task2 = task({\n      id: \"task-2\",\n      queue: {\n        name: \"my-queue\",\n      },\n      run: async (payload: { message: string }) => {\n        // ...\n      },\n    });\n   * ```\n   */\n  name: z.string().optional(),\n  /** An optional property that specifies the maximum number of concurrent run executions.\n   *\n   * If this property is omitted, the task can potentially use up the full concurrency of an environment. */\n  concurrencyLimit: z.number().int().min(0).max(1000).optional(),\n  /** @deprecated This feature is coming soon */\n  rateLimit: RateLimitOptions.optional(),\n});\n\nexport type QueueOptions = z.infer<typeof QueueOptions>;\n\nexport const ScheduleMetadata = z.object({\n  cron: z.string(),\n  timezone: z.string(),\n});\n\nexport const TaskMetadata = z.object({\n  id: z.string(),\n  packageVersion: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n});\n\nexport type TaskMetadata = z.infer<typeof TaskMetadata>;\n\nexport const TaskFileMetadata = z.object({\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskFileMetadata = z.infer<typeof TaskFileMetadata>;\n\nexport const TaskMetadataWithFilePath = z.object({\n  id: z.string(),\n  packageVersion: z.string(),\n  queue: QueueOptions.optional(),\n  retry: RetryOptions.optional(),\n  machine: MachineConfig.optional(),\n  triggerSource: z.string().optional(),\n  schedule: ScheduleMetadata.optional(),\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskMetadataWithFilePath = z.infer<typeof TaskMetadataWithFilePath>;\n\nexport const PostStartCauses = z.enum([\"index\", \"create\", \"restore\"]);\nexport type PostStartCauses = z.infer<typeof PostStartCauses>;\n\nexport const PreStopCauses = z.enum([\"terminate\"]);\nexport type PreStopCauses = z.infer<typeof PreStopCauses>;\n\nconst RegexSchema = z.custom<RegExp>((val) => {\n  try {\n    // Check to see if val is a regex\n    return typeof (val as RegExp).test === \"function\";\n  } catch {\n    return false;\n  }\n});\n\nexport const Config = z.object({\n  project: z.string(),\n  triggerDirectories: z.string().array().optional(),\n  triggerUrl: z.string().optional(),\n  projectDir: z.string().optional(),\n  tsconfigPath: z.string().optional(),\n  retries: z\n    .object({\n      enabledInDev: z.boolean().default(true),\n      default: RetryOptions.optional(),\n    })\n    .optional(),\n  additionalPackages: z.string().array().optional(),\n  additionalFiles: z.string().array().optional(),\n  dependenciesToBundle: z.array(z.union([z.string(), RegexSchema])).optional(),\n  logLevel: z.string().optional(),\n  enableConsoleLogging: z.boolean().optional(),\n  postInstall: z.string().optional(),\n  extraCACerts: z.string().optional(),\n});\n\nexport type Config = z.infer<typeof Config>;\nexport type ResolvedConfig = RequireKeys<\n  Config,\n  \"triggerDirectories\" | \"triggerUrl\" | \"projectDir\" | \"tsconfigPath\"\n>;\n\nexport const WaitReason = z.enum([\"WAIT_FOR_DURATION\", \"WAIT_FOR_TASK\", \"WAIT_FOR_BATCH\"]);\n\nexport type WaitReason = z.infer<typeof WaitReason>;\n\nexport const TaskRunExecutionLazyAttemptPayload = z.object({\n  runId: z.string(),\n  attemptCount: z.number().optional(),\n  messageId: z.string(),\n  isTest: z.boolean(),\n  traceContext: z.record(z.unknown()),\n  environment: z.record(z.string()).optional(),\n});\n\nexport type TaskRunExecutionLazyAttemptPayload = z.infer<typeof TaskRunExecutionLazyAttemptPayload>;\n", "import { z } from \"zod\";\n\n// Defaults to 0.5\nexport const MachineCpu = z.union([\n  z.literal(0.25),\n  z.literal(0.5),\n  z.literal(1),\n  z.literal(2),\n  z.literal(4),\n]);\n\nexport type MachineCpu = z.infer<typeof MachineCpu>;\n\n// Defaults to 1\nexport const MachineMemory = z.union([\n  z.literal(0.25),\n  z.literal(0.5),\n  z.literal(1),\n  z.literal(2),\n  z.literal(4),\n  z.literal(8),\n]);\n\nexport type MachineMemory = z.infer<typeof MachineMemory>;\n\n// Default is small-1x\nexport const MachinePresetName = z.enum([\n  \"micro\",\n  \"small-1x\",\n  \"small-2x\",\n  \"medium-1x\",\n  \"medium-2x\",\n  \"large-1x\",\n  \"large-2x\",\n]);\n\nexport type MachinePresetName = z.infer<typeof MachinePresetName>;\n\nexport const MachineConfig = z.object({\n  cpu: MachineCpu.optional(),\n  memory: MachineMemory.optional(),\n  preset: MachinePresetName.optional(),\n});\n\nexport type MachineConfig = z.infer<typeof MachineConfig>;\n\nexport const MachinePreset = z.object({\n  name: MachinePresetName,\n  cpu: z.number(),\n  memory: z.number(),\n  centsPerMs: z.number(),\n});\n\nexport type MachinePreset = z.infer<typeof MachinePreset>;\n\nexport const TaskRunBuiltInError = z.object({\n  type: z.literal(\"BUILT_IN_ERROR\"),\n  name: z.string(),\n  message: z.string(),\n  stackTrace: z.string(),\n});\n\nexport type TaskRunBuiltInError = z.infer<typeof TaskRunBuiltInError>;\n\nexport const TaskRunCustomErrorObject = z.object({\n  type: z.literal(\"CUSTOM_ERROR\"),\n  raw: z.string(),\n});\n\nexport type TaskRunCustomErrorObject = z.infer<typeof TaskRunCustomErrorObject>;\n\nexport const TaskRunStringError = z.object({\n  type: z.literal(\"STRING_ERROR\"),\n  raw: z.string(),\n});\n\nexport type TaskRunStringError = z.infer<typeof TaskRunStringError>;\n\nexport const TaskRunErrorCodes = {\n  COULD_NOT_FIND_EXECUTOR: \"COULD_NOT_FIND_EXECUTOR\",\n  COULD_NOT_FIND_TASK: \"COULD_NOT_FIND_TASK\",\n  CONFIGURED_INCORRECTLY: \"CONFIGURED_INCORRECTLY\",\n  TASK_ALREADY_RUNNING: \"TASK_ALREADY_RUNNING\",\n  TASK_EXECUTION_FAILED: \"TASK_EXECUTION_FAILED\",\n  TASK_EXECUTION_ABORTED: \"TASK_EXECUTION_ABORTED\",\n  TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE: \"TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE\",\n  TASK_PROCESS_SIGKILL_TIMEOUT: \"TASK_PROCESS_SIGKILL_TIMEOUT\",\n  TASK_RUN_CANCELLED: \"TASK_RUN_CANCELLED\",\n  TASK_OUTPUT_ERROR: \"TASK_OUTPUT_ERROR\",\n  HANDLE_ERROR_ERROR: \"HANDLE_ERROR_ERROR\",\n  GRACEFUL_EXIT_TIMEOUT: \"GRACEFUL_EXIT_TIMEOUT\",\n  TASK_RUN_CRASHED: \"TASK_RUN_CRASHED\",\n} as const;\n\nexport const TaskRunInternalError = z.object({\n  type: z.literal(\"INTERNAL_ERROR\"),\n  code: z.enum([\n    \"COULD_NOT_FIND_EXECUTOR\",\n    \"COULD_NOT_FIND_TASK\",\n    \"CONFIGURED_INCORRECTLY\",\n    \"TASK_ALREADY_RUNNING\",\n    \"TASK_EXECUTION_FAILED\",\n    \"TASK_EXECUTION_ABORTED\",\n    \"TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE\",\n    \"TASK_PROCESS_SIGKILL_TIMEOUT\",\n    \"TASK_RUN_CANCELLED\",\n    \"TASK_OUTPUT_ERROR\",\n    \"HANDLE_ERROR_ERROR\",\n    \"GRACEFUL_EXIT_TIMEOUT\",\n    \"TASK_RUN_HEARTBEAT_TIMEOUT\",\n    \"TASK_RUN_CRASHED\",\n  ]),\n  message: z.string().optional(),\n  stackTrace: z.string().optional(),\n});\n\nexport type TaskRunInternalError = z.infer<typeof TaskRunInternalError>;\n\nexport const TaskRunError = z.discriminatedUnion(\"type\", [\n  TaskRunBuiltInError,\n  TaskRunCustomErrorObject,\n  TaskRunStringError,\n  TaskRunInternalError,\n]);\n\nexport type TaskRunError = z.infer<typeof TaskRunError>;\n\nexport const TaskRun = z.object({\n  id: z.string(),\n  payload: z.string(),\n  payloadType: z.string(),\n  context: z.any(),\n  tags: z.array(z.string()),\n  isTest: z.boolean().default(false),\n  createdAt: z.coerce.date(),\n  startedAt: z.coerce.date().default(() => new Date()),\n  idempotencyKey: z.string().optional(),\n  maxAttempts: z.number().optional(),\n  durationMs: z.number().default(0),\n  costInCents: z.number().default(0),\n  baseCostInCents: z.number().default(0),\n  version: z.string().optional(),\n});\n\nexport type TaskRun = z.infer<typeof TaskRun>;\n\nexport const TaskRunExecutionTask = z.object({\n  id: z.string(),\n  filePath: z.string(),\n  exportName: z.string(),\n});\n\nexport type TaskRunExecutionTask = z.infer<typeof TaskRunExecutionTask>;\n\nexport const TaskRunExecutionAttempt = z.object({\n  id: z.string(),\n  number: z.number(),\n  startedAt: z.coerce.date(),\n  backgroundWorkerId: z.string(),\n  backgroundWorkerTaskId: z.string(),\n  status: z.string(),\n});\n\nexport type TaskRunExecutionAttempt = z.infer<typeof TaskRunExecutionAttempt>;\n\nexport const TaskRunExecutionEnvironment = z.object({\n  id: z.string(),\n  slug: z.string(),\n  type: z.enum([\"PRODUCTION\", \"STAGING\", \"DEVELOPMENT\", \"PREVIEW\"]),\n});\n\nexport type TaskRunExecutionEnvironment = z.infer<typeof TaskRunExecutionEnvironment>;\n\nexport const TaskRunExecutionOrganization = z.object({\n  id: z.string(),\n  slug: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionOrganization = z.infer<typeof TaskRunExecutionOrganization>;\n\nexport const TaskRunExecutionProject = z.object({\n  id: z.string(),\n  ref: z.string(),\n  slug: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionProject = z.infer<typeof TaskRunExecutionProject>;\n\nexport const TaskRunExecutionQueue = z.object({\n  id: z.string(),\n  name: z.string(),\n});\n\nexport type TaskRunExecutionQueue = z.infer<typeof TaskRunExecutionQueue>;\n\nexport const TaskRunExecutionBatch = z.object({\n  id: z.string(),\n});\n\nexport const TaskRunExecution = z.object({\n  task: TaskRunExecutionTask,\n  attempt: TaskRunExecutionAttempt,\n  run: TaskRun,\n  queue: TaskRunExecutionQueue,\n  environment: TaskRunExecutionEnvironment,\n  organization: TaskRunExecutionOrganization,\n  project: TaskRunExecutionProject,\n  batch: TaskRunExecutionBatch.optional(),\n  machine: MachinePreset.optional(),\n});\n\nexport type TaskRunExecution = z.infer<typeof TaskRunExecution>;\n\nexport const TaskRunContext = z.object({\n  task: TaskRunExecutionTask,\n  attempt: TaskRunExecutionAttempt.omit({\n    backgroundWorkerId: true,\n    backgroundWorkerTaskId: true,\n  }),\n  run: TaskRun.omit({ payload: true, payloadType: true }),\n  queue: TaskRunExecutionQueue,\n  environment: TaskRunExecutionEnvironment,\n  organization: TaskRunExecutionOrganization,\n  project: TaskRunExecutionProject,\n  batch: TaskRunExecutionBatch.optional(),\n  machine: MachinePreset.optional(),\n});\n\nexport type TaskRunContext = z.infer<typeof TaskRunContext>;\n\nexport const TaskRunExecutionRetry = z.object({\n  timestamp: z.number(),\n  delay: z.number(),\n  error: z.unknown().optional(),\n});\n\nexport type TaskRunExecutionRetry = z.infer<typeof TaskRunExecutionRetry>;\n\nexport const TaskRunExecutionUsage = z.object({\n  durationMs: z.number(),\n});\n\nexport type TaskRunExecutionUsage = z.infer<typeof TaskRunExecutionUsage>;\n\nexport const TaskRunFailedExecutionResult = z.object({\n  ok: z.literal(false),\n  id: z.string(),\n  error: TaskRunError,\n  retry: TaskRunExecutionRetry.optional(),\n  skippedRetrying: z.boolean().optional(),\n  usage: TaskRunExecutionUsage.optional(),\n});\n\nexport type TaskRunFailedExecutionResult = z.infer<typeof TaskRunFailedExecutionResult>;\n\nexport const TaskRunSuccessfulExecutionResult = z.object({\n  ok: z.literal(true),\n  id: z.string(),\n  output: z.string().optional(),\n  outputType: z.string(),\n  usage: TaskRunExecutionUsage.optional(),\n});\n\nexport type TaskRunSuccessfulExecutionResult = z.infer<typeof TaskRunSuccessfulExecutionResult>;\n\nexport const TaskRunExecutionResult = z.discriminatedUnion(\"ok\", [\n  TaskRunSuccessfulExecutionResult,\n  TaskRunFailedExecutionResult,\n]);\n\nexport type TaskRunExecutionResult = z.infer<typeof TaskRunExecutionResult>;\n\nexport const BatchTaskRunExecutionResult = z.object({\n  id: z.string(),\n  items: TaskRunExecutionResult.array(),\n});\n\nexport type BatchTaskRunExecutionResult = z.infer<typeof BatchTaskRunExecutionResult>;\n", "import { context, propagation } from \"@opentelemetry/api\";\nimport { z } from \"zod\";\nimport { version } from \"../../../package.json\";\nimport {\n  AddTagsRequestBody,\n  BatchTaskRunExecutionResult,\n  BatchTriggerTaskRequestBody,\n  BatchTriggerTaskResponse,\n  CanceledRunResponse,\n  CreateEnvironmentVariableRequestBody,\n  CreateScheduleOptions,\n  CreateUploadPayloadUrlResponseBody,\n  DeletedScheduleObject,\n  EnvironmentVariableResponseBody,\n  EnvironmentVariableValue,\n  EnvironmentVariables,\n  ListRunResponseItem,\n  ListScheduleOptions,\n  ReplayRunResponse,\n  RescheduleRunRequestBody,\n  RetrieveRunResponse,\n  ScheduleObject,\n  TaskRunExecutionResult,\n  TriggerTaskRequestBody,\n  TriggerTaskResponse,\n  UpdateEnvironmentVariableRequestBody,\n  UpdateScheduleOptions,\n} from \"../schemas\";\nimport { taskContext } from \"../task-context-api\";\nimport {\n  ApiRequestOptions,\n  CursorPagePromise,\n  ZodFetchOptions,\n  isRequestOptions,\n  zodfetch,\n  zodfetchCursorPage,\n  zodfetchOffsetLimitPage,\n} from \"./core\";\nimport { ApiError } from \"./errors\";\nimport {\n  CreateEnvironmentVariableParams,\n  ImportEnvironmentVariablesParams,\n  ListProjectRunsQueryParams,\n  ListRunsQueryParams,\n  UpdateEnvironmentVariableParams,\n} from \"./types\";\n\nexport type {\n  CreateEnvironmentVariableParams,\n  ImportEnvironmentVariablesParams,\n  UpdateEnvironmentVariableParams,\n};\n\nexport type TriggerOptions = {\n  spanParentAsLink?: boolean;\n};\n\nconst DEFAULT_ZOD_FETCH_OPTIONS: ZodFetchOptions = {\n  retry: {\n    maxAttempts: 3,\n    minTimeoutInMs: 1000,\n    maxTimeoutInMs: 30_000,\n    factor: 2,\n    randomize: false,\n  },\n};\n\nexport { isRequestOptions };\nexport type { ApiRequestOptions };\n\n/**\n * Trigger.dev v3 API client\n */\nexport class ApiClient {\n  private readonly baseUrl: string;\n  private readonly defaultRequestOptions: ZodFetchOptions;\n\n  constructor(\n    baseUrl: string,\n    private readonly accessToken: string,\n    requestOptions: ApiRequestOptions = {}\n  ) {\n    this.baseUrl = baseUrl.replace(/\\/$/, \"\");\n    this.defaultRequestOptions = mergeRequestOptions(DEFAULT_ZOD_FETCH_OPTIONS, requestOptions);\n  }\n\n  async getRunResult(\n    runId: string,\n    requestOptions?: ZodFetchOptions\n  ): Promise<TaskRunExecutionResult | undefined> {\n    try {\n      return await zodfetch(\n        TaskRunExecutionResult,\n        `${this.baseUrl}/api/v1/runs/${runId}/result`,\n        {\n          method: \"GET\",\n          headers: this.#getHeaders(false),\n        },\n        mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n      );\n    } catch (error) {\n      if (error instanceof ApiError) {\n        if (error.status === 404) {\n          return undefined;\n        }\n      }\n\n      throw error;\n    }\n  }\n\n  async getBatchResults(\n    batchId: string,\n    requestOptions?: ZodFetchOptions\n  ): Promise<BatchTaskRunExecutionResult | undefined> {\n    return await zodfetch(\n      BatchTaskRunExecutionResult,\n      `${this.baseUrl}/api/v1/batches/${batchId}/results`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  triggerTask(\n    taskId: string,\n    body: TriggerTaskRequestBody,\n    options?: TriggerOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    const encodedTaskId = encodeURIComponent(taskId);\n\n    return zodfetch(\n      TriggerTaskResponse,\n      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/trigger`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(options?.spanParentAsLink ?? false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  batchTriggerTask(\n    taskId: string,\n    body: BatchTriggerTaskRequestBody,\n    options?: TriggerOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    const encodedTaskId = encodeURIComponent(taskId);\n\n    return zodfetch(\n      BatchTriggerTaskResponse,\n      `${this.baseUrl}/api/v1/tasks/${encodedTaskId}/batch`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(options?.spanParentAsLink ?? false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createUploadPayloadUrl(filename: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CreateUploadPayloadUrlResponseBody,\n      `${this.baseUrl}/api/v1/packets/${filename}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  getPayloadUrl(filename: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CreateUploadPayloadUrlResponseBody,\n      `${this.baseUrl}/api/v1/packets/${filename}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      RetrieveRunResponse,\n      `${this.baseUrl}/api/v3/runs/${runId}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listRuns(\n    query?: ListRunsQueryParams,\n    requestOptions?: ZodFetchOptions\n  ): CursorPagePromise<typeof ListRunResponseItem> {\n    const searchParams = createSearchQueryForListRuns(query);\n\n    return zodfetchCursorPage(\n      ListRunResponseItem,\n      `${this.baseUrl}/api/v1/runs`,\n      {\n        query: searchParams,\n        limit: query?.limit,\n        after: query?.after,\n        before: query?.before,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listProjectRuns(\n    projectRef: string,\n    query?: ListProjectRunsQueryParams,\n    requestOptions?: ZodFetchOptions\n  ): CursorPagePromise<typeof ListRunResponseItem> {\n    const searchParams = createSearchQueryForListRuns(query);\n\n    if (query?.env) {\n      searchParams.append(\n        \"filter[env]\",\n        Array.isArray(query.env) ? query.env.join(\",\") : query.env\n      );\n    }\n\n    return zodfetchCursorPage(\n      ListRunResponseItem,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/runs`,\n      {\n        query: searchParams,\n        limit: query?.limit,\n        after: query?.after,\n        before: query?.before,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  replayRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ReplayRunResponse,\n      `${this.baseUrl}/api/v1/runs/${runId}/replay`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  cancelRun(runId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      CanceledRunResponse,\n      `${this.baseUrl}/api/v2/runs/${runId}/cancel`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  rescheduleRun(runId: string, body: RescheduleRunRequestBody, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      RetrieveRunResponse,\n      `${this.baseUrl}/api/v1/runs/${runId}/reschedule`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  addTags(runId: string, body: AddTagsRequestBody, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      z.object({ message: z.string() }),\n      `${this.baseUrl}/api/v1/runs/${runId}/tags`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createSchedule(options: CreateScheduleOptions, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(options),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listSchedules(options?: ListScheduleOptions, requestOptions?: ZodFetchOptions) {\n    const searchParams = new URLSearchParams();\n\n    if (options?.page) {\n      searchParams.append(\"page\", options.page.toString());\n    }\n\n    if (options?.perPage) {\n      searchParams.append(\"perPage\", options.perPage.toString());\n    }\n\n    return zodfetchOffsetLimitPage(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules`,\n      {\n        page: options?.page,\n        limit: options?.perPage,\n      },\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  updateSchedule(\n    scheduleId: string,\n    options: UpdateScheduleOptions,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(options),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deactivateSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}/deactivate`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  activateSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      ScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}/activate`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deleteSchedule(scheduleId: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      DeletedScheduleObject,\n      `${this.baseUrl}/api/v1/schedules/${scheduleId}`,\n      {\n        method: \"DELETE\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  listEnvVars(projectRef: string, slug: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariables,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  importEnvVars(\n    projectRef: string,\n    slug: string,\n    body: ImportEnvironmentVariablesParams,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/import`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  retrieveEnvVar(projectRef: string, slug: string, key: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariableValue,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"GET\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  createEnvVar(\n    projectRef: string,\n    slug: string,\n    body: CreateEnvironmentVariableRequestBody,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}`,\n      {\n        method: \"POST\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  updateEnvVar(\n    projectRef: string,\n    slug: string,\n    key: string,\n    body: UpdateEnvironmentVariableRequestBody,\n    requestOptions?: ZodFetchOptions\n  ) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"PUT\",\n        headers: this.#getHeaders(false),\n        body: JSON.stringify(body),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  deleteEnvVar(projectRef: string, slug: string, key: string, requestOptions?: ZodFetchOptions) {\n    return zodfetch(\n      EnvironmentVariableResponseBody,\n      `${this.baseUrl}/api/v1/projects/${projectRef}/envvars/${slug}/${key}`,\n      {\n        method: \"DELETE\",\n        headers: this.#getHeaders(false),\n      },\n      mergeRequestOptions(this.defaultRequestOptions, requestOptions)\n    );\n  }\n\n  #getHeaders(spanParentAsLink: boolean) {\n    const headers: Record<string, string> = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${this.accessToken}`,\n      \"trigger-version\": version,\n    };\n\n    // Only inject the context if we are inside a task\n    if (taskContext.isInsideTask) {\n      headers[\"x-trigger-worker\"] = \"true\";\n      propagation.inject(context.active(), headers);\n\n      if (spanParentAsLink) {\n        headers[\"x-trigger-span-parent-as-link\"] = \"1\";\n      }\n    }\n\n    return headers;\n  }\n}\n\nfunction createSearchQueryForListRuns(query?: ListRunsQueryParams): URLSearchParams {\n  const searchParams = new URLSearchParams();\n\n  if (query) {\n    if (query.status) {\n      searchParams.append(\n        \"filter[status]\",\n        Array.isArray(query.status) ? query.status.join(\",\") : query.status\n      );\n    }\n\n    if (query.taskIdentifier) {\n      searchParams.append(\n        \"filter[taskIdentifier]\",\n        Array.isArray(query.taskIdentifier) ? query.taskIdentifier.join(\",\") : query.taskIdentifier\n      );\n    }\n\n    if (query.version) {\n      searchParams.append(\n        \"filter[version]\",\n        Array.isArray(query.version) ? query.version.join(\",\") : query.version\n      );\n    }\n\n    if (query.bulkAction) {\n      searchParams.append(\"filter[bulkAction]\", query.bulkAction);\n    }\n\n    if (query.tag) {\n      searchParams.append(\n        \"filter[tag]\",\n        Array.isArray(query.tag) ? query.tag.join(\",\") : query.tag\n      );\n    }\n\n    if (query.schedule) {\n      searchParams.append(\"filter[schedule]\", query.schedule);\n    }\n\n    if (typeof query.isTest === \"boolean\") {\n      searchParams.append(\"filter[isTest]\", String(query.isTest));\n    }\n\n    if (query.from) {\n      searchParams.append(\n        \"filter[createdAt][from]\",\n        query.from instanceof Date ? query.from.getTime().toString() : query.from.toString()\n      );\n    }\n\n    if (query.to) {\n      searchParams.append(\n        \"filter[createdAt][to]\",\n        query.to instanceof Date ? query.to.getTime().toString() : query.to.toString()\n      );\n    }\n\n    if (query.period) {\n      searchParams.append(\"filter[createdAt][period]\", query.period);\n    }\n  }\n\n  return searchParams;\n}\n\nexport function mergeRequestOptions(\n  defaultOptions: ZodFetchOptions,\n  options?: ApiRequestOptions\n): ZodFetchOptions {\n  if (!options) {\n    return defaultOptions;\n  }\n\n  return {\n    ...defaultOptions,\n    ...options,\n    retry: {\n      ...defaultOptions.retry,\n      ...options.retry,\n    },\n  };\n}\n", "import { z } from \"zod\";\nimport { fromZodError } from \"zod-validation-error\";\nimport { RetryOptions } from \"../schemas\";\nimport { calculateNextRetryDelay } from \"../utils/retries\";\nimport { ApiConnectionError, ApiError } from \"./errors\";\n\nimport { Attributes, Span } from \"@opentelemetry/api\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { accessoryAttributes } from \"../utils/styleAttributes\";\nimport {\n  CursorPage,\n  CursorPageParams,\n  CursorPageResponse,\n  OffsetLimitPage,\n  OffsetLimitPageParams,\n  OffsetLimitPageResponse,\n} from \"./pagination\";\n\nexport const defaultRetryOptions = {\n  maxAttempts: 3,\n  factor: 2,\n  minTimeoutInMs: 1000,\n  maxTimeoutInMs: 60000,\n  randomize: false,\n} satisfies RetryOptions;\n\nexport type ZodFetchOptions = {\n  retry?: RetryOptions;\n  tracer?: TriggerTracer;\n  name?: string;\n  attributes?: Attributes;\n  icon?: string;\n  onResponseBody?: (body: unknown, span: Span) => void;\n};\n\nexport type ApiRequestOptions = Pick<ZodFetchOptions, \"retry\">;\ntype KeysEnum<T> = { [P in keyof Required<T>]: true };\n\n// This is required so that we can determine if a given object matches the ApiRequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys: KeysEnum<ApiRequestOptions> = {\n  retry: true,\n};\n\nexport const isRequestOptions = (obj: unknown): obj is ApiRequestOptions => {\n  return (\n    typeof obj === \"object\" &&\n    obj !== null &&\n    !isEmptyObj(obj) &&\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\n  );\n};\n\ninterface FetchCursorPageParams extends CursorPageParams {\n  query?: URLSearchParams;\n}\n\ninterface FetchOffsetLimitPageParams extends OffsetLimitPageParams {\n  query?: URLSearchParams;\n}\n\nexport function zodfetch<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n): ApiPromise<z.output<TResponseBodySchema>> {\n  return new ApiPromise(_doZodFetch(schema, url, requestInit, options));\n}\n\nexport function zodfetchCursorPage<TItemSchema extends z.ZodTypeAny>(\n  schema: TItemSchema,\n  url: string,\n  params: FetchCursorPageParams,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n) {\n  const query = new URLSearchParams(params.query);\n\n  if (params.limit) {\n    query.set(\"page[size]\", String(params.limit));\n  }\n\n  if (params.after) {\n    query.set(\"page[after]\", params.after);\n  }\n\n  if (params.before) {\n    query.set(\"page[before]\", params.before);\n  }\n\n  const cursorPageSchema = z.object({\n    data: z.array(schema),\n    pagination: z.object({\n      next: z.string().optional(),\n      previous: z.string().optional(),\n    }),\n  });\n\n  const $url = new URL(url);\n  $url.search = query.toString();\n\n  const fetchResult = _doZodFetch(cursorPageSchema, $url.href, requestInit, options);\n\n  return new CursorPagePromise(fetchResult, schema, url, params, requestInit, options);\n}\n\nexport function zodfetchOffsetLimitPage<TItemSchema extends z.ZodTypeAny>(\n  schema: TItemSchema,\n  url: string,\n  params: FetchOffsetLimitPageParams,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions\n) {\n  const query = new URLSearchParams(params.query);\n\n  if (params.limit) {\n    query.set(\"perPage\", String(params.limit));\n  }\n\n  if (params.page) {\n    query.set(\"page\", String(params.page));\n  }\n\n  const offsetLimitPageSchema = z.object({\n    data: z.array(schema),\n    pagination: z.object({\n      currentPage: z.coerce.number(),\n      totalPages: z.coerce.number(),\n      count: z.coerce.number(),\n    }),\n  });\n\n  const $url = new URL(url);\n  $url.search = query.toString();\n\n  const fetchResult = _doZodFetch(offsetLimitPageSchema, $url.href, requestInit, options);\n\n  return new OffsetLimitPagePromise(fetchResult, schema, url, params, requestInit, options);\n}\n\ntype ZodFetchResult<T> = {\n  data: T;\n  response: Response;\n};\n\ntype PromiseOrValue<T> = T | Promise<T>;\n\nasync function traceZodFetch<T>(\n  params: {\n    url: string;\n    requestInit?: RequestInit;\n    options?: ZodFetchOptions;\n  },\n  callback: (span?: Span) => Promise<T>\n): Promise<T> {\n  if (!params.options?.tracer) {\n    return callback();\n  }\n\n  const url = new URL(params.url);\n  const method = params.requestInit?.method ?? \"GET\";\n  const name = params.options.name ?? `${method} ${url.pathname}`;\n\n  return await params.options.tracer.startActiveSpan(\n    name,\n    async (span) => {\n      return await callback(span);\n    },\n    {\n      attributes: {\n        [SemanticInternalAttributes.STYLE_ICON]: params.options?.icon ?? \"api\",\n        ...params.options.attributes,\n      },\n    }\n  );\n}\n\nasync function _doZodFetch<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: PromiseOrValue<RequestInit>,\n  options?: ZodFetchOptions\n): Promise<ZodFetchResult<z.output<TResponseBodySchema>>> {\n  const $requestInit = await requestInit;\n\n  return traceZodFetch({ url, requestInit: $requestInit, options }, async (span) => {\n    const result = await _doZodFetchWithRetries(schema, url, $requestInit, options);\n\n    if (options?.onResponseBody && span) {\n      options.onResponseBody(result.data, span);\n    }\n\n    return result;\n  });\n}\n\nasync function _doZodFetchWithRetries<TResponseBodySchema extends z.ZodTypeAny>(\n  schema: TResponseBodySchema,\n  url: string,\n  requestInit?: RequestInit,\n  options?: ZodFetchOptions,\n  attempt = 1\n): Promise<ZodFetchResult<z.output<TResponseBodySchema>>> {\n  try {\n    const response = await fetch(url, requestInitWithCache(requestInit));\n\n    const responseHeaders = createResponseHeaders(response.headers);\n\n    if (!response.ok) {\n      const retryResult = shouldRetry(response, attempt, options?.retry);\n\n      if (retryResult.retry) {\n        await waitForRetry(url, attempt + 1, retryResult.delay, options, requestInit, response);\n\n        return await _doZodFetchWithRetries(schema, url, requestInit, options, attempt + 1);\n      } else {\n        const errText = await response.text().catch((e) => castToError(e).message);\n        const errJSON = safeJsonParse(errText);\n        const errMessage = errJSON ? undefined : errText;\n\n        throw ApiError.generate(response.status, errJSON, errMessage, responseHeaders);\n      }\n    }\n\n    const jsonBody = await response.json();\n    const parsedResult = schema.safeParse(jsonBody);\n\n    if (parsedResult.success) {\n      return { data: parsedResult.data, response };\n    }\n\n    throw fromZodError(parsedResult.error);\n  } catch (error) {\n    if (error instanceof ApiError) {\n      throw error;\n    }\n\n    if (options?.retry) {\n      const retry = { ...defaultRetryOptions, ...options.retry };\n\n      const delay = calculateNextRetryDelay(retry, attempt);\n\n      if (delay) {\n        await waitForRetry(url, attempt + 1, delay, options, requestInit);\n\n        return await _doZodFetchWithRetries(schema, url, requestInit, options, attempt + 1);\n      }\n    }\n\n    throw new ApiConnectionError({ cause: castToError(error) });\n  }\n}\n\nfunction castToError(err: any): Error {\n  if (err instanceof Error) return err;\n  return new Error(err);\n}\n\ntype ShouldRetryResult =\n  | {\n      retry: false;\n    }\n  | {\n      retry: true;\n      delay: number;\n    };\n\nfunction shouldRetry(\n  response: Response,\n  attempt: number,\n  retryOptions?: RetryOptions\n): ShouldRetryResult {\n  function shouldRetryForOptions(): ShouldRetryResult {\n    const retry = { ...defaultRetryOptions, ...retryOptions };\n\n    const delay = calculateNextRetryDelay(retry, attempt);\n\n    if (delay) {\n      return { retry: true, delay };\n    } else {\n      return { retry: false };\n    }\n  }\n\n  // Note this is not a standard header.\n  const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n\n  // If the server explicitly says whether or not to retry, obey.\n  if (shouldRetryHeader === \"true\") return shouldRetryForOptions();\n  if (shouldRetryHeader === \"false\") return { retry: false };\n\n  // Retry on request timeouts.\n  if (response.status === 408) return shouldRetryForOptions();\n\n  // Retry on lock timeouts.\n  if (response.status === 409) return shouldRetryForOptions();\n\n  // Retry on rate limits.\n  if (response.status === 429) {\n    if (\n      attempt >= (typeof retryOptions?.maxAttempts === \"number\" ? retryOptions?.maxAttempts : 3)\n    ) {\n      return { retry: false };\n    }\n\n    // x-ratelimit-reset is the unix timestamp in milliseconds when the rate limit will reset.\n    const resetAtUnixEpochMs = response.headers.get(\"x-ratelimit-reset\");\n\n    if (resetAtUnixEpochMs) {\n      const resetAtUnixEpoch = parseInt(resetAtUnixEpochMs, 10);\n      const delay = resetAtUnixEpoch - Date.now() + Math.floor(Math.random() * 1000);\n\n      if (delay > 0) {\n        return { retry: true, delay };\n      }\n    }\n\n    return shouldRetryForOptions();\n  }\n\n  // Retry internal errors.\n  if (response.status >= 500) return shouldRetryForOptions();\n\n  return { retry: false };\n}\n\nfunction safeJsonParse(text: string): any {\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction createResponseHeaders(headers: Response[\"headers\"]): Record<string, string> {\n  return new Proxy(\n    Object.fromEntries(\n      // @ts-ignore\n      headers.entries()\n    ),\n    {\n      get(target, name) {\n        const key = name.toString();\n        return target[key.toLowerCase()] || target[key];\n      },\n    }\n  );\n}\n\nfunction requestInitWithCache(requestInit?: RequestInit): RequestInit {\n  try {\n    const withCache: RequestInit = {\n      ...requestInit,\n      cache: \"no-cache\",\n    };\n\n    const _ = new Request(\"http://localhost\", withCache);\n\n    return withCache;\n  } catch (error) {\n    return requestInit ?? {};\n  }\n}\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class ApiPromise<T> extends Promise<T> {\n  constructor(private responsePromise: Promise<ZodFetchResult<T>>) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n\n  /**\n   * Gets the parsed response data and the raw `Response` instance.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   */\n  async withResponse(): Promise<{ data: T; response: Response }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response };\n  }\n\n  private parse(): Promise<T> {\n    return this.responsePromise.then((result) => result.data);\n  }\n\n  override then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null\n  ): Promise<T | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\n    return this.parse().finally(onfinally);\n  }\n}\n\nexport class CursorPagePromise<TItemSchema extends z.ZodTypeAny>\n  extends ApiPromise<CursorPage<z.output<TItemSchema>>>\n  implements AsyncIterable<z.output<TItemSchema>>\n{\n  constructor(\n    result: Promise<ZodFetchResult<CursorPageResponse<z.output<TItemSchema>>>>,\n    private schema: TItemSchema,\n    private url: string,\n    private params: FetchCursorPageParams,\n    private requestInit?: RequestInit,\n    private options?: ZodFetchOptions\n  ) {\n    super(\n      result.then((result) => ({\n        data: new CursorPage(result.data.data, result.data.pagination, this.#fetchPage.bind(this)),\n        response: result.response,\n      }))\n    );\n  }\n\n  #fetchPage(params: Omit<CursorPageParams, \"limit\">): Promise<CursorPage<z.output<TItemSchema>>> {\n    return zodfetchCursorPage(\n      this.schema,\n      this.url,\n      { ...this.params, ...params },\n      this.requestInit,\n      this.options\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nexport class OffsetLimitPagePromise<TItemSchema extends z.ZodTypeAny>\n  extends ApiPromise<OffsetLimitPage<z.output<TItemSchema>>>\n  implements AsyncIterable<z.output<TItemSchema>>\n{\n  constructor(\n    result: Promise<ZodFetchResult<OffsetLimitPageResponse<z.output<TItemSchema>>>>,\n    private schema: TItemSchema,\n    private url: string,\n    private params: FetchOffsetLimitPageParams,\n    private requestInit?: RequestInit,\n    private options?: ZodFetchOptions\n  ) {\n    super(\n      result.then((result) => ({\n        data: new OffsetLimitPage(\n          result.data.data,\n          result.data.pagination,\n          this.#fetchPage.bind(this)\n        ),\n        response: result.response,\n      }))\n    );\n  }\n\n  #fetchPage(\n    params: Omit<FetchOffsetLimitPageParams, \"limit\">\n  ): Promise<OffsetLimitPage<z.output<TItemSchema>>> {\n    return zodfetchOffsetLimitPage(\n      this.schema,\n      this.url,\n      { ...this.params, ...params },\n      this.requestInit,\n      this.options\n    );\n  }\n\n  /**\n   * Allow auto-paginating iteration on an unawaited list call, eg:\n   *\n   *    for await (const item of client.items.list()) {\n   *      console.log(item)\n   *    }\n   */\n  async *[Symbol.asyncIterator]() {\n    const page = await this;\n    for await (const item of page) {\n      yield item;\n    }\n  }\n}\n\nasync function waitForRetry(\n  url: string,\n  attempt: number,\n  delay: number,\n  options?: ZodFetchOptions,\n  requestInit?: RequestInit,\n  response?: Response\n): Promise<void> {\n  if (options?.tracer) {\n    const method = requestInit?.method ?? \"GET\";\n\n    return options.tracer.startActiveSpan(\n      response ? `wait after ${response.status}` : `wait after error`,\n      async (span) => {\n        await new Promise((resolve) => setTimeout(resolve, delay));\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"wait\",\n          ...accessoryAttributes({\n            items: [\n              {\n                text: `retrying ${options?.name ?? method.toUpperCase()} in ${delay}ms`,\n                variant: \"normal\",\n              },\n            ],\n            style: \"codepath\",\n          }),\n        },\n      }\n    );\n  }\n\n  await new Promise((resolve) => setTimeout(resolve, delay));\n}\n\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\n  if (!obj) return true;\n  for (const _k in obj) return false;\n  return true;\n}\n\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj: Object, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n", "import { calculateResetAt as calculateResetAtInternal } from \"../../retry\";\nimport { FetchRetryOptions, type RetryOptions } from \"../schemas\";\n\nexport const defaultRetryOptions = {\n  maxAttempts: 3,\n  factor: 2,\n  minTimeoutInMs: 1000,\n  maxTimeoutInMs: 60000,\n  randomize: true,\n} satisfies RetryOptions;\n\nexport const defaultFetchRetryOptions = {\n  byStatus: {\n    \"429,408,409,5xx\": {\n      strategy: \"backoff\",\n      ...defaultRetryOptions,\n    },\n  },\n  connectionError: defaultRetryOptions,\n  timeout: defaultRetryOptions,\n} satisfies FetchRetryOptions;\n\n/**\n *\n * @param options\n * @param attempt - The current attempt number. If the first attempt has failed, this will be 1.\n * @returns\n */\nexport function calculateNextRetryDelay(options: RetryOptions, attempt: number) {\n  const opts = { ...defaultRetryOptions, ...options };\n\n  if (attempt >= opts.maxAttempts) {\n    return;\n  }\n\n  const { factor, minTimeoutInMs, maxTimeoutInMs, randomize } = opts;\n\n  const random = randomize ? Math.random() + 1 : 1;\n\n  const timeout = Math.min(maxTimeoutInMs, random * minTimeoutInMs * Math.pow(factor, attempt - 1));\n\n  // Round to the nearest integer\n  return Math.round(timeout);\n}\n\nexport function calculateResetAt(\n  resets: string | undefined | null,\n  format:\n    | \"unix_timestamp\"\n    | \"iso_8601\"\n    | \"iso_8601_duration_openai_variant\"\n    | \"unix_timestamp_in_ms\",\n  now: number = Date.now()\n): number | undefined {\n  const resetAt = calculateResetAtInternal(resets, format, new Date(now));\n\n  return resetAt?.getTime();\n}\n", "export type APIHeaders = Record<string, string | null | undefined>;\n\nexport class ApiError extends Error {\n  readonly status: number | undefined;\n  readonly headers: APIHeaders | undefined;\n  readonly error: Object | undefined;\n\n  readonly code: string | null | undefined;\n  readonly param: string | null | undefined;\n  readonly type: string | undefined;\n\n  constructor(\n    status: number | undefined,\n    error: Object | undefined,\n    message: string | undefined,\n    headers: APIHeaders | undefined\n  ) {\n    super(`${ApiError.makeMessage(status, error, message)}`);\n    this.name = \"TriggerApiError\";\n    this.status = status;\n    this.headers = headers;\n\n    const data = error as Record<string, any>;\n    this.error = data;\n    this.code = data?.[\"code\"];\n    this.param = data?.[\"param\"];\n    this.type = data?.[\"type\"];\n  }\n\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\n    const msg = error?.message\n      ? typeof error.message === \"string\"\n        ? error.message\n        : JSON.stringify(error.message)\n      : error\n      ? JSON.stringify(error)\n      : message;\n\n    if (status && msg) {\n      return `${status} ${msg}`;\n    }\n    if (status) {\n      return `${status} status code (no body)`;\n    }\n    if (msg) {\n      return msg;\n    }\n    return \"(no status code or body)\";\n  }\n\n  static generate(\n    status: number | undefined,\n    errorResponse: Object | undefined,\n    message: string | undefined,\n    headers: APIHeaders | undefined\n  ) {\n    if (!status) {\n      return new ApiConnectionError({ cause: castToError(errorResponse) });\n    }\n\n    const error = (errorResponse as Record<string, any>)?.[\"error\"];\n\n    if (status === 400) {\n      return new BadRequestError(status, error, message, headers);\n    }\n\n    if (status === 401) {\n      return new AuthenticationError(status, error, message, headers);\n    }\n\n    if (status === 403) {\n      return new PermissionDeniedError(status, error, message, headers);\n    }\n\n    if (status === 404) {\n      return new NotFoundError(status, error, message, headers);\n    }\n\n    if (status === 409) {\n      return new ConflictError(status, error, message, headers);\n    }\n\n    if (status === 422) {\n      return new UnprocessableEntityError(status, error, message, headers);\n    }\n\n    if (status === 429) {\n      return new RateLimitError(status, error, message, headers);\n    }\n\n    if (status >= 500) {\n      return new InternalServerError(status, error, message, headers);\n    }\n\n    return new ApiError(status, error, message, headers);\n  }\n}\n\nexport class ApiConnectionError extends ApiError {\n  override readonly status: undefined = undefined;\n\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\n    super(undefined, undefined, message || \"Connection error.\", undefined);\n    // in some environments the 'cause' property is already declared\n    // @ts-ignore\n    if (cause) this.cause = cause;\n  }\n}\n\nexport class BadRequestError extends ApiError {\n  override readonly status: 400 = 400;\n}\n\nexport class AuthenticationError extends ApiError {\n  override readonly status: 401 = 401;\n}\n\nexport class PermissionDeniedError extends ApiError {\n  override readonly status: 403 = 403;\n}\n\nexport class NotFoundError extends ApiError {\n  override readonly status: 404 = 404;\n}\n\nexport class ConflictError extends ApiError {\n  override readonly status: 409 = 409;\n}\n\nexport class UnprocessableEntityError extends ApiError {\n  override readonly status: 422 = 422;\n}\n\nexport class RateLimitError extends ApiError {\n  override readonly status: 429 = 429;\n\n  get millisecondsUntilReset(): number | undefined {\n    // x-ratelimit-reset is the unix timestamp in milliseconds when the rate limit will reset.\n    const resetAtUnixEpochMs = (this.headers ?? {})[\"x-ratelimit-reset\"];\n\n    if (typeof resetAtUnixEpochMs === \"string\") {\n      const resetAtUnixEpoch = parseInt(resetAtUnixEpochMs, 10);\n\n      if (isNaN(resetAtUnixEpoch)) {\n        return;\n      }\n\n      // Add between 0 and 2000ms to the reset time to add jitter\n      return Math.max(resetAtUnixEpoch - Date.now() + Math.floor(Math.random() * 2000), 0);\n    }\n  }\n}\n\nexport class InternalServerError extends ApiError {}\n\nfunction castToError(err: any): Error {\n  if (err instanceof Error) return err;\n  return new Error(err);\n}\n", "import { Attributes } from \"@opentelemetry/api\";\nimport { Accessory } from \"../schemas\";\nimport { flattenAttributes } from \"./flattenAttributes\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\n\nexport function accessoryAttributes(accessory: Accessory): Attributes {\n  return flattenAttributes(accessory, SemanticInternalAttributes.STYLE_ACCESSORY);\n}\n", "export interface CursorPageParams {\n  limit?: number;\n  after?: string;\n  before?: string;\n}\n\nexport interface OffsetLimitPageParams {\n  limit?: number;\n  page?: number;\n}\n\nexport interface PageResponse<Item> {\n  data: Array<Item>;\n}\n\nexport interface CursorPageResponse<Item> extends PageResponse<Item> {\n  pagination: {\n    next?: string;\n    previous?: string;\n  };\n}\n\nexport interface OffsetLimitPageResponse<Item> extends PageResponse<Item> {\n  pagination: {\n    currentPage: number;\n    totalPages: number;\n    count: number;\n  };\n}\n\nexport interface Page<Item> {\n  getPaginatedItems(): Item[];\n  hasNextPage(): boolean;\n  hasPreviousPage(): boolean;\n}\n\nexport class CursorPage<Item> implements CursorPageResponse<Item>, Page<Item>, AsyncIterable<Item> {\n  data: Array<Item>;\n  pagination: { next?: string; previous?: string };\n\n  constructor(\n    data: Array<Item>,\n    pagination: { next?: string; previous?: string },\n    private pageFetcher: (params: Omit<CursorPageParams, \"limit\">) => Promise<CursorPage<Item>>\n  ) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  hasNextPage(): boolean {\n    return !!this.pagination.next;\n  }\n\n  hasPreviousPage(): boolean {\n    return !!this.pagination.previous;\n  }\n\n  getNextPage(): Promise<CursorPage<Item>> {\n    if (!this.pagination.next) {\n      throw new Error(\"No next page available\");\n    }\n\n    return this.pageFetcher({ after: this.pagination.next });\n  }\n\n  getPreviousPage(): Promise<CursorPage<Item>> {\n    if (!this.pagination.previous) {\n      throw new Error(\"No previous page available\");\n    }\n\n    return this.pageFetcher({ before: this.pagination.previous });\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: CursorPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n\nexport class OffsetLimitPage<Item>\n  implements OffsetLimitPageResponse<Item>, Page<Item>, AsyncIterable<Item>\n{\n  data: Array<Item>;\n  pagination: { currentPage: number; totalPages: number; count: number };\n\n  constructor(\n    data: Array<Item>,\n    pagination: { currentPage: number; totalPages: number; count: number },\n    private pageFetcher: (\n      params: Omit<OffsetLimitPageParams, \"limit\">\n    ) => Promise<OffsetLimitPage<Item>>\n  ) {\n    this.data = data;\n    this.pagination = pagination;\n  }\n\n  getPaginatedItems(): Item[] {\n    return this.data ?? [];\n  }\n\n  hasNextPage(): boolean {\n    return this.pagination.currentPage < this.pagination.totalPages;\n  }\n\n  hasPreviousPage(): boolean {\n    return this.pagination.currentPage > 1;\n  }\n\n  getNextPage(): Promise<OffsetLimitPage<Item>> {\n    if (!this.hasNextPage()) {\n      throw new Error(\"No next page available\");\n    }\n\n    return this.pageFetcher({\n      page: this.pagination.currentPage + 1,\n    });\n  }\n\n  getPreviousPage(): Promise<OffsetLimitPage<Item>> {\n    if (!this.hasPreviousPage()) {\n      throw new Error(\"No previous page available\");\n    }\n\n    return this.pageFetcher({\n      page: this.pagination.currentPage - 1,\n    });\n  }\n\n  async *iterPages() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let page: OffsetLimitPage<Item> = this;\n    yield page;\n    while (page.hasNextPage()) {\n      page = await page.getNextPage();\n      yield page;\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const page of this.iterPages()) {\n      for (const item of page.getPaginatedItems()) {\n        yield item;\n      }\n    }\n  }\n}\n", "import { ApiClient } from \"../apiClient\";\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport { getEnvVar } from \"../utils/getEnv\";\nimport { ApiClientConfiguration } from \"./types\";\n\nconst API_NAME = \"api-client\";\n\nexport class APIClientManagerAPI {\n  private static _instance?: APIClientManagerAPI;\n\n  private constructor() {}\n\n  public static getInstance(): APIClientManagerAPI {\n    if (!this._instance) {\n      this._instance = new APIClientManagerAPI();\n    }\n\n    return this._instance;\n  }\n\n  public disable() {\n    unregisterGlobal(API_NAME);\n  }\n\n  public setGlobalAPIClientConfiguration(config: ApiClientConfiguration): boolean {\n    return registerGlobal(API_NAME, config);\n  }\n\n  get baseURL(): string | undefined {\n    const store = this.#getConfig();\n    return store?.baseURL ?? getEnvVar(\"TRIGGER_API_URL\") ?? \"https://api.trigger.dev\";\n  }\n\n  get accessToken(): string | undefined {\n    const store = this.#getConfig();\n    return store?.secretKey ?? getEnvVar(\"TRIGGER_SECRET_KEY\") ?? getEnvVar(\"TRIGGER_ACCESS_TOKEN\");\n  }\n\n  get client(): ApiClient | undefined {\n    if (!this.baseURL || !this.accessToken) {\n      return undefined;\n    }\n\n    return new ApiClient(this.baseURL, this.accessToken);\n  }\n\n  #getConfig(): ApiClientConfiguration | undefined {\n    return getGlobal(API_NAME);\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { APIClientManagerAPI } from \"./apiClientManager\";\n/** Entrypoint for logger API */\nexport const apiClientManager = APIClientManagerAPI.getInstance();\n\nexport type { ApiClientConfiguration } from \"./apiClientManager/types\";\n", "import { Attributes, Span } from \"@opentelemetry/api\";\nimport { OFFLOAD_IO_PACKET_LENGTH_LIMIT, imposeAttributeLimits } from \"../limits\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { flattenAttributes } from \"./flattenAttributes\";\nimport { apiClientManager } from \"../apiClientManager-api\";\n\nexport type IOPacket = {\n  data?: string | undefined;\n  dataType: string;\n};\n\nexport async function parsePacket(value: IOPacket): Promise<any> {\n  if (!value.data) {\n    return undefined;\n  }\n\n  switch (value.dataType) {\n    case \"application/json\":\n      return JSON.parse(value.data);\n    case \"application/super+json\":\n      const { parse } = await loadSuperJSON();\n\n      return parse(value.data);\n    case \"text/plain\":\n      return value.data;\n    case \"application/store\":\n      throw new Error(\n        `Cannot parse an application/store packet (${value.data}). Needs to be imported first.`\n      );\n    default:\n      return value.data;\n  }\n}\n\nexport async function stringifyIO(value: any): Promise<IOPacket> {\n  if (value === undefined) {\n    return { dataType: \"application/json\" };\n  }\n\n  if (typeof value === \"string\") {\n    return { data: value, dataType: \"text/plain\" };\n  }\n\n  try {\n    const { stringify } = await loadSuperJSON();\n    const data = stringify(value);\n\n    return { data, dataType: \"application/super+json\" };\n  } catch {\n    return { data: value, dataType: \"application/json\" };\n  }\n}\n\nexport async function conditionallyExportPacket(\n  packet: IOPacket,\n  pathPrefix: string,\n  tracer?: TriggerTracer\n): Promise<IOPacket> {\n  if (apiClientManager.client) {\n    const { needsOffloading, size } = packetRequiresOffloading(packet);\n\n    if (needsOffloading) {\n      if (!tracer) {\n        return await exportPacket(packet, pathPrefix);\n      } else {\n        const result = await tracer.startActiveSpan(\n          \"store.uploadOutput\",\n          async (span) => {\n            return await exportPacket(packet, pathPrefix);\n          },\n          {\n            attributes: {\n              byteLength: size,\n              [SemanticInternalAttributes.STYLE_ICON]: \"cloud-upload\",\n            },\n          }\n        );\n\n        return result ?? packet;\n      }\n    }\n  }\n\n  return packet;\n}\n\nexport function packetRequiresOffloading(\n  packet: IOPacket,\n  lengthLimit?: number\n): {\n  needsOffloading: boolean;\n  size: number;\n} {\n  if (!packet.data) {\n    return {\n      needsOffloading: false,\n      size: 0,\n    };\n  }\n\n  const byteSize = Buffer.byteLength(packet.data, \"utf8\");\n\n  return {\n    needsOffloading: byteSize >= (lengthLimit ?? OFFLOAD_IO_PACKET_LENGTH_LIMIT),\n    size: byteSize,\n  };\n}\n\nasync function exportPacket(packet: IOPacket, pathPrefix: string): Promise<IOPacket> {\n  // Offload the output\n  const filename = `${pathPrefix}.${getPacketExtension(packet.dataType)}`;\n\n  const presignedResponse = await apiClientManager.client!.createUploadPayloadUrl(filename);\n\n  const uploadResponse = await fetch(presignedResponse.presignedUrl, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": packet.dataType,\n    },\n    body: packet.data,\n  });\n\n  if (!uploadResponse.ok) {\n    throw new Error(\n      `Failed to upload output to ${presignedResponse.presignedUrl}: ${uploadResponse.statusText}`\n    );\n  }\n\n  return {\n    data: filename,\n    dataType: \"application/store\",\n  };\n}\n\nexport async function conditionallyImportPacket(\n  packet: IOPacket,\n  tracer?: TriggerTracer\n): Promise<IOPacket> {\n  if (packet.dataType !== \"application/store\") {\n    return packet;\n  }\n\n  if (!tracer) {\n    return await importPacket(packet);\n  } else {\n    const result = await tracer.startActiveSpan(\n      \"store.downloadPayload\",\n      async (span) => {\n        return await importPacket(packet, span);\n      },\n      {\n        attributes: {\n          [SemanticInternalAttributes.STYLE_ICON]: \"cloud-download\",\n        },\n      }\n    );\n\n    return result ?? packet;\n  }\n}\n\nasync function importPacket(packet: IOPacket, span?: Span): Promise<IOPacket> {\n  if (!packet.data) {\n    return packet;\n  }\n\n  if (!apiClientManager.client) {\n    return packet;\n  }\n\n  const presignedResponse = await apiClientManager.client.getPayloadUrl(packet.data);\n\n  const response = await fetch(presignedResponse.presignedUrl);\n\n  if (!response.ok) {\n    throw new Error(\n      `Failed to import packet ${presignedResponse.presignedUrl}: ${response.statusText}`\n    );\n  }\n\n  const data = await response.text();\n\n  span?.setAttribute(\"size\", Buffer.byteLength(data, \"utf8\"));\n\n  return {\n    data,\n    dataType: response.headers.get(\"content-type\") ?? \"application/json\",\n  };\n}\n\nexport async function createPacketAttributes(\n  packet: IOPacket,\n  dataKey: string,\n  dataTypeKey: string\n): Promise<Attributes | undefined> {\n  if (!packet.data) {\n    return;\n  }\n\n  switch (packet.dataType) {\n    case \"application/json\":\n      return {\n        ...flattenAttributes(packet, dataKey),\n        [dataTypeKey]: packet.dataType,\n      };\n    case \"application/super+json\":\n      const { parse } = await loadSuperJSON();\n\n      if (typeof packet.data === \"undefined\" || packet.data === null) {\n        return;\n      }\n\n      try {\n        const parsed = parse(packet.data) as any;\n        const jsonified = JSON.parse(JSON.stringify(parsed, safeReplacer));\n\n        const result = {\n          ...flattenAttributes(jsonified, dataKey),\n          [dataTypeKey]: \"application/json\",\n        };\n\n        return result;\n      } catch (e) {\n        return;\n      }\n\n    case \"application/store\":\n      return {\n        [dataKey]: packet.data,\n        [dataTypeKey]: packet.dataType,\n      };\n    case \"text/plain\":\n      return {\n        [dataKey]: packet.data,\n        [dataTypeKey]: packet.dataType,\n      };\n    default:\n      return;\n  }\n}\n\nexport async function createPacketAttributesAsJson(\n  data: any,\n  dataType: string\n): Promise<Attributes> {\n  if (\n    typeof data === \"string\" ||\n    typeof data === \"number\" ||\n    typeof data === \"boolean\" ||\n    data === null ||\n    data === undefined\n  ) {\n    return data;\n  }\n\n  switch (dataType) {\n    case \"application/json\":\n      return imposeAttributeLimits(flattenAttributes(data, undefined));\n    case \"application/super+json\":\n      const { deserialize } = await loadSuperJSON();\n\n      const deserialized = deserialize(data) as any;\n      const jsonify = safeJsonParse(JSON.stringify(deserialized, safeReplacer));\n\n      return imposeAttributeLimits(flattenAttributes(jsonify, undefined));\n    case \"application/store\":\n      return data;\n    default:\n      return {};\n  }\n}\n\nexport async function prettyPrintPacket(rawData: any, dataType?: string): Promise<string> {\n  if (rawData === undefined) {\n    return \"\";\n  }\n\n  if (dataType === \"application/super+json\") {\n    if (typeof rawData === \"string\") {\n      rawData = safeJsonParse(rawData);\n    }\n    const { deserialize } = await loadSuperJSON();\n\n    return await prettyPrintPacket(deserialize(rawData), \"application/json\");\n  }\n\n  if (dataType === \"application/json\") {\n    if (typeof rawData === \"string\") {\n      rawData = safeJsonParse(rawData);\n    }\n    return JSON.stringify(rawData, safeReplacer, 2);\n  }\n\n  if (typeof rawData === \"string\") {\n    return rawData;\n  }\n\n  return JSON.stringify(rawData, safeReplacer, 2);\n}\n\nfunction safeReplacer(key: string, value: any) {\n  // If it is a BigInt\n  if (typeof value === \"bigint\") {\n    return value.toString(); // Convert to string\n  }\n\n  // if it is a Regex\n  if (value instanceof RegExp) {\n    return value.toString(); // Convert to string\n  }\n\n  // if it is a Set\n  if (value instanceof Set) {\n    return Array.from(value); // Convert to array\n  }\n\n  // if it is a Map, convert it to an object\n  if (value instanceof Map) {\n    const obj: Record<string, any> = {};\n    value.forEach((v, k) => {\n      obj[k] = v;\n    });\n    return obj;\n  }\n\n  return value; // Otherwise return the value as is\n}\n\nfunction getPacketExtension(outputType: string): string {\n  switch (outputType) {\n    case \"application/json\":\n      return \"json\";\n    case \"application/super+json\":\n      return \"json\";\n    case \"text/plain\":\n      return \"txt\";\n    default:\n      return \"txt\";\n  }\n}\n\nasync function loadSuperJSON(): Promise<typeof import(\"superjson\")> {\n  return await import(\"superjson\");\n}\n\nfunction safeJsonParse(value: string): any {\n  try {\n    return JSON.parse(value);\n  } catch {\n    return;\n  }\n}\n\nexport async function replaceSuperJsonPayload(original: string, newPayload: string) {\n  const superjson = await loadSuperJSON();\n  const originalObject = superjson.parse(original);\n  const { meta } = superjson.serialize(originalObject);\n\n  const newSuperJson = {\n    json: JSON.parse(newPayload) as any,\n    meta,\n  };\n\n  return superjson.deserialize(newSuperJson);\n}\n", "import { PreciseDate } from \"@google-cloud/precise-date\";\nimport { Clock, ClockTime } from \"./clock\";\n\nexport type PreciseWallClockOptions = {\n  origin?: ClockTime;\n  now?: PreciseDate;\n};\n\nexport class PreciseWallClock implements Clock {\n  private _origin: {\n    clockTime: ClockTime;\n    preciseDate: PreciseDate;\n  };\n\n  get #originClockTime() {\n    return this._origin.clockTime;\n  }\n\n  get #originPreciseDate() {\n    return this._origin.preciseDate;\n  }\n\n  constructor(options: PreciseWallClockOptions = {}) {\n    this._origin = {\n      clockTime: options.origin ?? process.hrtime(),\n      preciseDate: options.now ?? new PreciseDate(),\n    };\n  }\n\n  preciseNow(): [number, number] {\n    const elapsedHrTime = process.hrtime(this.#originClockTime);\n    const elapsedNanoseconds = BigInt(elapsedHrTime[0]) * BigInt(1e9) + BigInt(elapsedHrTime[1]);\n\n    const preciseDate = new PreciseDate(this.#originPreciseDate.getFullTime() + elapsedNanoseconds);\n    const dateStruct = preciseDate.toStruct();\n\n    return [dateStruct.seconds, dateStruct.nanos];\n  }\n\n  reset() {\n    this._origin = {\n      clockTime: process.hrtime(),\n      preciseDate: new PreciseDate(),\n    };\n  }\n}\n", "import { Attributes, Span, SpanOptions } from \"@opentelemetry/api\";\nimport { Logger, SeverityNumber } from \"@opentelemetry/api-logs\";\nimport { iconStringForSeverity } from \"../icons\";\nimport { SemanticInternalAttributes } from \"../semanticInternalAttributes\";\nimport { TriggerTracer } from \"../tracer\";\nimport { flattenAttributes } from \"../utils/flattenAttributes\";\nimport { ClockTime } from \"../clock/clock\";\nimport { clock } from \"../clock-api\";\n\nexport type LogLevel = \"none\" | \"error\" | \"warn\" | \"info\" | \"debug\" | \"log\";\n\nexport const logLevels: Array<LogLevel> = [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\nexport type TaskLoggerConfig = {\n  logger: Logger;\n  tracer: TriggerTracer;\n  level: LogLevel;\n};\n\nexport interface TaskLogger {\n  debug(message: string, properties?: Record<string, unknown>): void;\n  log(message: string, properties?: Record<string, unknown>): void;\n  info(message: string, properties?: Record<string, unknown>): void;\n  warn(message: string, properties?: Record<string, unknown>): void;\n  error(message: string, properties?: Record<string, unknown>): void;\n  trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: SpanOptions): Promise<T>;\n}\n\nexport class OtelTaskLogger implements TaskLogger {\n  private readonly _level: number;\n\n  constructor(private readonly _config: TaskLoggerConfig) {\n    this._level = logLevels.indexOf(_config.level);\n  }\n\n  debug(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 4) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"debug\", SeverityNumber.DEBUG, properties);\n  }\n\n  log(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 3) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"log\", SeverityNumber.INFO, properties);\n  }\n\n  info(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 3) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"info\", SeverityNumber.INFO, properties);\n  }\n\n  warn(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 2) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"warn\", SeverityNumber.WARN, properties);\n  }\n\n  error(message: string, properties?: Record<string, unknown>) {\n    if (this._level < 1) return; // [\"none\", \"error\", \"warn\", \"info\", \"debug\"];\n\n    this.#emitLog(message, this.#getTimestampInHrTime(), \"error\", SeverityNumber.ERROR, properties);\n  }\n\n  #emitLog(\n    message: string,\n    timestamp: ClockTime,\n    severityText: string,\n    severityNumber: SeverityNumber,\n    properties?: Record<string, unknown>\n  ) {\n    let attributes: Attributes = { ...flattenAttributes(safeJsonProcess(properties)) };\n\n    const icon = iconStringForSeverity(severityNumber);\n    if (icon !== undefined) {\n      attributes[SemanticInternalAttributes.STYLE_ICON] = icon;\n    }\n\n    this._config.logger.emit({\n      severityNumber,\n      severityText,\n      body: message,\n      attributes,\n      timestamp,\n    });\n  }\n\n  trace<T>(name: string, fn: (span: Span) => Promise<T>, options?: SpanOptions): Promise<T> {\n    return this._config.tracer.startActiveSpan(name, fn, options);\n  }\n\n  #getTimestampInHrTime(): ClockTime {\n    return clock.preciseNow();\n  }\n}\n\nexport class NoopTaskLogger implements TaskLogger {\n  debug() {}\n  log() {}\n  info() {}\n  warn() {}\n  error() {}\n  trace<T>(name: string, fn: (span: Span) => Promise<T>): Promise<T> {\n    return fn({} as Span);\n  }\n}\n\nfunction safeJsonProcess(value?: Record<string, unknown>): Record<string, unknown> | undefined {\n  try {\n    return JSON.parse(JSON.stringify(value, jsonErrorReplacer));\n  } catch {\n    return value;\n  }\n}\n\nfunction jsonErrorReplacer(key: string, value: unknown) {\n  if (value instanceof Error) {\n    return {\n      name: value.name,\n      message: value.message,\n      stack: value.stack,\n    };\n  }\n\n  return value;\n}\n", "import { SeverityNumber } from \"@opentelemetry/api-logs\";\n\nexport function iconStringForSeverity(severityNumber: SeverityNumber) {\n  switch (severityNumber) {\n    case SeverityNumber.UNSPECIFIED:\n      return undefined;\n    case SeverityNumber.TRACE:\n    case SeverityNumber.TRACE2:\n    case SeverityNumber.TRACE3:\n    case SeverityNumber.TRACE4:\n      return \"trace\";\n    case SeverityNumber.DEBUG:\n    case SeverityNumber.DEBUG2:\n    case SeverityNumber.DEBUG3:\n    case SeverityNumber.DEBUG4:\n      return \"debug\";\n    case SeverityNumber.INFO:\n    case SeverityNumber.INFO2:\n    case SeverityNumber.INFO3:\n    case SeverityNumber.INFO4:\n      return \"info\";\n    case SeverityNumber.WARN:\n    case SeverityNumber.WARN2:\n    case SeverityNumber.WARN3:\n    case SeverityNumber.WARN4:\n      return \"warn\";\n    case SeverityNumber.ERROR:\n    case SeverityNumber.ERROR2:\n    case SeverityNumber.ERROR3:\n    case SeverityNumber.ERROR4:\n      return \"error\";\n    case SeverityNumber.FATAL:\n    case SeverityNumber.FATAL2:\n    case SeverityNumber.FATAL3:\n    case SeverityNumber.FATAL4:\n      return \"fatal\";\n  }\n}\n", "import { PreciseDate } from \"@google-cloud/precise-date\";\nimport { Clock } from \"./clock\";\n\nexport class SimpleClock implements Clock {\n  preciseNow(): [number, number] {\n    const now = new PreciseDate();\n    const nowStruct = now.toStruct();\n\n    return [nowStruct.seconds, nowStruct.nanos];\n  }\n\n  reset() {\n    // do nothing\n  }\n}\n", "const API_NAME = \"clock\";\n\nimport { getGlobal, registerGlobal } from \"../utils/globals\";\nimport type { Clock, ClockTime } from \"./clock\";\nimport { SimpleClock } from \"./simpleClock\";\n\nconst SIMPLE_CLOCK = new SimpleClock();\n\nexport class ClockAPI {\n  private static _instance?: ClockAPI;\n\n  private constructor() {}\n\n  public static getInstance(): ClockAPI {\n    if (!this._instance) {\n      this._instance = new ClockAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalClock(clock: Clock): boolean {\n    return registerGlobal(API_NAME, clock);\n  }\n\n  public preciseNow(): ClockTime {\n    return this.#getClock().preciseNow();\n  }\n\n  public reset(): void {\n    this.#getClock().reset();\n  }\n\n  #getClock(): Clock {\n    return getGlobal(API_NAME) ?? SIMPLE_CLOCK;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ClockAPI } from \"./clock\";\n/** Entrypoint for clock API */\nexport const clock = ClockAPI.getInstance();\n", "import type * as logsAPI from \"@opentelemetry/api-logs\";\nimport { SeverityNumber } from \"@opentelemetry/api-logs\";\nimport util from \"node:util\";\nimport { iconStringForSeverity } from \"./icons\";\nimport { SemanticInternalAttributes } from \"./semanticInternalAttributes\";\nimport { flattenAttributes } from \"./utils/flattenAttributes\";\nimport { ClockTime } from \"./clock/clock\";\nimport { clock } from \"./clock-api\";\n\nexport class ConsoleInterceptor {\n  constructor(\n    private readonly logger: logsAPI.Logger,\n    private readonly sendToStdIO: boolean\n  ) {}\n\n  // Intercept the console and send logs to the OpenTelemetry logger\n  // during the execution of the callback\n  async intercept<T>(console: Console, callback: () => Promise<T>): Promise<T> {\n    // Save the original console methods\n    const originalConsole = {\n      log: console.log,\n      info: console.info,\n      warn: console.warn,\n      error: console.error,\n      debug: console.debug,\n    };\n\n    // Override the console methods\n    console.log = this.log.bind(this);\n    console.info = this.info.bind(this);\n    console.warn = this.warn.bind(this);\n    console.error = this.error.bind(this);\n    console.debug = this.debug.bind(this);\n\n    try {\n      return await callback();\n    } finally {\n      // Restore the original console methods\n      console.log = originalConsole.log;\n      console.info = originalConsole.info;\n      console.warn = originalConsole.warn;\n      console.error = originalConsole.error;\n      console.debug = originalConsole.debug;\n    }\n  }\n\n  debug(...args: unknown[]): void {\n    this.#handleLog(SeverityNumber.DEBUG, this.#getTimestampInHrTime(), \"Debug\", ...args);\n  }\n\n  log(...args: unknown[]): void {\n    this.#handleLog(SeverityNumber.INFO, this.#getTimestampInHrTime(), \"Log\", ...args);\n  }\n\n  info(...args: unknown[]): void {\n    this.#handleLog(SeverityNumber.INFO, this.#getTimestampInHrTime(), \"Info\", ...args);\n  }\n\n  warn(...args: unknown[]): void {\n    this.#handleLog(SeverityNumber.WARN, this.#getTimestampInHrTime(), \"Warn\", ...args);\n  }\n\n  error(...args: unknown[]): void {\n    this.#handleLog(SeverityNumber.ERROR, this.#getTimestampInHrTime(), \"Error\", ...args);\n  }\n\n  #handleLog(\n    severityNumber: SeverityNumber,\n    timestamp: ClockTime,\n    severityText: string,\n    ...args: unknown[]\n  ): void {\n    const body = util.format(...args);\n\n    if (this.sendToStdIO) {\n      if (severityNumber === SeverityNumber.ERROR) {\n        process.stderr.write(body);\n      } else {\n        process.stdout.write(body);\n      }\n    }\n\n    const parsed = tryParseJSON(body);\n\n    if (parsed.ok) {\n      this.logger.emit({\n        severityNumber,\n        severityText,\n        body: getLogMessage(parsed.value, severityText),\n        attributes: { ...this.#getAttributes(severityNumber), ...flattenAttributes(parsed.value) },\n        timestamp,\n      });\n\n      return;\n    }\n\n    this.logger.emit({\n      severityNumber,\n      severityText,\n      body,\n      attributes: this.#getAttributes(severityNumber),\n      timestamp,\n    });\n  }\n\n  #getTimestampInHrTime(): ClockTime {\n    return clock.preciseNow();\n  }\n\n  #getAttributes(severityNumber: SeverityNumber): logsAPI.LogAttributes {\n    const icon = iconStringForSeverity(severityNumber);\n    let result: logsAPI.LogAttributes = {};\n\n    if (icon !== undefined) {\n      result[SemanticInternalAttributes.STYLE_ICON] = icon;\n    }\n\n    return result;\n  }\n}\n\nfunction getLogMessage(value: Record<string, unknown>, fallback: string): string {\n  if (typeof value[\"message\"] === \"string\") {\n    return value[\"message\"];\n  }\n\n  if (typeof value[\"msg\"] === \"string\") {\n    return value[\"msg\"];\n  }\n\n  if (typeof value[\"body\"] === \"string\") {\n    return value[\"body\"];\n  }\n\n  if (typeof value[\"error\"] === \"string\") {\n    return value[\"error\"];\n  }\n\n  return fallback;\n}\n\nfunction tryParseJSON(\n  value: string\n): { ok: true; value: Record<string, unknown> } | { ok: false; value: string } {\n  try {\n    const parsed = JSON.parse(value);\n\n    if (typeof parsed === \"object\" && parsed !== null && !Array.isArray(parsed)) {\n      return { ok: true, value: parsed };\n    }\n\n    return { ok: false, value };\n  } catch (e) {\n    return { ok: false, value };\n  }\n}\n", "import { TaskFileMetadata, TaskMetadata, TaskMetadataWithFilePath } from \"../schemas\";\nimport { TaskMetadataWithFunctions } from \"../types\";\nimport { TaskCatalog } from \"./catalog\";\n\nexport class StandardTaskCatalog implements TaskCatalog {\n  private _taskMetadata: Map<string, TaskMetadata> = new Map();\n  private _taskFunctions: Map<string, TaskMetadataWithFunctions[\"fns\"]> = new Map();\n  private _taskFileMetadata: Map<string, TaskFileMetadata> = new Map();\n\n  registerTaskMetadata(task: TaskMetadataWithFunctions): void {\n    const { fns, ...metadata } = task;\n\n    this._taskMetadata.set(task.id, metadata);\n    this._taskFunctions.set(task.id, fns);\n  }\n\n  updateTaskMetadata(id: string, updates: Partial<TaskMetadataWithFunctions>): void {\n    const existingMetadata = this._taskMetadata.get(id);\n\n    if (existingMetadata) {\n      this._taskMetadata.set(id, {\n        ...existingMetadata,\n        ...updates,\n      });\n    }\n\n    if (updates.fns) {\n      const existingFunctions = this._taskFunctions.get(id);\n\n      if (existingFunctions) {\n        this._taskFunctions.set(id, {\n          ...existingFunctions,\n          ...updates.fns,\n        });\n      }\n    }\n  }\n\n  registerTaskFileMetadata(id: string, metadata: TaskFileMetadata): void {\n    this._taskFileMetadata.set(id, metadata);\n  }\n\n  // Return all the tasks, without the functions\n  getAllTaskMetadata(): Array<TaskMetadataWithFilePath> {\n    const result: Array<TaskMetadataWithFilePath> = [];\n\n    for (const [id, metadata] of this._taskMetadata) {\n      const fileMetadata = this._taskFileMetadata.get(id);\n\n      if (!fileMetadata) {\n        continue;\n      }\n\n      result.push({\n        ...metadata,\n        ...fileMetadata,\n      });\n    }\n\n    return result;\n  }\n\n  getTaskMetadata(id: string): TaskMetadataWithFilePath | undefined {\n    const metadata = this._taskMetadata.get(id);\n    const fileMetadata = this._taskFileMetadata.get(id);\n\n    if (!metadata || !fileMetadata) {\n      return undefined;\n    }\n\n    return {\n      ...metadata,\n      ...fileMetadata,\n    };\n  }\n\n  getTask(id: string): TaskMetadataWithFunctions | undefined {\n    const metadata = this._taskMetadata.get(id);\n    const fileMetadata = this._taskFileMetadata.get(id);\n    const fns = this._taskFunctions.get(id);\n\n    if (!metadata || !fns || !fileMetadata) {\n      return undefined;\n    }\n\n    return {\n      ...metadata,\n      ...fileMetadata,\n      fns,\n    };\n  }\n\n  taskExists(id: string): boolean {\n    return this._taskMetadata.has(id);\n  }\n\n  disable() {\n    // noop\n  }\n}\n", "import { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\n\nexport class NoopUsageManager implements UsageManager {\n  disable(): void {\n    // Noop\n  }\n\n  start(): UsageMeasurement {\n    return {\n      sample: () => ({ cpuTime: 0, wallTime: 0 }),\n    };\n  }\n\n  stop(measurement: UsageMeasurement): UsageSample {\n    return measurement.sample();\n  }\n\n  pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    return cb();\n  }\n\n  sample(): UsageSample | undefined {\n    return undefined;\n  }\n}\n", "const API_NAME = \"usage\";\n\nimport { getGlobal, registerGlobal, unregisterGlobal } from \"../utils/globals\";\nimport type { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\nimport { NoopUsageManager } from \"./noopUsageManager\";\n\nconst NOOP_USAGE_MANAGER = new NoopUsageManager();\n\nexport class UsageAPI implements UsageManager {\n  private static _instance?: UsageAPI;\n\n  private constructor() {}\n\n  public static getInstance(): UsageAPI {\n    if (!this._instance) {\n      this._instance = new UsageAPI();\n    }\n\n    return this._instance;\n  }\n\n  public setGlobalUsageManager(manager: UsageManager): boolean {\n    return registerGlobal(API_NAME, manager);\n  }\n\n  public disable() {\n    this.#getUsageManager().disable();\n    unregisterGlobal(API_NAME);\n  }\n\n  public start(): UsageMeasurement {\n    return this.#getUsageManager().start();\n  }\n\n  public stop(measurement: UsageMeasurement): UsageSample {\n    return this.#getUsageManager().stop(measurement);\n  }\n\n  public pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    return this.#getUsageManager().pauseAsync(cb);\n  }\n\n  public sample(): UsageSample | undefined {\n    return this.#getUsageManager().sample();\n  }\n\n  #getUsageManager(): UsageManager {\n    return getGlobal(API_NAME) ?? NOOP_USAGE_MANAGER;\n  }\n}\n", "// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { UsageAPI } from \"./usage/api\";\n/** Entrypoint for usage API */\nexport const usage = UsageAPI.getInstance();\n", "/**\n * Contains two parts: the first part is the seconds, the second part is the nanoseconds.\n *\n */\nexport type ClockTime = [number, number];\n\nexport interface Clock {\n  preciseNow(): ClockTime;\n  reset(): void;\n}\n\nexport function calculateDurationInMs(start: ClockTime, end: ClockTime): number {\n  const [startSeconds, startNanoseconds] = start;\n  const [endSeconds, endNanoseconds] = end;\n\n  const seconds = endSeconds - startSeconds;\n  const nanoseconds = endNanoseconds - startNanoseconds;\n\n  return Math.floor(seconds * 1000 + nanoseconds / 1000000);\n}\n", "import { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\nimport { clock } from \"../clock-api\";\nimport { ClockTime, calculateDurationInMs } from \"../clock/clock\";\n\nclass DevUsageMeasurement implements UsageMeasurement {\n  private _pauses: Map<string, { start: ClockTime; end?: ClockTime }> = new Map();\n  private _endedAt: ClockTime | undefined;\n\n  constructor(\n    public readonly id: string,\n    private startedAt: ClockTime = clock.preciseNow()\n  ) {}\n\n  stop() {\n    this._endedAt = clock.preciseNow();\n  }\n\n  sample(): UsageSample {\n    const endedAt = this._endedAt ?? clock.preciseNow();\n\n    const wallTime = this.startedAt ? calculateDurationInMs(this.startedAt, endedAt) : 0;\n\n    if (wallTime === 0) {\n      return { cpuTime: 0, wallTime: 0 };\n    }\n\n    const totalPauses = Array.from(this._pauses.values()).reduce((total, pause) => {\n      return total + calculateDurationInMs(pause.start, pause.end ?? endedAt);\n    }, 0);\n\n    const cpuTime = wallTime - totalPauses;\n\n    return {\n      wallTime,\n      cpuTime,\n    };\n  }\n\n  registerPause(pauseId: string, start: ClockTime, end?: ClockTime) {\n    this._pauses.set(pauseId, { start, end });\n  }\n}\n\nexport class DevUsageManager implements UsageManager {\n  private _firstMeasurement?: DevUsageMeasurement;\n  private _currentMeasurements: Map<string, DevUsageMeasurement> = new Map();\n  private _pauses: Map<string, { start: ClockTime; end?: ClockTime }> = new Map();\n\n  disable(): void {}\n\n  sample(): UsageSample | undefined {\n    return this._firstMeasurement?.sample();\n  }\n\n  start(): DevUsageMeasurement {\n    // generate a random ID\n    const id = generateRandomString();\n\n    const measurement = new DevUsageMeasurement(id);\n\n    if (!this._firstMeasurement) {\n      this._firstMeasurement = measurement;\n    }\n\n    this._currentMeasurements.set(id, measurement);\n\n    return measurement;\n  }\n\n  stop(measurement: DevUsageMeasurement): UsageSample {\n    measurement.stop();\n\n    const sample = measurement.sample();\n\n    this._currentMeasurements.delete(measurement.id);\n\n    return sample;\n  }\n\n  async pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    const pauseId = generateRandomString();\n\n    const pauseStart = clock.preciseNow();\n\n    try {\n      this._pauses.set(pauseId, { start: pauseStart });\n\n      for (const measurement of this._currentMeasurements.values()) {\n        measurement.registerPause(pauseId, pauseStart);\n      }\n\n      return await cb();\n    } finally {\n      const pauseEnd = clock.preciseNow();\n\n      this._pauses.set(pauseId, { start: pauseStart, end: pauseEnd });\n\n      for (const measurement of this._currentMeasurements.values()) {\n        measurement.registerPause(pauseId, pauseStart, pauseEnd);\n      }\n    }\n  }\n}\n\nfunction generateRandomString() {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n\n  for (var i = 0; i < 16; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n", "import { setInterval } from \"node:timers/promises\";\nimport { UsageManager, UsageMeasurement, UsageSample } from \"./types\";\nimport { UsageClient } from \"./usageClient\";\n\nexport type ProdUsageManagerOptions = {\n  heartbeatIntervalMs?: number;\n  url?: string;\n  jwt?: string;\n};\n\nexport class ProdUsageManager implements UsageManager {\n  private _measurement: UsageMeasurement | undefined;\n  private _abortController: AbortController | undefined;\n  private _lastSample: UsageSample | undefined;\n  private _usageClient: UsageClient | undefined;\n\n  constructor(\n    private readonly delegageUsageManager: UsageManager,\n    private readonly options: ProdUsageManagerOptions\n  ) {\n    if (this.options.url && this.options.jwt) {\n      this._usageClient = new UsageClient(this.options.url, this.options.jwt);\n    }\n  }\n\n  get isReportingEnabled() {\n    return typeof this._usageClient !== \"undefined\";\n  }\n\n  disable(): void {\n    this.delegageUsageManager.disable();\n    this._abortController?.abort();\n  }\n\n  sample(): UsageSample | undefined {\n    return this._measurement?.sample();\n  }\n\n  start(): UsageMeasurement {\n    if (!this.isReportingEnabled || !this.options.heartbeatIntervalMs) {\n      return this.delegageUsageManager.start();\n    }\n\n    if (!this._measurement) {\n      this._measurement = this.delegageUsageManager.start();\n\n      this.#startReportingHeartbeat().catch(console.error);\n\n      return this._measurement;\n    }\n\n    return this.delegageUsageManager.start();\n  }\n\n  stop(measurement: UsageMeasurement): UsageSample {\n    return this.delegageUsageManager.stop(measurement);\n  }\n\n  async pauseAsync<T>(cb: () => Promise<T>): Promise<T> {\n    return this.delegageUsageManager.pauseAsync(cb);\n  }\n\n  async #startReportingHeartbeat() {\n    if (!this._measurement || !this.isReportingEnabled || !this.options.heartbeatIntervalMs) {\n      return;\n    }\n\n    this._abortController = new AbortController();\n\n    for await (const _ of setInterval(this.options.heartbeatIntervalMs)) {\n      if (this._abortController.signal.aborted) {\n        break;\n      }\n\n      await this.#reportUsage();\n    }\n  }\n\n  async flush() {\n    return await this.#reportUsage();\n  }\n\n  async #reportUsage() {\n    if (!this._measurement) {\n      return;\n    }\n\n    if (!this.isReportingEnabled) {\n      return;\n    }\n\n    const client = this._usageClient;\n\n    if (!client) {\n      return;\n    }\n\n    const sample = this._measurement.sample();\n\n    const cpuTimeSinceLastSample = this._lastSample\n      ? sample.cpuTime - this._lastSample.cpuTime\n      : sample.cpuTime;\n\n    this._lastSample = sample;\n\n    if (cpuTimeSinceLastSample <= 0) {\n      return;\n    }\n\n    await client.sendUsageEvent({ durationMs: cpuTimeSinceLastSample });\n  }\n}\n", "import { apiClientManager } from \"../apiClientManager-api\";\n\nexport type UsageClientOptions = {\n  token: string;\n  baseUrl: string;\n};\n\nexport type UsageEvent = {\n  durationMs: number;\n};\n\nexport class UsageClient {\n  constructor(\n    private readonly url: string,\n    private jwt: string\n  ) {}\n\n  async sendUsageEvent(event: UsageEvent): Promise<void> {\n    try {\n      const response = await fetch(this.url, {\n        method: \"POST\",\n        body: JSON.stringify(event),\n        headers: {\n          \"content-type\": \"application/json\",\n          \"x-trigger-jwt\": this.jwt,\n          accept: \"application/json\",\n          authorization: `Bearer ${apiClientManager.accessToken}`, // this is used to renew the JWT\n        },\n      });\n\n      if (response.ok) {\n        const renewedJwt = response.headers.get(\"x-trigger-jwt\");\n\n        if (renewedJwt) {\n          this.jwt = renewedJwt;\n        }\n      }\n    } catch (error) {\n      console.error(`Failed to send usage event: ${error}`);\n    }\n  }\n}\n", "import { setInterval, setTimeout } from \"node:timers/promises\";\n\nexport async function unboundedTimeout<T = void>(\n  delay: number = 0,\n  value?: T,\n  options?: Parameters<typeof setTimeout>[2]\n): Promise<T> {\n  const maxDelay = 2147483647; // Highest value that will fit in a 32-bit signed integer\n\n  const fullTimeouts = Math.floor(delay / maxDelay);\n  const remainingDelay = delay % maxDelay;\n\n  let lastTimeoutResult = await setTimeout(remainingDelay, value, options);\n\n  for (let i = 0; i < fullTimeouts; i++) {\n    lastTimeoutResult = await setTimeout(maxDelay, value, options);\n  }\n\n  return lastTimeoutResult;\n}\n\nexport async function checkpointSafeTimeout(delay: number = 0): Promise<void> {\n  const scanIntervalMs = 1000;\n\n  // Every scanIntervalMs, check if delay has elapsed\n  for await (const start of setInterval(scanIntervalMs, Date.now())) {\n    if (Date.now() - start > delay) {\n      break;\n    }\n  }\n}\n", "import {\n  BatchTaskRunExecutionResult,\n  TaskRunContext,\n  TaskRunExecution,\n  TaskRunExecutionResult,\n} from \"../schemas\";\nimport { RuntimeManager } from \"./manager\";\nimport { unboundedTimeout } from \"../utils/timers\";\n\nexport class DevRuntimeManager implements RuntimeManager {\n  _taskWaits: Map<string, { resolve: (value: TaskRunExecutionResult) => void }> = new Map();\n\n  _batchWaits: Map<\n    string,\n    { resolve: (value: BatchTaskRunExecutionResult) => void; reject: (err?: any) => void }\n  > = new Map();\n\n  _pendingCompletionNotifications: Map<string, TaskRunExecutionResult> = new Map();\n\n  disable(): void {\n    // do nothing\n  }\n\n  async waitForDuration(ms: number): Promise<void> {\n    await unboundedTimeout(ms);\n  }\n\n  async waitUntil(date: Date): Promise<void> {\n    return this.waitForDuration(date.getTime() - Date.now());\n  }\n\n  async waitForTask(params: { id: string; ctx: TaskRunContext }): Promise<TaskRunExecutionResult> {\n    const pendingCompletion = this._pendingCompletionNotifications.get(params.id);\n\n    if (pendingCompletion) {\n      this._pendingCompletionNotifications.delete(params.id);\n\n      return pendingCompletion;\n    }\n\n    const promise = new Promise<TaskRunExecutionResult>((resolve) => {\n      this._taskWaits.set(params.id, { resolve });\n    });\n\n    return await promise;\n  }\n\n  async waitForBatch(params: {\n    id: string;\n    runs: string[];\n    ctx: TaskRunContext;\n  }): Promise<BatchTaskRunExecutionResult> {\n    if (!params.runs.length) {\n      return Promise.resolve({ id: params.id, items: [] });\n    }\n\n    const promise = Promise.all(\n      params.runs.map((runId) => {\n        return new Promise<TaskRunExecutionResult>((resolve, reject) => {\n          const pendingCompletion = this._pendingCompletionNotifications.get(runId);\n\n          if (pendingCompletion) {\n            this._pendingCompletionNotifications.delete(runId);\n\n            resolve(pendingCompletion);\n\n            return;\n          }\n\n          this._taskWaits.set(runId, { resolve });\n        });\n      })\n    );\n\n    const results = await promise;\n\n    return {\n      id: params.id,\n      items: results,\n    };\n  }\n\n  resumeTask(completion: TaskRunExecutionResult, runId: string): void {\n    const wait = this._taskWaits.get(runId);\n\n    if (!wait) {\n      // We need to store the completion in case the task is awaited later\n      this._pendingCompletionNotifications.set(runId, completion);\n\n      return;\n    }\n\n    wait.resolve(completion);\n\n    this._taskWaits.delete(runId);\n  }\n}\n", "import { z } from \"zod\";\nimport { StructuredLogger } from \"./utils/structuredLogger\";\n\nexport class ZodSchemaParsedError extends Error {\n  constructor(\n    public error: z.ZodError,\n    public payload: unknown\n  ) {\n    super(error.message);\n  }\n}\n\nexport type ZodMessageValueSchema<TDiscriminatedUnion extends z.ZodDiscriminatedUnion<any, any>> =\n  | z.ZodFirstPartySchemaTypes\n  | TDiscriminatedUnion;\n\nexport interface ZodMessageCatalogSchema {\n  [key: string]: ZodMessageValueSchema<any>;\n}\n\nexport type ZodMessageHandlers<TCatalogSchema extends ZodMessageCatalogSchema> = Partial<{\n  [K in keyof TCatalogSchema]: (payload: z.infer<TCatalogSchema[K]>) => Promise<any>;\n}>;\n\nexport type ZodMessageHandlerOptions<TMessageCatalog extends ZodMessageCatalogSchema> = {\n  schema: TMessageCatalog;\n  messages?: ZodMessageHandlers<TMessageCatalog>;\n  logger?: StructuredLogger;\n};\n\nexport type MessageFromSchema<\n  K extends keyof TMessageCatalog,\n  TMessageCatalog extends ZodMessageCatalogSchema,\n> = {\n  type: K;\n  payload: z.input<TMessageCatalog[K]>;\n};\n\nexport type MessageFromCatalog<TMessageCatalog extends ZodMessageCatalogSchema> = {\n  [K in keyof TMessageCatalog]: MessageFromSchema<K, TMessageCatalog>;\n}[keyof TMessageCatalog];\n\nexport const ZodMessageSchema = z.object({\n  version: z.literal(\"v1\").default(\"v1\"),\n  type: z.string(),\n  payload: z.unknown(),\n});\n\nexport interface EventEmitterLike {\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n}\n\nexport class ZodMessageHandler<TMessageCatalog extends ZodMessageCatalogSchema> {\n  #schema: TMessageCatalog;\n  #handlers: ZodMessageHandlers<TMessageCatalog> | undefined;\n  #logger: StructuredLogger | Console;\n\n  constructor(options: ZodMessageHandlerOptions<TMessageCatalog>) {\n    this.#schema = options.schema;\n    this.#handlers = options.messages;\n    this.#logger = options.logger ?? console;\n  }\n\n  public async handleMessage(message: unknown): Promise<\n    | {\n        success: true;\n        data: unknown;\n      }\n    | {\n        success: false;\n        error: string;\n      }\n  > {\n    const parsedMessage = this.parseMessage(message);\n\n    if (!parsedMessage.success) {\n      this.#logger.error(parsedMessage.error, { message });\n\n      return {\n        success: false,\n        error: parsedMessage.error,\n      };\n    }\n\n    if (!this.#handlers) {\n      this.#logger.error(\"No handlers provided\", { message });\n\n      return {\n        success: false,\n        error: \"No handlers provided\",\n      };\n    }\n\n    const handler = this.#handlers[parsedMessage.data.type];\n\n    if (!handler) {\n      const error = `No handler for message type: ${String(parsedMessage.data.type)}`;\n\n      this.#logger.error(error, { message });\n\n      return {\n        success: false,\n        error,\n      };\n    }\n\n    const ack = await handler(parsedMessage.data.payload);\n\n    return {\n      success: true,\n      data: ack,\n    };\n  }\n\n  public parseMessage(message: unknown):\n    | {\n        success: true;\n        data: MessageFromCatalog<TMessageCatalog>;\n      }\n    | {\n        success: false;\n        error: string;\n      } {\n    const parsedMessage = ZodMessageSchema.safeParse(message);\n\n    if (!parsedMessage.success) {\n      return {\n        success: false,\n        error: `Failed to parse message: ${JSON.stringify(parsedMessage.error)}`,\n      };\n    }\n\n    const schema = this.#schema[parsedMessage.data.type];\n\n    if (!schema) {\n      return {\n        success: false,\n        error: `Unknown message type: ${parsedMessage.data.type}`,\n      };\n    }\n\n    const parsedPayload = schema.safeParse(parsedMessage.data.payload);\n\n    if (!parsedPayload.success) {\n      return {\n        success: false,\n        error: `Failed to parse message payload: ${JSON.stringify(parsedPayload.error)}`,\n      };\n    }\n\n    return {\n      success: true,\n      data: {\n        type: parsedMessage.data.type,\n        payload: parsedPayload.data,\n      },\n    };\n  }\n\n  public registerHandlers(emitter: EventEmitterLike, logger?: StructuredLogger) {\n    const log = logger ?? console;\n\n    if (!this.#handlers) {\n      log.info(\"No handlers provided\");\n      return;\n    }\n\n    for (const eventName of Object.keys(this.#schema)) {\n      emitter.on(eventName, async (message: any, callback?: any): Promise<void> => {\n        log.info(`handling ${eventName}`, {\n          payload: message,\n          hasCallback: !!callback,\n        });\n\n        let ack: Awaited<ReturnType<ZodMessageHandler<TMessageCatalog>[\"handleMessage\"]>>;\n\n        // FIXME: this only works if the message doesn't have genuine payload prop\n        if (\"payload\" in message) {\n          ack = await this.handleMessage({ type: eventName, ...message });\n        } else {\n          // Handle messages not sent by ZodMessageSender\n          const { version, ...payload } = message;\n          ack = await this.handleMessage({ type: eventName, version, payload });\n        }\n\n        if (callback && typeof callback === \"function\") {\n          if (!ack.success) {\n            // We don't know the callback type, so we can't do anything else - not all callbacks may accept a success prop\n            log.error(\"Failed to handle message, skipping callback\", { message, error: ack.error });\n            return;\n          }\n\n          callback(ack.data);\n        }\n      });\n    }\n  }\n}\n\ntype ZodMessageSenderCallback<TMessageCatalog extends ZodMessageCatalogSchema> = (message: {\n  type: keyof TMessageCatalog;\n  payload: z.infer<TMessageCatalog[keyof TMessageCatalog]>;\n  version: \"v1\";\n}) => Promise<void>;\n\nexport type ZodMessageSenderOptions<TMessageCatalog extends ZodMessageCatalogSchema> = {\n  schema: TMessageCatalog;\n  sender: ZodMessageSenderCallback<TMessageCatalog>;\n};\n\nexport class ZodMessageSender<TMessageCatalog extends ZodMessageCatalogSchema> {\n  #schema: TMessageCatalog;\n  #sender: ZodMessageSenderCallback<TMessageCatalog>;\n\n  constructor(options: ZodMessageSenderOptions<TMessageCatalog>) {\n    this.#schema = options.schema;\n    this.#sender = options.sender;\n  }\n\n  public async send<K extends keyof TMessageCatalog>(\n    type: K,\n    payload: z.input<TMessageCatalog[K]>\n  ) {\n    const schema = this.#schema[type];\n\n    if (!schema) {\n      throw new Error(`Unknown message type: ${type as string}`);\n    }\n\n    const parsedPayload = schema.safeParse(payload);\n\n    if (!parsedPayload.success) {\n      throw new ZodSchemaParsedError(parsedPayload.error, payload);\n    }\n\n    try {\n      await this.#sender({ type, payload, version: \"v1\" });\n    } catch (error) {\n      console.error(\"[ZodMessageSender] Failed to send message\", error);\n    }\n  }\n\n  public async forwardMessage(message: unknown) {\n    const parsedMessage = ZodMessageSchema.safeParse(message);\n\n    if (!parsedMessage.success) {\n      throw new Error(`Failed to parse message: ${JSON.stringify(parsedMessage.error)}`);\n    }\n\n    const schema = this.#schema[parsedMessage.data.type];\n\n    if (!schema) {\n      throw new Error(`Unknown message type: ${parsedMessage.data.type}`);\n    }\n\n    const parsedPayload = schema.safeParse(parsedMessage.data.payload);\n\n    if (!parsedPayload.success) {\n      throw new Error(`Failed to parse message payload: ${JSON.stringify(parsedPayload.error)}`);\n    }\n\n    try {\n      await this.#sender({\n        type: parsedMessage.data.type,\n        payload: parsedPayload.data,\n        version: \"v1\",\n      });\n    } catch (error) {\n      console.error(\"[ZodMessageSender] Failed to forward message\", error);\n    }\n  }\n}\n\nexport type MessageCatalogToSocketIoEvents<TCatalog extends ZodMessageCatalogSchema> = {\n  [K in keyof TCatalog]: (message: z.infer<TCatalog[K]>) => void;\n};\n", "// src/workers/dev/worker-facade.ts\nimport {\n  clock,\n  taskCatalog\n} from \"@trigger.dev/core/v3\";\nimport {\n  TaskExecutor,\n  DurableClock,\n  getEnvVar,\n  logLevels,\n  OtelTaskLogger,\n  ConsoleInterceptor,\n  usage,\n  DevUsageManager\n} from \"@trigger.dev/core/v3/workers\";\nimport {\n  TaskRunErrorCodes,\n  TriggerTracer,\n  logger,\n  runtime,\n  workerToChildMessages\n} from \"@trigger.dev/core/v3\";\nimport { DevRuntimeManager } from \"@trigger.dev/core/v3/dev\";\nimport {\n  ZodMessageHandler,\n  ZodSchemaParsedError\n} from \"@trigger.dev/core/v3/zodMessageHandler\";\nimport { tracingSDK, otelTracer, otelLogger, sender } from \"/private/tmp/bunx-501-trigger.dev@beta/node_modules/trigger.dev/dist/workers/dev/worker-setup.js\";;\nimport * as importedConfigExports from \"/Users/ashrafelshaer/Desktop/Developer/hr-toolkit-v1/packages/jobs/trigger.config.ts\"; const importedConfig = importedConfigExports.config; const handleError = importedConfigExports.handleError;;\nvar durableClock = new DurableClock();\nclock.setGlobalClock(durableClock);\nusage.setGlobalUsageManager(new DevUsageManager());\nvar tracer = new TriggerTracer({ tracer: otelTracer, logger: otelLogger });\nvar consoleInterceptor = new ConsoleInterceptor(\n  otelLogger,\n  typeof __PROJECT_CONFIG__.enableConsoleLogging === \"boolean\" ? __PROJECT_CONFIG__.enableConsoleLogging : true\n);\nvar devRuntimeManager = new DevRuntimeManager();\nruntime.setGlobalRuntimeManager(devRuntimeManager);\nvar triggerLogLevel = getEnvVar(\"TRIGGER_LOG_LEVEL\");\nvar configLogLevel = triggerLogLevel ? triggerLogLevel : importedConfig ? importedConfig.logLevel : __PROJECT_CONFIG__.logLevel;\nvar otelTaskLogger = new OtelTaskLogger({\n  logger: otelLogger,\n  tracer,\n  level: logLevels.includes(configLogLevel) ? configLogLevel : \"info\"\n});\nlogger.setGlobalTaskLogger(otelTaskLogger);\nvar TaskFileImports = {};\nvar TaskFiles = {};\n;\n(() => {\n  for (const [importName, taskFile] of Object.entries(TaskFiles)) {\n    const fileImports = TaskFileImports[importName];\n    for (const [exportName, task] of Object.entries(fileImports ?? {})) {\n      if (typeof task === \"object\" && task !== null && \"id\" in task && typeof task.id === \"string\") {\n        if (taskCatalog.taskExists(task.id)) {\n          taskCatalog.registerTaskFileMetadata(task.id, {\n            exportName,\n            filePath: taskFile.filePath\n          });\n        }\n      }\n    }\n  }\n})();\nvar _execution;\nvar _isRunning = false;\nvar handler = new ZodMessageHandler({\n  schema: workerToChildMessages,\n  messages: {\n    EXECUTE_TASK_RUN: async ({ execution, traceContext, metadata }) => {\n      if (_isRunning) {\n        console.error(\"Worker is already running a task\");\n        await sender.send(\"TASK_RUN_COMPLETED\", {\n          execution,\n          result: {\n            ok: false,\n            id: execution.run.id,\n            error: {\n              type: \"INTERNAL_ERROR\",\n              code: TaskRunErrorCodes.TASK_ALREADY_RUNNING\n            },\n            usage: {\n              durationMs: 0\n            }\n          }\n        });\n        return;\n      }\n      process.title = `trigger-dev-worker: ${execution.task.id} ${execution.run.id}`;\n      const task = taskCatalog.getTask(execution.task.id);\n      if (!task) {\n        console.error(`Could not find task ${execution.task.id}`);\n        await sender.send(\"TASK_RUN_COMPLETED\", {\n          execution,\n          result: {\n            ok: false,\n            id: execution.run.id,\n            error: {\n              type: \"INTERNAL_ERROR\",\n              code: TaskRunErrorCodes.COULD_NOT_FIND_EXECUTOR\n            },\n            usage: {\n              durationMs: 0\n            }\n          }\n        });\n        return;\n      }\n      const executor = new TaskExecutor(task, {\n        tracer,\n        tracingSDK,\n        consoleInterceptor,\n        projectConfig: __PROJECT_CONFIG__,\n        importedConfig,\n        handleErrorFn: handleError\n      });\n      try {\n        _execution = execution;\n        _isRunning = true;\n        const measurement = usage.start();\n        const { result } = await executor.execute(execution, metadata, traceContext, measurement);\n        const usageSample = usage.stop(measurement);\n        return sender.send(\"TASK_RUN_COMPLETED\", {\n          execution,\n          result: {\n            ...result,\n            usage: {\n              durationMs: usageSample.cpuTime\n            }\n          }\n        });\n      } finally {\n        _execution = void 0;\n        _isRunning = false;\n      }\n    },\n    TASK_RUN_COMPLETED_NOTIFICATION: async (payload) => {\n      switch (payload.version) {\n        case \"v1\": {\n          devRuntimeManager.resumeTask(payload.completion, payload.execution.run.id);\n          break;\n        }\n        case \"v2\": {\n          devRuntimeManager.resumeTask(payload.completion, payload.completion.id);\n          break;\n        }\n      }\n    },\n    CLEANUP: async ({ flush, kill }) => {\n      if (kill) {\n        await tracingSDK.flush();\n        await sender.send(\"READY_TO_DISPOSE\", void 0);\n      } else {\n        if (flush) {\n          await tracingSDK.flush();\n        }\n      }\n    }\n  }\n});\nprocess.on(\"message\", async (msg) => {\n  await handler.handleMessage(msg);\n});\nvar TASK_METADATA = taskCatalog.getAllTaskMetadata();\nsender.send(\"TASKS_READY\", { tasks: TASK_METADATA }).catch((err) => {\n  if (err instanceof ZodSchemaParsedError) {\n    sender.send(\"TASKS_FAILED_TO_PARSE\", { zodIssues: err.error.issues, tasks: TASK_METADATA });\n  } else {\n    console.error(\"Failed to send TASKS_READY message\", err);\n  }\n});\nprocess.title = \"trigger-dev-worker\";\nasync function asyncHeartbeat(initialDelayInSeconds = 30, intervalInSeconds = 30) {\n  async function _doHeartbeat() {\n    while (true) {\n      if (_isRunning && _execution) {\n        try {\n          await sender.send(\"TASK_HEARTBEAT\", { id: _execution.attempt.id });\n        } catch (err) {\n          console.error(\"Failed to send HEARTBEAT message\", err);\n        }\n      }\n      await new Promise((resolve) => setTimeout(resolve, 1e3 * intervalInSeconds));\n    }\n  }\n  await new Promise((resolve) => setTimeout(resolve, 1e3 * initialDelayInSeconds));\n  return _doHeartbeat();\n}\nasyncHeartbeat().catch((err) => {\n  console.error(\"Failed to start asyncHeartbeat\", err);\n});\n", "// src/workers/dev/worker-setup.ts\nimport { childToWorkerMessages, taskCatalog } from \"@trigger.dev/core/v3\";\nimport {\n  StandardTaskCatalog,\n  TracingSDK\n} from \"@trigger.dev/core/v3/workers\";\nimport { ZodMessageSender } from \"@trigger.dev/core/v3/zodMessageHandler\";\nimport \"source-map-support/register.js\";\n\n// package.json\nvar version = \"3.0.0-beta.56\";\n\n// src/workers/dev/worker-setup.ts\nimport * as setupImportedConfigExports from \"/Users/ashrafelshaer/Desktop/Developer/hr-toolkit-v1/packages/jobs/trigger.config.ts\"; const setupImportedConfig = setupImportedConfigExports.config;;\nvar tracingSDK = new TracingSDK({\n  url: process.env.OTEL_EXPORTER_OTLP_ENDPOINT ?? \"http://0.0.0.0:4318\",\n  instrumentations: setupImportedConfig?.instrumentations ?? [],\n  diagLogLevel: process.env.OTEL_LOG_LEVEL ?? \"none\",\n  forceFlushTimeoutMillis: 5e3\n});\nvar otelTracer = tracingSDK.getTracer(\"trigger-dev-worker\", version);\nvar otelLogger = tracingSDK.getLogger(\"trigger-dev-worker\", version);\nvar sender = new ZodMessageSender({\n  schema: childToWorkerMessages,\n  sender: async (message) => {\n    process.send?.(message);\n  }\n});\ntaskCatalog.setGlobalTaskCatalog(new StandardTaskCatalog());\nexport {\n  otelLogger,\n  otelTracer,\n  sender,\n  tracingSDK\n};\n", "import type { TriggerConfig } from \"@trigger.dev/sdk/v3\";\n\nexport const config: TriggerConfig = {\n  project: \"proj_wlvanvtxvnxlxewmqfbh\",\n  logLevel: \"log\",\n\n  retries: {\n    enabledInDev: true,\n    default: {\n      maxAttempts: 3,\n      minTimeoutInMs: 1000,\n      maxTimeoutInMs: 10000,\n      factor: 2,\n      randomize: true,\n    },\n  },\n};\n"],
  "mappings": "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",
  "names": ["context", "propagation", "version", "CreateAuthorizationCodeResponseSchema", "url", "string", "authorizationCode", "GetPersonalAccessTokenRequestSchema", "GetPersonalAccessTokenResponseSchema", "token", "obfuscatedToken", "z", "literal", "MachineMemory", "MachineConfig", "cpu", "MachineCpu", "optional", "memory", "preset", "MachinePresetName", "MachinePreset", "object", "name", "number", "centsPerMs", "TaskRunBuiltInError", "type", "stackTrace", "TaskRunCustomErrorObject", "raw", "TaskRunStringError", "COULD_NOT_FIND_EXECUTOR", "COULD_NOT_FIND_TASK", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_CRASHED", "TaskRunInternalError", "code", "message", "TaskRunError", "discriminatedUnion", "TaskRun", "id", "payload", "payloadType", "any", "tags", "array", "isTest", "boolean", "default", "createdAt", "coerce", "date", "startedAt", "maxAttempts", "durationMs", "costInCents", "baseCostInCents", "TaskRunExecutionTask", "filePath", "exportName", "TaskRunExecutionAttempt", "backgroundWorkerId", "backgroundWorkerTaskId", "status", "TaskRunExecutionEnvironment", "slug", "TaskRunExecutionOrganization", "TaskRunExecutionProject", "ref", "TaskRunExecutionBatch", "TaskRunExecution", "task", "attempt", "run", "environment", "organization", "project", "batch", "machine", "TaskRunContext", "omit", "TaskRunExecutionRetry", "delay", "error", "unknown", "TaskRunExecutionUsage", "TaskRunFailedExecutionResult", "retry", "skippedRetrying", "usage", "ok", "output", "TaskRunExecutionResult", "BatchTaskRunExecutionResult", "items", "EnvironmentType", "TaskRunExecutionPayload", "execution", "traceContext", "record", "ProdTaskRunExecution", "worker", "contentHash", "ProdTaskRunExecutionPayload", "FixedWindowRateLimit", "limit", "window", "seconds", "hours", "SlidingWindowRateLimit", "RateLimitOptions", "concurrencyLimit", "rateLimit", "ScheduleMetadata", "cron", "timezone", "TaskMetadata", "queue", "RetryOptions", "schedule", "TaskFileMetadata", "TaskMetadataWithFilePath", "packageVersion", "QueueOptions", "triggerSource", "PreStopCauses", "test", "Config", "triggerDirectories", "triggerUrl", "projectDir", "tsconfigPath", "retries", "enabledInDev", "additionalPackages", "additionalFiles", "dependenciesToBundle", "union", "logLevel", "enableConsoleLogging", "postInstall", "WaitReason", "enum", "TaskRunExecutionLazyAttemptPayload", "TaskResource", "BackgroundWorkerMetadata", "tasks", "ImageDetailsMetadata", "imageTag", "AbortTaskRunError", "constructor", "Error", "parseError", "stringify", "String", "createErrorTaskError", "e", "stack", "JSON", "SerializedError", "createJsonErrorObject", "replace", "sanitizeError", "correctErrorStackTrace", "correctStackTraceLine", "isDev", "LINES_TO_IGNORE", "regex", "line", "trim", "groupTaskMetadataIssuesByTask", "issues", "issue", "taskIndex", "acc", "restOfPath", "taskName", "key", "taskId", "existing", "WhoAmIResponseSchema", "userId", "email", "dashboardUrl", "GetProjectResponseBody", "externalRef", "title", "GetProjectsResponseBody", "apiKey", "apiUrl", "localOnly", "metadata", "supportsLazyAttempts", "RunTag", "max", "RunTags", "TriggerTaskRequestBody", "options", "dependentAttempt", "dependentBatch", "lockToVersion", "idempotencyKey", "nonnegative", "TriggerTaskResponse", "BatchTriggerTaskRequestBody", "BatchTriggerTaskResponse", "batchId", "runs", "GetBatchResponseBody", "taskRunId", "AddTagsRequestBody", "GetEnvironmentVariablesResponseBody", "StartDeploymentIndexingRequestBody", "imageReference", "selfHosted", "StartDeploymentIndexingResponseBody", "ExternalBuildData", "buildId", "buildToken", "projectId", "InitializeDeploymentResponseBody", "externalBuildData", "registryHost", "DeploymentErrorData", "stderr", "GetDeploymentResponseBody", "shortCode", "errorData", "CreateUploadPayloadUrlResponseBody", "presignedUrl", "UpdateScheduleOptions", "deduplicationKey", "ScheduleGenerator", "expression", "description", "ScheduleObject", "ScheduleType", "active", "generator", "environments", "userName", "nullish", "ListSchedulesResult", "data", "currentPage", "totalPages", "perPage", "AttemptStatus", "RunEnvironmentDetails", "user", "RunScheduleDetails", "externalId", "CommonRunFields", "RunStatus", "taskIdentifier", "isQueued", "isExecuting", "isCompleted", "isSuccess", "isFailed", "isCancelled", "updatedAt", "finishedAt", "delayedUntil", "ttl", "expiredAt", "RetrieveRunResponse", "payloadPresignedUrl", "outputPresignedUrl", "completedAt", "env", "ListRunResponse", "pagination", "next", "CreateEnvironmentVariableRequestBody", "value", "variables", "override", "success", "EnvironmentVariableValue", "EnvironmentVariables", "BackgroundWorkerServerMessages", "payloads", "taskAttemptId", "image", "envType", "orgId", "serverWebsocketMessages", "SERVER_READY", "BACKGROUND_WORKER_MESSAGE", "BackgroundWorkerClientMessages", "BackgroundWorkerProperties", "clientWebsocketMessages", "READY_FOR_TASKS", "inProgressRuns", "BACKGROUND_WORKER_DEPRECATED", "workerToChildMessages", "EXECUTE_TASK_RUN", "TASK_RUN_COMPLETED_NOTIFICATION", "completion", "CLEANUP", "flush", "kill", "UncaughtExceptionMessage", "origin", "zodIssues", "childToWorkerMessages", "TASK_RUN_COMPLETED", "result", "TASKS_READY", "TASKS_FAILED_TO_PARSE", "TASK_HEARTBEAT", "TASK_RUN_HEARTBEAT", "READY_TO_DISPOSE", "undefined", "WAIT_FOR_DURATION", "WAIT_FOR_TASK", "WAIT_FOR_BATCH", "UNCAUGHT_EXCEPTION", "ProdChildToWorkerMessages", "TaskMetadataFailedToParseData", "now", "waitThresholdInMs", "batchFriendlyId", "runFriendlyIds", "ProdWorkerToChildMessages", "callback", "void", "WAIT_COMPLETED_NOTIFICATION", "ProviderToPlatformMessages", "LOG", "LOG_WITH_ACK", "WORKER_CRASHED", "runId", "reason", "exitCode", "logs", "overrideCompletion", "INDEXING_FAILED", "deploymentId", "PlatformToProviderMessages", "INDEX", "envId", "attemptNumber", "checkpointId", "PRE_PULL_DEPLOYMENT", "imageRef", "CreateWorkerMessage", "projectRef", "cliPackageVersion", "CoordinatorToPlatformMessages", "CREATE_WORKER", "CREATE_TASK_RUN_ATTEMPT", "executionPayload", "READY_FOR_EXECUTION", "READY_FOR_LAZY_ATTEMPT", "lazyPayload", "READY_FOR_RESUME", "attemptFriendlyId", "docker", "location", "TASK_RUN_FAILED_TO_RUN", "CHECKPOINT_CREATED", "ms", "keepRunAlive", "RUN_CRASHED", "PlatformToCoordinatorMessages", "RESUME_AFTER_DEPENDENCY", "completions", "executions", "RESUME_AFTER_DURATION", "attemptId", "REQUEST_ATTEMPT_CANCELLATION", "REQUEST_RUN_CANCELLATION", "delayInMs", "DYNAMIC_CONFIG", "checkpointThresholdInMs", "SharedQueueToClientMessages", "ProdWorkerToCoordinatorMessages", "INDEX_TASKS", "IndexTasksMessage", "totalCompletions", "READY_FOR_CHECKPOINT", "CANCEL_CHECKPOINT", "checkpointCanceled", "willCheckpointAndRestore", "shouldExit", "friendlyId", "UNRECOVERABLE_ERROR", "SET_STATE", "CoordinatorToProdWorkerMessages", "EXECUTE_TASK_RUN_LAZY_ATTEMPT", "REQUEST_EXIT", "READY_FOR_RETRY", "ProdWorkerSocketData", "podName", "deploymentVersion", "CoordinatorSocketData", "supportsDynamicConfig", "PRIMARY_VARIANT", "Variant", "AccessoryItem", "text", "variant", "Accessory", "style", "TaskEventStyle", "icon", "stringPatternMatchers", "$endsWith", "$startsWith", "$ignoreCaseEquals", "EventMatcher", "$anythingBut", "$gt", "$lt", "$gte", "tuple", "EventFilter", "FetchRetryHeadersStrategy", "strategy", "limitHeader", "remainingHeader", "resetHeader", "resetFormat", "FetchRetryStrategy", "FetchRetryBackoffStrategy", "FetchRetryByStatusOptions", "FetchTimeoutOptions", "durationInMs", "byStatus", "timeout", "connectionError", "ExceptionEventProperties", "stacktrace", "ExceptionSpanEvent", "time", "exception", "properties", "OtherSpanEvent", "SpanEvent", "isExceptionSpanEvent", "api", "isCancellationSpanEvent", "SpanMessagingEvent", "system", "operation", "destination", "_globalThis", "globalThis", "GLOBAL_TRIGGER_DOT_DEV_KEY", "Symbol", "registerGlobal", "_global", "allowOverride", "instance", "getGlobal", "unregisterGlobal", "SemanticInternalAttributes", "ENVIRONMENT_ID", "ENVIRONMENT_TYPE", "ORGANIZATION_ID", "ORGANIZATION_SLUG", "ORGANIZATION_NAME", "PROJECT_ID", "PROJECT_REF", "PROJECT_NAME", "PROJECT_DIR", "ATTEMPT_ID", "ATTEMPT_NUMBER", "RUN_ID", "RUN_IS_TEST", "BATCH_ID", "TASK_SLUG", "TASK_PATH", "TASK_EXPORT_NAME", "QUEUE_NAME", "QUEUE_ID", "MACHINE_PRESET_NAME", "MACHINE_PRESET_CPU", "MACHINE_PRESET_MEMORY", "MACHINE_PRESET_CENTS_PER_MS", "SPAN_PARTIAL", "SPAN_ID", "OUTPUT", "OUTPUT_TYPE", "STYLE_ACCESSORY", "METADATA", "TRIGGER", "_TaskContextAPI", "PAYLOAD", "PAYLOAD_TYPE", "SHOW", "SHOW_ACTIONS", "WORKER_ID", "WORKER_VERSION", "CLI_VERSION", "SDK_VERSION", "SDK_LANGUAGE", "RETRY_AT", "RETRY_DELAY", "RETRY_COUNT", "LINK_TITLE", "IDEMPOTENCY_KEY", "USAGE_DURATION_MS", "USAGE_COST_IN_CENTS", "RATE_LIMIT_LIMIT", "RATE_LIMIT_REMAINING", "RATE_LIMIT_RESET", "API_NAME", "TaskContextAPI", "getInstance", "isInsideTask", "ctx", "attributes", "contextAttributes", "workerAttributes", "disable", "setGlobalTaskContext", "taskContext", "resets", "format", "calculateISO8601DurationOpenAIVariantResetAt", "calculateISO8601ResetAt", "calculateUnixTimestampResetAt", "calculateResetAt", "isNaN", "Date", "resetAt", "calculateUnixTimestampInMsResetAt", "parseInt", "match", "minutes", "milliseconds", "setSeconds", "getSeconds", "factor", "minTimeoutInMs", "maxTimeoutInMs", "_ApiError", "defaultRetryOptions", "calculateNextRetryDelay", "opts", "random", "Math", "ApiError", "makeMessage", "msg", "generate", "errorResponse", "headers", "ApiConnectionError", "BadRequestError", "NotFoundError", "ConflictError", "UnprocessableEntityError", "cause", "millisecondsUntilReset", "resetAtUnixEpochMs", "resetAtUnixEpoch", "RateLimitError", "InternalServerError", "err", "castToError", "NULL_SENTINEL", "flattenAttributes", "obj", "prefix", "newPrefix", "Array", "length", "i", "Object", "isRecord", "assign", "unflattenAttributes", "rehydrateNull", "keys", "entries", "part", "nextPart", "parts", "current", "maxIndex", "arrayResult", "primitiveValueOrflattenedAttributes", "accessoryAttributes", "accessory", "CursorPage", "getPaginatedItems", "hasNextPage", "hasPreviousPage", "getNextPage", "pageFetcher", "getPreviousPage", "page", "asyncIterator", "iterPages", "OffsetLimitPage", "item", "randomize", "requestOptionsKeys", "zodfetch", "schema", "requestInit", "ApiPromise", "zodfetchCursorPage", "query", "URLSearchParams", "params", "after", "before", "cursorPageSchema", "$url", "search", "CursorPagePromise", "fetchResult", "zodfetchOffsetLimitPage", "URL", "toString", "offsetLimitPageSchema", "OffsetLimitPagePromise", "method", "pathname", "span", "traceZodFetch", "$requestInit", "_doZodFetch", "_doZodFetchWithRetries", "response", "responseHeaders", "retryResult", "waitForRetry", "errJSON", "safeJsonParse", "errMessage", "parsedResult", "fromZodError", "shouldRetry", "shouldRetryForOptions", "retryOptions", "shouldRetryHeader", "fromEntries", "createResponseHeaders", "withCache", "requestInitWithCache", "resolve", "responsePromise", "asResponse", "withResponse", "parse", "onrejected", "finally", "Promise", "fetchPage_fn", "_fetchPage", "tracer", "startActiveSpan", "setTimeout", "isEmptyObj", "hasOwn", "hasOwnProperty", "DEFAULT_ZOD_FETCH_OPTIONS", "ApiClient", "baseUrl", "requestOptions", "accessToken", "defaultRequestOptions", "getRunResult", "mergeRequestOptions", "getBatchResults", "triggerTask", "encodedTaskId", "body", "batchTriggerTask", "createUploadPayloadUrl", "getPayloadUrl", "retrieveRun", "listRuns", "searchParams", "createSearchQueryForListRuns", "ListRunResponseItem", "listProjectRuns", "replayRun", "cancelRun", "CanceledRunResponse", "rescheduleRun", "addTags", "createSchedule", "listSchedules", "append", "retrieveSchedule", "scheduleId", "updateSchedule", "deactivateSchedule", "activateSchedule", "deleteSchedule", "DeletedScheduleObject", "listEnvVars", "importEnvVars", "EnvironmentVariableResponseBody", "retrieveEnvVar", "createEnvVar", "updateEnvVar", "deleteEnvVar", "Authorization", "spanParentAsLink", "from", "to", "defaultOptions", "_ClockAPI", "SimpleClock", "preciseNow", "nowStruct", "reset", "ClockAPI", "_instance", "setGlobalClock", "clock", "SIMPLE_CLOCK", "OTEL_LOG_ATTRIBUTE_COUNT_LIMIT", "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT", "OTEL_SPAN_EVENT_COUNT_LIMIT", "OTEL_LINK_COUNT_LIMIT", "OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT", "newAttributes", "imposeAttributeLimits", "_LoggerAPI", "calculateAttributeValueLength", "NoopTaskLogger", "debug", "log", "info", "warn", "trace", "LoggerAPI", "logger", "setGlobalTaskLogger", "NOOP_TASK_LOGGER", "NoopRuntimeManager", "waitForDuration", "waitUntil", "waitForTask", "_UsageAPI", "NoopUsageManager", "start", "cpuTime", "stop", "measurement", "pauseAsync", "sample", "NOOP_USAGE_MANAGER", "UsageAPI", "_RuntimeAPI", "setGlobalUsageManager", "manager", "NOOP_RUNTIME_MANAGER", "RuntimeAPI", "runtime", "getEnvVar", "_APIClientManagerAPI", "waitForBatch", "setGlobalRuntimeManager", "runtimeManager", "config", "process", "APIClientManagerAPI", "setGlobalAPIClientConfiguration", "store", "client", "_TaskCatalogAPI", "NoopTaskCatalog", "registerTaskMetadata", "registerTaskFileMetadata", "taskCatalog2", "updateTaskMetadata", "updates", "getAllTaskMetadata", "getTaskMetadata", "getTask", "taskExists", "TaskCatalogAPI", "taskCatalog", "dateDifference", "formatDuration", "end", "formatDurationMilliseconds", "nanosecondsToMilliseconds", "nanoseconds", "millisecondsToNanoseconds", "formatDurationNanoseconds", "belowOneSecondUnits", "duration", "maxDecimalPoints", "largest", "formatDurationInDays", "units", "TriggerTracer", "_config", "_logger", "extractContext", "fn", "parentContext", "startTime", "setAttributes", "startSpan", "eventFilterMatches", "patternKey", "patternValue", "includes", "payloadValue", "contentFiltersMatches", "objectArray", "contentFilter", "contentFilters", "contentFilterMatches", "actualValue", "sensitivity", "$isNull", "detectDependencyVersion", "parsePacket", "stringifyIO", "dataType", "conditionallyExportPacket", "needsOffloading", "pathPrefix", "packet", "byteSize", "lengthLimit", "size", "packetRequiresOffloading", "presignedResponse", "apiClientManager", "filename", "uploadResponse", "fetch", "exportPacket", "conditionallyImportPacket", "importPacket", "createPacketAttributes", "dataKey", "dataTypeKey", "safeReplacer", "createPacketAttributesAsJson", "deserialize", "prettyPrintPacket", "rawData", "exports", "RegExp", "v", "outputType", "getPacketExtension", "loadSuperJSON", "SpanKind", "z", "parseError", "error", "name", "stack", "type", "raw", "JSON", "SerializedError", "message", "stackTrace", "sanitizeError", "replace", "code", "DiagConsoleLogger", "logs", "OTLPLogExporter", "OTLPTraceExporter", "registerInstrumentations", "OTEL_LOG_ATTRIBUTE_COUNT_LIMIT", "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT", "OTEL_LOG_ATTRIBUTE_VALUE_LENGTH_LIMIT", "OTEL_SPAN_EVENT_COUNT_LIMIT", "OTEL_LINK_COUNT_LIMIT", "OTEL_ATTRIBUTE_PER_LINK_COUNT_LIMIT", "OTEL_ATTRIBUTE_PER_EVENT_COUNT_LIMIT", "OFFLOAD_IO_PACKET_LENGTH_LIMIT", "ENVIRONMENT_ID", "ENVIRONMENT_TYPE", "ORGANIZATION_ID", "ORGANIZATION_SLUG", "ORGANIZATION_NAME", "PROJECT_ID", "PROJECT_REF", "PROJECT_NAME", "PROJECT_DIR", "ATTEMPT_ID", "ATTEMPT_NUMBER", "RUN_ID", "RUN_IS_TEST", "BATCH_ID", "TASK_SLUG", "TASK_PATH", "TASK_EXPORT_NAME", "QUEUE_NAME", "QUEUE_ID", "MACHINE_PRESET_NAME", "MACHINE_PRESET_CPU", "MACHINE_PRESET_MEMORY", "MACHINE_PRESET_CENTS_PER_MS", "SPAN_PARTIAL", "SPAN_ID", "OUTPUT", "OUTPUT_TYPE", "STYLE", "STYLE_ICON", "STYLE_VARIANT", "STYLE_ACCESSORY", "METADATA", "TRIGGER", "PAYLOAD", "PAYLOAD_TYPE", "SHOW", "SHOW_ACTIONS", "WORKER_ID", "WORKER_VERSION", "CLI_VERSION", "SDK_VERSION", "SDK_LANGUAGE", "RETRY_AT", "RETRY_DELAY", "RETRY_COUNT", "LINK_TITLE", "IDEMPOTENCY_KEY", "USAGE_DURATION_MS", "USAGE_COST_IN_CENTS", "RATE_LIMIT_LIMIT", "RATE_LIMIT_REMAINING", "RATE_LIMIT_RESET", "flattenAttributes", "result", "obj", "undefined", "prefix", "newPrefix", "Array", "value", "i", "Object", "assign", "NULL_SENTINEL", "isRecord", "_global", "_globalThis", "registerGlobal", "api", "GLOBAL_TRIGGER_DOT_DEV_KEY", "allowOverride", "Error", "instance", "getGlobal", "unregisterGlobal", "API_NAME", "TaskContextAPI", "getInstance", "_instance", "isInsideTask", "ctx", "worker", "attributes", "contextAttributes", "workerAttributes", "SemanticInternalAttributes", "id", "version", "attempt", "number", "task", "filePath", "exportName", "queue", "environment", "organization", "project", "ref", "run", "isTest", "slug", "batch", "idempotencyKey", "machine", "cpu", "memory", "centsPerMs", "disable", "setGlobalTaskContext", "taskContext", "TaskContextSpanProcessor", "constructor", "innerProcessor", "_innerProcessor", "onStart", "span", "parentContext", "setAttributes", "onEnd", "shutdown", "forceFlush", "TaskContextLogProcessor", "onEmit", "logRecord", "context", "getEnvVar", "process", "env", "AsyncResourceDetector", "_resolved", "_promise", "Promise", "resolver", "_resolver", "detect", "_config", "Resource", "resolveWithAttributes", "TracingSDK", "config", "asyncResourceDetector", "setLogLevel", "diagLogLevel", "envResourceAttributesSerialized", "envResourceAttributes", "parse", "commonResources", "detectResourcesSync", "detectors", "processDetectorSync", "merge", "SemanticResourceAttributes", "resource", "traceProvider", "NodeTracerProvider", "forceFlushTimeoutMillis", "spanLimits", "attributeCountLimit", "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT", "attributeValueLengthLimit", "eventCountLimit", "attributePerEventCountLimit", "linkCountLimit", "attributePerLinkCountLimit", "spanExporter", "url", "timeoutMillis", "addSpanProcessor", "BatchSpanProcessor", "maxExportBatchSize", "parseInt", "scheduledDelayMillis", "exportTimeoutMillis", "maxQueueSize", "SimpleSpanProcessor", "register", "instrumentations", "tracerProvider", "logExporter", "loggerProvider", "LoggerProvider", "logRecordLimits", "addLogRecordProcessor", "BatchLogRecordProcessor", "SimpleLogRecordProcessor", "_logProvider", "_spanExporter", "_traceProvider", "setGlobalLoggerProvider", "getLogger", "bind", "getTracer", "flush", "all", "level", "DiagLogLevel", "NONE", "ERROR", "WARN", "INFO", "DEBUG", "VERBOSE", "ALL", "diag", "setLogger", "recordSpanException", "recordException", "sanitizeSpanError", "stringify", "setStatus", "SpanStatusCode", "sanitizedError", "MachineCpu", "literal", "MachinePresetName", "enum", "MachineConfig", "optional", "MachineMemory", "preset", "MachinePreset", "TaskRunBuiltInError", "string", "TaskRunCustomErrorObject", "object", "COULD_NOT_FIND_EXECUTOR", "CONFIGURED_INCORRECTLY", "TASK_ALREADY_RUNNING", "TASK_EXECUTION_FAILED", "TASK_EXECUTION_ABORTED", "TASK_PROCESS_EXITED_WITH_NON_ZERO_CODE", "TASK_PROCESS_SIGKILL_TIMEOUT", "TASK_RUN_CANCELLED", "TASK_OUTPUT_ERROR", "HANDLE_ERROR_ERROR", "GRACEFUL_EXIT_TIMEOUT", "TASK_RUN_CRASHED", "TaskRunInternalError", "TaskRunError", "discriminatedUnion", "TaskRunStringError", "payload", "tags", "array", "boolean", "default", "createdAt", "coerce", "date", "maxAttempts", "durationMs", "costInCents", "baseCostInCents", "TaskRunExecutionAttempt", "startedAt", "backgroundWorkerId", "status", "TaskRunExecutionEnvironment", "TaskRunExecutionOrganization", "TaskRunExecutionQueue", "TaskRunExecutionBatch", "TaskRunExecution", "TaskRunExecutionTask", "TaskRun", "TaskRunExecutionProject", "TaskRunContext", "omit", "payloadType", "TaskRunExecutionRetry", "timestamp", "delay", "TaskRunExecutionUsage", "TaskRunFailedExecutionResult", "ok", "retry", "skippedRetrying", "TaskRunSuccessfulExecutionResult", "usage", "BatchTaskRunExecutionResult", "items", "TaskRunExecutionResult", "EnvironmentType", "TaskRunExecutionPayload", "execution", "traceContext", "contentHash", "ProdTaskRunExecutionPayload", "ProdTaskRunExecution", "FixedWindowRateLimit", "window", "seconds", "minutes", "hours", "SlidingWindowRateLimit", "concurrencyLimit", "rateLimit", "RateLimitOptions", "cron", "timezone", "packageVersion", "QueueOptions", "RetryOptions", "triggerSource", "schedule", "ScheduleMetadata", "TaskFileMetadata", "PostStartCauses", "RegexSchema", "custom", "val", "test", "triggerDirectories", "triggerUrl", "projectDir", "tsconfigPath", "retries", "enabledInDev", "additionalPackages", "additionalFiles", "dependenciesToBundle", "logLevel", "enableConsoleLogging", "postInstall", "extraCACerts", "TaskRunExecutionLazyAttemptPayload", "runId", "attemptCount", "messageId", "record", "unknown", "TaskResource", "BackgroundWorkerMetadata", "cliPackageVersion", "ImageDetailsMetadata", "imageTag", "WhoAmIResponseSchema", "userId", "email", "dashboardUrl", "externalRef", "GetProjectsResponseBody", "GetProjectEnvResponse", "apiKey", "apiUrl", "localOnly", "supportsLazyAttempts", "CreateBackgroundWorkerResponse", "RunTag", "RunTags", "union", "TriggerTaskRequestBody", "any", "options", "dependentAttempt", "lockToVersion", "ttl", "nonnegative", "int", "TriggerTaskResponse", "BatchTriggerTaskRequestBody", "BatchTriggerTaskResponse", "batchId", "runs", "taskRunId", "RescheduleRunRequestBody", "GetEnvironmentVariablesResponseBody", "variables", "imageReference", "selfHosted", "StartDeploymentIndexingResponseBody", "ExternalBuildData", "buildToken", "projectId", "shortCode", "registryHost", "InitializeDeploymentRequestBody", "DeploymentErrorData", "stderr", "GetDeploymentResponseBody", "errorData", "nullable", "tasks", "presignedUrl", "lastTimestamp", "UpdateScheduleOptions", "deduplicationKey", "ScheduleGenerator", "expression", "description", "ScheduleObject", "active", "generator", "nextRun", "environments", "DeletedScheduleObject", "ListSchedulesResult", "data", "currentPage", "page", "timezones", "RunEnvironmentDetails", "user", "RunScheduleDetails", "externalId", "CommonRunFields", "RunStatus", "taskIdentifier", "isQueued", "isExecuting", "isCompleted", "isSuccess", "isFailed", "isCancelled", "updatedAt", "finishedAt", "delayedUntil", "expiredAt", "RetrieveRunResponse", "payloadPresignedUrl", "outputPresignedUrl", "attempts", "AttemptStatus", "completedAt", "ListRunResponseItem", "ListRunResponse", "pagination", "previous", "CreateEnvironmentVariableRequestBody", "ImportEnvironmentVariablesRequestBody", "override", "success", "EnvironmentVariableValue", "EnvironmentVariable", "EnvironmentVariables", "propagation", "fromZodError", "defaultRetryOptions", "minTimeoutInMs", "_ApiError", "maxTimeoutInMs", "randomize", "defaultFetchRetryOptions", "byStatus", "strategy", "connectionError", "timeout", "calculateNextRetryDelay", "opts", "random", "Math", "round", "ApiError", "headers", "makeMessage", "param", "msg", "errorResponse", "BadRequestError", "AuthenticationError", "PermissionDeniedError", "UnprocessableEntityError", "RateLimitError", "cause", "NotFoundError", "ConflictError", "resetAtUnixEpochMs", "resetAtUnixEpoch", "InternalServerError", "castToError", "err", "accessoryAttributes", "accessory", "getPaginatedItems", "hasNextPage", "next", "hasPreviousPage", "getNextPage", "pageFetcher", "getPreviousPage", "iterPages", "Symbol", "asyncIterator", "item", "CursorPage", "OffsetLimitPage", "factor", "zodfetch", "schema", "ApiPromise", "_doZodFetch", "zodfetchCursorPage", "params", "query", "set", "String", "after", "cursorPageSchema", "$url", "URL", "fetchResult", "CursorPagePromise", "zodfetchOffsetLimitPage", "limit", "offsetLimitPageSchema", "search", "callback", "method", "requestInit", "startActiveSpan", "traceZodFetch", "$requestInit", "_doZodFetchWithRetries", "response", "retryResult", "waitForRetry", "errText", "safeJsonParse", "parsedResult", "ApiConnectionError", "shouldRetry", "shouldRetryForOptions", "shouldRetryHeader", "text", "createResponseHeaders", "Request", "withCache", "requestInitWithCache", "resolve", "asResponse", "withResponse", "catch", "onrejected", "finally", "onfinally", "_fetchPage", "fetchPage_fn", "OffsetLimitPagePromise", "tracer", "variant", "style", "setTimeout", "DEFAULT_ZOD_FETCH_OPTIONS", "ApiClient", "baseUrl", "accessToken", "getRunResult", "mergeRequestOptions", "defaultRequestOptions", "requestOptions", "getBatchResults", "triggerTask", "taskId", "encodedTaskId", "encodeURIComponent", "body", "batchTriggerTask", "createUploadPayloadUrl", "filename", "CreateUploadPayloadUrlResponseBody", "getPayloadUrl", "retrieveRun", "listRuns", "createSearchQueryForListRuns", "searchParams", "before", "listProjectRuns", "replayRun", "ReplayRunResponse", "cancelRun", "CanceledRunResponse", "rescheduleRun", "addTags", "createSchedule", "listSchedules", "toString", "perPage", "append", "retrieveSchedule", "updateSchedule", "deactivateSchedule", "activateSchedule", "deleteSchedule", "scheduleId", "listEnvVars", "projectRef", "importEnvVars", "EnvironmentVariableResponseBody", "retrieveEnvVar", "createEnvVar", "updateEnvVar", "deleteEnvVar", "spanParentAsLink", "Authorization", "inject", "URLSearchParams", "from", "_APIClientManagerAPI", "to", "period", "defaultOptions", "setGlobalAPIClientConfiguration", "baseURL", "store", "client", "APIClientManagerAPI", "apiClientManager", "parsePacket", "stringifyIO", "dataType", "exportPacket", "pathPrefix", "byteLength", "packet", "conditionallyExportPacket", "needsOffloading", "size", "byteSize", "packetRequiresOffloading", "uploadResponse", "conditionallyImportPacket", "presignedResponse", "setAttribute", "importPacket", "loadSuperJSON", "parsed", "dataKey", "dataTypeKey", "createPacketAttributes", "Map", "forEach", "k", "v", "safeReplacer", "getPacketExtension", "outputType", "usage2", "TaskExecutor", "_tracingSDK", "tracingSDK", "_tracer", "_consoleInterceptor", "projectConfig", "_importedConfig", "importedConfig", "_handleErrorFn", "handleErrorFn", "execute", "attemptMessage", "originalPacket", "parsedPayload", "initOutput", "finalOutput", "stringifyError", "TaskRunErrorCodes", "handleErrorResult", "kind", "extractContext", "middlewareFn", "runFn", "init", "fns", "onSuccessFn", "output", "onFailureFn", "cleanupFn", "retriesConfig", "max", "rateLimitError", "millisecondsUntilReset", "retryDelayInMs", "retryAt", "skipRetrying", "Date", "PreciseWallClock", "_origin", "clockTime", "origin", "preciseDate", "preciseNow", "elapsedHrTime", "elapsedNanoseconds", "PreciseDate", "dateStruct", "reset", "SeverityNumber", "iconStringForSeverity", "severityNumber", "DEBUG2", "INFO2", "INFO4", "WARN4", "_ClockAPI", "ERROR4", "clock2", "FATAL3", "SimpleClock", "now", "nowStruct", "logLevels", "SIMPLE_CLOCK", "ClockAPI", "setGlobalClock", "clock", "OtelTaskLogger", "debug", "_level", "properties", "warn", "trace", "safeJsonProcess", "icon", "severityText", "jsonErrorReplacer", "ConsoleInterceptor", "_getTimestampInHrTime", "logger", "sendToStdIO", "intercept", "console", "info", "log", "args", "util", "write", "emit", "getTimestampInHrTime_fn", "getLogMessage", "fallback", "tryParseJSON", "e", "_taskMetadata", "_taskFunctions", "_taskFileMetadata", "registerTaskMetadata", "updateTaskMetadata", "existingMetadata", "updates", "registerTaskFileMetadata", "metadata", "fileMetadata", "push", "getTaskMetadata", "_UsageAPI", "taskExists", "StandardTaskCatalog", "NoopUsageManager", "start", "sample", "cpuTime", "measurement", "pauseAsync", "cb", "NOOP_USAGE_MANAGER", "UsageAPI", "setGlobalUsageManager", "calculateDurationInMs", "startSeconds", "startNanoseconds", "endSeconds", "endNanoseconds", "end", "nanoseconds", "_a", "DevUsageMeasurement", "_pauses", "stop", "_endedAt", "wallTime", "totalPauses", "registerPause", "_currentMeasurements", "_firstMeasurement", "pauseId", "pauseStart", "pauseEnd", "DevUsageManager", "generateRandomString", "characters", "charactersLength", "charAt", "floor", "setInterval", "sendUsageEvent", "event", "accept", "renewedJwt", "UsageClient", "ProdUsageManager", "_usageClient", "isReportingEnabled", "delegageUsageManager", "_measurement", "exports", "setInterval", "maxDelay", "fullTimeouts", "remainingDelay", "delay", "lastTimeoutResult", "setTimeout", "unboundedTimeout", "_taskWaits", "_batchWaits", "Map", "_pendingCompletionNotifications", "disable", "ms", "waitForDuration", "pendingCompletion", "set", "params", "id", "resolve", "length", "Promise", "items", "reject", "results", "resumeTask", "wait", "runId", "DevRuntimeManager", "z", "constructor", "payload", "error", "message", "Error", "ZodSchemaParsedError", "ZodMessageSchema", "object", "version", "default", "type", "string", "unknown", "ZodMessageHandler", "options", "messages", "logger", "console", "parsedMessage", "parseMessage", "success", "handler", "data", "ack", "schema", "parsedPayload", "registerHandlers", "log", "emitter", "on", "callback", "info", "eventName", "hasCallback", "handleMessage", "_schema", "ZodMessageSender", "sender", "import_v3", "import_workers", "import_zodMessageHandler", "handleError", "handleError"]
}
